Справочник по TypoScript
Ключ расширения: doc_core_tsref
Язык: ru
Версия: 4.5.0
Ключевые слова: forAdmins, forIntermediates
Авторские права 2000-2011, Documentation Team, <documentation@typo3.org>

Этот документ публикуется под Open Content License
доступной на http://www.opencontent.org/opl.shtml

Содержимое этого документа относится к TYPO3 
- GNU/GPL CMS/Framework доступной на www.typo3.org





Официальная документация
Этот документ является частью официальной документации TYPO3. Одобрение было получено после экспертной оценки командой по документации TYPO3. Читатель вправе ожидать точной информации в этом документе, о любом несоответствии сообщайте в команду по документации (documentation@typo3.org). Официальные документы сохраняются по возможности актуальными командой по документации.
Перевод официальной документации
Этот документ является переводом официальной документации TYPO3. Перевод может быть не столь актуальным, как оригинал. В случае вопросов, обращайтесь к английской версии.

Руководство по ядру системы
Этот документ является руководством по ядру системы. Такие документы описывают встроенную функциональность TYPO3 и служат для обеспечения читателя подробной информацией. Каждый из документов, посвященных ядру системы, адресован конкретному процессу или функции, и их реализации в исходном коде ядра TYPO3. Это может быть информация по доступным API, определенным параметрам настроек и т.п.
Руководства по ядру системы написаны в виде справочников. Читатель должен сверяться с содержанием для определения конкретного, нужного ему раздела, лучшим образом подходящего под решаемую задачу.
Содержание
Справочник по TypoScript	1
Введение	5
Об этом документе	5
Нововведения	5
Составители	5
Обратная связь	5
Общая информация	6
Типы данных	7
Введение	7
Справочник по типам данных	7
Объекты и свойства	16
Введение	16
Условия	21
Справочник по условиям	21
Функции	36
stdWrap	36
imgResource	47
imageLinkWrap	49
numRows	51
select	51
split	53
if	54
typolink	56
textStyle	62
encapsLines	64
tableStyle	66
addParams	67
filelink	68
numberFormat	70
parseFunc	71
makelinks	74
tags	75
HTMLparser	76
HTMLparser_tags	77
Настройка	79
Top-level objects (основные объекты)	79
"дополнение" TLO	81
"CONFIG"	82
"CONSTANTS"	111
"PAGE"	111
"FE_DATA"	118
"FE_TABLE"	118
"FRAMESET"	120
"FRAME"	120
"META"	121
"CARRAY"	122
Объекты содержи­мого (cObject)	123
HTML	125
TEXT	125
COBJ_ARRAY (COA, COA_INT)	125
FILE	126
В /typo3/sysext/cms/tslib/class.tslib_content.php он определен как функция PHP fileResource().	126
IMAGE	127
IMG_RESOURCE	128
CLEARGIF	128
CONTENT	129
RECORDS	131
HMENU	132
CTABLE	146
OTABLE	147
Создается простая таблица. Можно настроить смещение и несколько других параметров тега table.	147
COLUMNS	147
Вставляет таблицу с несколькими столбцами. Размер и стилизация тега table может быть указана в соответствующих параметрах.	147
HRULER	148
IMGTEXT	149
CASE	154
LOAD_REGISTER	155
RESTORE_REGISTER	155
FORM	155
SEARCHRESULT	164
Объект может использоваться для отображения результатов поиска.	164
USER и USER_INT	167
TEMPLATE	168
FLUIDTEMPLATE	173
MULTIMEDIA	174
SVG	175
EDITPANEL	176
GIFBUILDER	179
GIFBUILDER	179
Названия объектов в этом разделе	181
Не GifBuilderObj	191
Объекты MENU	192
Общие свойства	192
Общие состояния элементов для TMENU, GMENU и IMGMENU:	196
[menuObj].sectionIndex	197
GMENU	198
GMENU_LAYERS / TMENU_LAYERS	201
GMENU_FOLDOUT	205
TMENU	208
TMENUITEM	209
IMGMENU	211
IMGMENUITEM	213
JSMENU	213
JSMENUITEM	214
Приложение A – дополнения media/scripts/  	216
media/scripts/ в общем	216
fe_adminLib.inc	216
tipafriendLib.inc	230
plaintextLib.inc	231
Приложение B – стандартные шаблоны	234
static_template	234
Media	234
Приложение C – включение сценариев PHP	235
Введение	235
Настройки TypoScript	235
Включение собственного сценария	238
Пример	240
Сохранение данных пользователя или сессии	242
Использование встроенной "покупательской корзины"	243
Приложение D – index.php	245
Введение	245
Передача данных в index.php	245
Поиск	246
Почтовые формы	246
Передача данных в базу данных	246


Введение
Об этом документе
Этот документ является полным справочником по всем объектам и свойствам TypoScript, применительно к шаблонам в TYPO3 (а не к настройкам Tsconfig).
За информацией по самому TypoScript, обратитесь к документы «Синтаксис TypoScript и его всестороннее изучение».
Эта версия обновлена для версии TYPO3 4.5.
Нововведения
Основные изменения — это включение новых объектов содержимого FLUIDTEMPLATE и SVG, новое свойство stdWrap "numberFormat" и новые свойства для imageLinkWrap для упрощенной интеграции открывающегося по ссылке окна (lightbox). Кроме того, к справочнику по условиям было добавлено новое условие для текущей страницы, и некоторые улучшения по определению новых браузеров и операционных систем. Теперь почти все свойства TypoScript поддерживают функции stdWrap. Был добавлен новый объект GIFBUILDER "ELLIPSE" и исправлены ошибки в документации многих свойств  GIFBUILDER.
Было внесено множество исправлений. Обновлены все иллюстрации.
Детальную информацию по изменениям в различных версиях TYPO3 можно найти по следующим ссылкам.

Дополнительная информация по изменениям в свойствах
можно найти в списках изменений для предыдущих версий TYPO3 в wiki: 
http://wiki.typo3.org/Documentation_changes_in_4.2 
http://wiki.typo3.org/Documentation_changes_in_4.3 
http://wiki.typo3.org/Documentation_changes_in_4.4_and_4.5 
Составители
Изначально руководство было написано Каспером Скарджи (Kasper Skårhøj). В течение многих лет оно поддерживалось и обновлялось Майклом Стаки (Michael Stucki), Франсуа Сатером (François Suter) и Кристофером Стилмасзиком (Christopher Stelmaszyk).
Обратная связь
По общим вопросам о документации, пишите на documentation@typo3.org.
Если найдена ошибка в этом руководстве, опишите проблему по данному руководству в системе отслеживания ошибок: http://forge.typo3.org/projects/typo3v4-doc_core_tsref/issues
Поддержка качественной документации является тяжелой работой, и команде по документации всегда нужны добровольцы. Если Вы желаете помочь, присоединяйтесь к списку рассылок (typo3.projects.documentation на lists.typo3.org).
Общая информация
Чувствительность к регистру
Все названия и ссылки в TypoScript чувствительны к регистру! Это важно помнить. Это значит, что:
myObject = HTML
myObject.value = <strong> HTML - code </strong>

не тоже самое, что:
myObject = html
myObject.Value = <strong> HTML - code </strong>

В то время как первое будет распознано как объект содержимого "HTML" и будет выведено ожидаемым образом, второе не будет распознано, и ничего не будет выведено. Даже если во втором примере написать "HTML" в верхнем регистре, он не будет работать, так как свойство "value" все еще написано неверно. 
Всегда держите в голове: в данном руководстве важно название объектов.
Типы данных
Введение
The values you assign to properties in TypoScript are often of a specific format. The following table describes these formats. 
E.g. if a value is defined as the type "<tag>", you're supposed to supply HTML-code. If it is of the type "resource", it's a reference to a file from the resource-field in the template. If the type is "GraphicColor" a color-definition is expected and you should supply an HTML-valid color-code or RGB-values comma-separated.
Значения, определяемые для свойств, зачастую имеют определенный формат в TypoScript. Эта таблица — справочник по данным форматам. 
Например, если значение определено как тип "<tag>", вы можете предположить поддержку кода HTML. Если это тип "resource", то это ссылка на файл из поля ресурсов шаблона. Если тип — "GraphicColor", ожидается определение цвета и, возможно, соответствующие HTML-коды цвета или значения RGB через запятую. 
Справочник по типам данных
Тип данных:
Примеры:
Комментарии:
По умолчанию:
<tag>
<BODY bgcolor="red">


align
right
right / left / center
Определяет выравнивание, обычно в тегах HTML
left
VHalign
Гор.выр. = вправо и Верт.выр. = по центру:
r , c
Пара значений через запятую. Первое значение отвечает за выравнивание по горизонтали, второе — по вертикали.

Возможные значения:
r/c/l , t/c/b

Значения для выравнивания по горизонтали: вправо, по центру, влево.
Значения для выравнивания по вертикали: по верху / по центру / по низу.
l , t
resource
Из поля ресурсов:
toplogo*.gif

Относительно файловой системы:
fileadmin/picture.gif
1. Ссылка на файл из поля ресурсов в шаблоне.
Можно написать имя точно или использовать шаблон-звез­дочку (*) для подстановки.
Рекомендуется перед расширением использовать звездочку "*" (пример слева). Это гарантирует корректную ссылку на файл даже при копирова­нии шаблона и добавлении номера к названию файла!!!
2. Если значение содержит "/", значит использует­ся ссылка (абсолютная или относительная) к файлу в файловой системе, вместо поля ресурсов. Знаки для шаблона не поддерживаются.

imgResource
Здесь "file" – imgResource:
file = toplogo*.gif
file.width = 200

GIFBUILDER:
file = GIFBUILDER
file {
   ... (GIFBUILDER-properties here)
}
1. "resource" (выше) + свойства imgResource (при­мер слева и ссылка на объект ниже).
Типы файлов могут быть любыми из разрешенных в переменной настроек
$TYPO3_CONF_VARS['GFX']['imagefile_ext']. Обычно pdf, gif, jpg, jpeg, tif, bmp, ai, pcx, tga, png.
2. Объект GIFBUILDER.

HTML-code
<b>Полужирный текст</b>
Чистый код HTML.

target
_top
_blank
content
Цель для тега <A>. 
Обычно то же значение, что и название основного объекта, определяющего фрейм.

imageExtension
jpg
web (gif или jpg ..)
Расширения изображений могут быть любыми из разрешенных в глобальной переменной настроек $TYPO3_CONF_VARS['GFX']['imagefile_ext']. Обычно pdf, gif, jpg, jpeg, tif, bmp, ai, pcx, tga, png.
Специальное значение "web". Просто обеспечивает преобразование изображения в формат для сети (gif или jpg), если этого еще не было сделано!

degree

От -90 до 90, целое число.

posint / int+

Положительное целое.

int

Целое.
(иногда используется вместо других, более  умест­ных значений, вроде "pixels").

str / string / value

Строка.
(иногда используется вместо других, более  умест­ных значений, вроде "align")

boolean
1
Булева переменная. 
Не пустая строка (но не ноль) воспринимается как "истина".

rotation

Целое, градусы от 0 до 360.

x,y,w,h
10,10,5,5
x,y – смещение от верхнего левого угла. 
w,h – ширина и высота.

HTML-цвет
red
#ffeecc 
Коды HTML цветов:

Black = "#000000"   
Silver = "#C0C0C0"   
Gray = "#808080"   
White = "#FFFFFF"   
Maroon = "#800000"   
Red = "#FF0000"   
Purple = "#800080"   
Fuchsia = "#FF00FF"   
Green = "#008000"
Lime = "#00FF00"
Olive = "#808000"
Yellow = "#FFFF00"
Navy = "#000080"
Blue = "#0000FF"
Teal = "#008080"
Aqua = "#00FFFF" 

GraphicColor
red	(HTML-цвет)
#ffeecc 	(HTML-цвет)
255,0,255	(RGB-значения)

Дополнительно:
red : *0.8	("red" с фактором затем­нения 0.8)
#ffeecc : +16	("ffeecc" преобразу­ется в #fffedc, так как добавлено 16).

Цвет может быть задан как HTML-цвета или в виде списка RGB-значений (целых) через запятую.
Можно добавить дополнительные параметры, де­лающие математические преобразования:
Синтаксис:  
[цвет] : [параметр],
где параметр может быть и целое, которое добав­ляется/вычитается из трех RGB-каналов или число с плавающей точкой с префиксом "*", которое служит множителем.

page_id
this
34
Id страницы (целое) или "this" (=id текущей стра­ницы).

pixels
345
Расстояние в пикселях.

list
item,item2,item3
Список значений.

margins
Левый отступ установлен на 10, а от­ступ снизу — на 5. Отступы сверху и справа не установлены (ноль):
10,0,0,5
l,t,r,b
слева, сверху, справа, снизу.

wrap
Значение будет заключено в тег font  с красным цветом шрифта:
<font color="red"> | </font>
<...> | </...>
Используется для "оборачивания" чего-либо. Ча­сти справа и слева от вертикальной черты поме­щаются, соответственно, справа и слева от значе­ния к которому применяется выражение.

linkWrap
При этом создается ссылка на корень сайта:
<a href="?id={0}"> | </a>
<.. {x}.> | </...>
{x}; x целое (0-9) и указатель на ключ в массиве PHP корневой линии. Ключ означает уровень теку­щей страницы относительно корня сайта.
Если ключ существует, то вместо {x} подставляет­ся uid из уровня на который указывается .
Таким образом можно вставить id страниц предыдущего уровня.

case
upper
"upper" / "lower"
Преобразование регистра символов.

space
5 | 5
"до | после"
Используется для установки отступов до | после содержимого.

date-conf
d-m-y (формат дд-мм-гг)
Смотрите PHP функцию Date()!

a - "am" или "pm"
A - "AM" или "PM"
d – день месяца, число, 2 знака (с нулем)
D – день недели, текст, 3 знака; напр. "Fri"
F – месяц, текст, длинное; напр. "January"
h - час, число, 12 часовой формат
H - час, число, 24 часовой формат
i – минуты, число
j – день месяца, число, без нуля
l (нижний регистр 'L') – день недели, текст, длин­ное; напр. "Friday"
m – месяц, число
M – месяц, текст, 3 знака; напр. "Jan"
s – секунды, число
S – английский порядковый суффикс, текст, 2 зна­ка; напр. "th", "nd"
U – секунды с начала эпохи
Y – год, число, 4 знака
w – день недели, число, 0 означает воскресенье
y – год, число, 2 знака
z – день года, число; напр. "299"

strftime-conf
Дата "ДД-ММ-ГГ" = 
%e:%m:%y

Время "HH:MM:SS" = 
%H:%M:%S

или просто
%T
%a – аббревиатура дня недели, в соответствии с  региональными настройками
%A – полное название дня недели, в соответствии с  региональными настройками 
%b – аббревиатура названия месяца, в соответ­ствии с  региональными настройками
%B – полное название месяца, в соответствии с  региональными настройками 
%c – предопределенная установка даты и време­ни для текущего региона
%C – номер столетия (год, деленный на 100, и усеченный до целого, в диапазоне от 00 до 99) 
%d – день месяца, как десятичное число (от 00 до 31) 
%D – то же, что %m/%d/%y 
%e – день месяца, как десятичное число, однозначные цифры предополнены пробе­лом (диапазон от ' 1' до '31') 
%h – то же, что %b 
%H – часы, как число в 24-часовом диапазо­не (от 00 до 23) 
%I – часы, как число в 12-часовом диапазоне (от 01 до 12) 
%j – день года в виде числа (от 001 до 366) 
%m – месяц, как число (от 01 до 12) 
%M – минуты, как число 
%n – знак перехода строки 
%p - либо `am', либо `pm' в соответствии с задан­ным значением времени или соответствующим строкам для данного региона
%r – время, с a.m. и p.m. 
%R – время в 24 часовом формате 
%S – секунды, как число 
%t – знак табуляции 
%T – текущее время, то же, что %H:%M:%S 
%u – день недели, как число [1,7], 1 представляет понедельник 
%U – номер недели текущего года, как число, счи­тая первое воскресенье как первый день первой недели
%V – номер недели текущего года в формате ISO 8601:1988, диапазон от 01 до 53, где 1 — первая неделя, имеющая хотя бы 4 дня в текущем году, и понедельник считается первым днем недели. 
%W – номер недели текущего года, как число, на­чиная с первого понедельника, как первого дня первой недели.
%w – день недели, как число, воскресенье - 0 
%x – предопределенная дата представляющая те­кущие региональные установки, без времени
%X - предопределенное время представляющее текущие региональные установки, без даты
%y – год, как число без столетия (от 00 до 99) 
%Y – год, как число, включая столетие 
%Z – временная зона, название или аббревиатура
%% - знак `%'.

UNIX-time
Секунды от 07/04 2000 23:58:
955144722
Секунды, начиная с 1/1 1970...

path
fileadmin/stuff/
Путь относительно директории с которой работаем.

<tag>-data
<frameset>-data: row
может быть '150,*'



<tag>-параметры
<frameset>-параметры
может быть 'border="0" framespacing="0"'


getText





= field : header
получение содержимого из $cObj->data-array[header]













= parameters : color
получение содержимого из $cObj->parameters-array[color]

= register : color
получение содержимого из $GLOBALS['TSFE']->register[color]

= leveltitle : 1
получение заголовка страницы первого уровня корневой линии
= leveltitle : -2 , slide
получение заголовка страницы, уровня сразу перед текущей страницей И, если ее нет, ниже по корневой линии, пока не обнаружится заголовок
= leveluid : 0
получение id корневой страницы сайта (нулевого уровня)

= levelfield : -1 , user_myExtField , slide
получение значения пользовательского поля "user_myExtField" в корневой линии (требуется дополнительная настройка в $TYPO3_CONF_VARS для включения поля!)

= global : HTTP_COOKIE_VARS | some_cookie
получение любой переменной $HTTP_COOKIE_VARS[some_cookie]

= date : d-m-y
получение текущего времени в формате дд-мм-гг

= page : title
получение заголовка текущей страницы

= current : 1
получение текущего значения

= level : 1
получение уровня текущей страницы в корневой линии

= GP : stuff
получение введенного значения из строки запроса, (&stuff=)
= GP : stuff | key
получение введенного значения из строки запроса, (&stuff[key]=)

= getenv : HTTP_REFERER
получение любой переменной HTTP_REFERER

= getIndpEnv : REMOTE_ADDR
получение IP клиента

= DB : tt_content:234:header
получение значение заголовка записи с uid 234 из таблицы tt_content



= fullRootLine : -1, title
получение заголовка страницы, сразу до начальной страницы текущего сайта


























= LLL:EXT:css_styled_content/
pi1/locallang.x:login.logout
получение локализованной метки для кнопки выхода

= path:EXT:ie7/js/ie7-standard.js
получение пути к файлу, относительно корня сайта, можно помещать в расширении

= cObj : parentRecordNumber
получение номера записи текущего cObject



= debug : rootLine
визуальное представление текущей корневой линии в HTML

Возвращает значение из массива PHP, определенного в типе. Синтаксис "тип : указатель". Значение для типа чувствительно к регистру.

field: [название поля из текущего $cObj->масси­ва данных в cObj]
По умолчанию $cObj->массив данных, это  $GLOBALS['TSFE']->page (запись текущей страни­цы!).
В TMENU: $cObj->data установлены на запись страницы для каждого элемента меню.
В CONTENT/RECORDS $cObj->data установле­ны на фактическую запись.
В GIFBUILDER $cObj->data установлены на поддерживаемые GIFBUILDER данные.

parameters: [название поля из текущего $cObj-> массива параметров в cObj].
Смотрите ->parseFunc!

register: [название поля из $GLOBALS['TSFE']->register].
Смотрите cObject "LOAD_REGISTER"

leveltitle, leveluid, levelmedia: [levelTitle, uid или media в корневой линии, 0- , negative = назад, " , slide" параметра принудительно перемещается вниз по корневой линии, пока не будет возвращено "правильное" значение. Полезно для порядковых медиа].




levelfield: вроде "leveltitle" и т.п., но второй параметр — нужное для получения значения поле в корневой линии. Синтаксис: [указатель, целое], [название поля], ["slide"]



global: [GLOBAL-переменная, разделяемая по | если нужно получение значения из массива! УСТАРЕЛО, используйте GP, TSFE или getenv]


date: [настройка даты]



page: [запись текущей страницы]


current: 1 (получение "текущего" значения)

level: 1 (получение уровня текущей страницы в корневой линии)

GP: значение из методов GET или POST. Используйте вместо глобальной
GPvar: использование "GPvar" осуждается. Используйте вместо этого "GP".

getenv: значение из переменных окружения

getIndpEnv: значение из t3lib_div::getIndpEnv()

DB: значение из базы данных, синтаксис: [название таблицы] : [uid] : [поле]. Здесь можно выбрать любые записи из таблицы, определенной в TCA. Записи, отмеченные для удаления не могут быть получены таким образом.

fullRootLine: синтакси [указатель, целое], [название поля], ["slide"]
Это свойство можно использовать для получения значений "выше" корня текущей страницы. В при­веденном ниже дереве страниц, текущее местопо­ложение – страница  “Вы здесь!”. Используя опи­санное выше свойство “levelfield”, возможно перейти вверх лишь до страницы “Корень сайта”, так как это корень нового (под) сайта. Используя “fullRootLine” возможно перейти вплоть до корня дерева страниц. Числа в квадратных скобках гово­рят, на какую страницу будут указывать соответ­ствующие значения:

- Корень дерева страниц   [-2]
   |- 1. страница перед   [-1] 
      |- Корень сайта (здесь шаблон сайта!)   [0]
         |- Вы здесь!  [1]

Параметр “slide” можно добавлять также, как для свойств levelfield до этого.

LLL: ссылка на locallang (php или xml) метку label. Ссылка состоит из [ссылки на файл]:[ключа метки]

path: путь к файлу, возможно находящемуся в расширении, возвращает пустое значение, если фала не существует.

cObj: [внутренняя переменная из списка: "parentRecordNumber"]: для CONTENT и RECORDS cObjects запрашивается через  select, что возвращает номер строки (1,2,3,...) текущей записи cObject.

debug: возвращает содержимое переменной PHP, определенной по ключевому слову, в формате HTML. Доступны ключи “rootLine”, “fullRootLine”, “data”.

Получение элементов массива/объекта.
Можно выбрать значение массива/объекта, разде­ляя их вертикальной чертой “|”.
Пример:
= TSFE:fe_user|user|username

Получение нескольких значений.
При разделении значений getText знаком "//" (двой­ной слеш),  getText выбирает первое значение. Если оно пусто ("" или ноль), выбирается следую­щее значение и т.д. Пример:
= field:header // field:title // field:uid
Выбирается "title" если "header" пустое. Если же "title" тоже пуст, выбирается поле "uid".

dir
Возвращает список всех pdf, gif и jpg файлов из fileadmin/files/ отсортиро­ванный по названиям в обратном по­рядке и с полным путем (с префик­сом "fileadmin/files/")
fileadmin/files/ | pdf,gif,jpg | name | r | true
[путь, относительно корня сайта] | [список расши­рений] | [сортировка: name, size, ext, date] |  [обратная: "r"]  |  [возвратить полный путь: буле­ва переменная]
Соответствующие файлы возвращаются в строке, через запятую.
Замечание:
Значение настройки "lockFilePath" должно соответ­ствовать первой части пути к файлам. Иначе путь к файлам будет заблокирован.

function  name
Функция:
user_reverseString
Метод в классе:
user_stringReversing
->reverseString
Указание для вызова функции или метода в клас­се. Дополнительные сведения содержатся в USER cObject.
В зависимости от реализации, названия класса или функции (но не метода) возможно должны быть содержать префикс “user_”. Это можно изме­нить через настройку TYPO3_CONF_VARS. Кроме того, функция / метод обычно вызывается с двумя параметрами, typo $conf (TS настройка) и $content (некое содержимое для обработки и возвраще­ния).
Также, при вызове метода в классе, проверяется (при использовании объектов USER/USER_INT) наличие класса с тем же именем, но с префик­сом “ux_”, и если он существует, создается экземпляр этого класса. За дополнительной информацией по классам обратитесь к документу “Inside TYPO3”!

[tsref:(datatypes)]
Тип данных: Object types
Это некоторые "типы данных",которые могут встретиться, а также соответствующие их значения:
Тип данных:
Комментарии:
cObject
"cObjects", также называется "Объект содержимого". Смотрите раздел "Объекты содержимого" далее в этом руководстве.

Примеры:
HTML / TEXT / IMAGE .... 
frameObj
FRAMESET / FRAME
menuObj
Смотрите раздел "Объекты меню" далее в этом руководстве.

Примеры:
GMENU / TMENU / IMGMENU / JSMENU
GifBuilderObj
Смотрите раздел "GIFBUILDER" далее в этом руководстве.

Примеры:
TEXT / SHADOW / OUTLINE / EMBOSS / BOX / IMAGE / EFFECT

Объекты и свойства
Введение
Ссылка на объекты
Везде, где в таблицах встречается ->[название_объекта], имеется ввиду, что свойство — это "название_объекта" со всеми своими свойствами для объекта название_объекта. Тип объекта не нужно определять. 
Вычисляемые значения (+calc)
Иногда тип данных установлен как "что-то +calc". "+calc", это означает вычисление значения посредством "+-/*". Будьте внимательны, при вычислениях не учитывается "вес" операторов. Вычисления проводятся по мере следования — справа налево.
Пример:
45 + 34 * 2 = 158		(что в обычной арифметике записывается как: (45+34)*2=158)

"... /stdWrap"
Если тип данных установлен как "type /stdWrap" значит значение пропускается через функцию stdWrap со значениями свойств в качестве параметров.
Пример:
pixels /stdWrap:	то есть, значение должно быть установлено в пикселях и пропускается через stdWrap.
Фактически в реальном приложении можно сделать так:
.pixels.field = imagewidth
.pixels.intval = 1

В этом примере, импортируются значения из поля "imagewidth" текущего $cObj->массива данных. Но здесь не нужно проверять, чтобы значение было целым числом, так как оно анализируется функцией intval().
optionSplit
optionSplit — очень хитрая функция. Прежде всего, она используется в объектах меню, когда свойства целой ветви элементов устанавливаются за раз. При этом, значения свойств анализируются этой функцией, и, в зависимости от настроек, можно, например, выделить последний пункт меню другим цветом.
Синтаксис примерно такой:
|*|	- разделение значений на части первая, средняя, последняя.
||	-  разделитель каждой из первой, средней, последней частей на подразделы.
1. Приоритет — последняя, первая, средняя.
2. Если среднее значение пустое (""), повторяется последняя часть первого значения.
3. Если первое или среднее значение пустое, повторяется первая часть последнего значения перед последним значе­нием.
4. Среднее значение повторяется.

Например:  первое1 || первое2 |*| среднее1 || среднее2 || среднее3  |*| последнее1 || последнее2

Примеры:
Все это очень сложно, и можно подумать, что слишком далеко забежали. Но это действительно полезно.
Рассмотрим меню из пяти элементов:
	Введение
	О нас
	Услуги
	Контакты
	Ссылки

... и подобную настройку (взята из образца кода первых страниц):
temp.topmenu.1.NO {
  backColor = red
  ....
}

Если взглянуть в этом справочнике (ниже) на свойство linkWrap объекта GMENU, то видно, что все свойства .NO анализируются функцией optionSplit. Это значит, что перед формированием каждого пункта меню, его свойства разделяются этой функцией. Давайте рассмотрим несколько примеров:
Подчасти   ||
Пример:
Для всех элементов берется тоже самое значение. Определена только первая часть, которая повторяется для всех элементов.
TS:	backColor = red

	Введение		(red)
	О нас	(red)
	Услуги		(red)
	Контакты		(red)
	Ссылки		(red)

Пример:
Здесь первая часть разделена на подразделы. Третий подраздел повторяется, так как в меню пять элементов.
TS:	backColor = red || yellow || green

	Введение	(red)		первая, подраздел 1
	О нас	(yellow)		первая, подраздел 2
	Услуги		(green)		первая, подраздел 3
	Контакты		(green)		первая, подраздел 3 (повтор)
	Ссылки		(green)		первая, подраздел 3 (повтор)

Части   |*|
Пример:
Теперь определено и среднее значение ("white"). Это значит, что после первых двух элементов меню, используется среднее значение. 
TS:	backColor = red || yellow |*| white

	Введение		(red)		первая, подраздел 1
	О нас	(yellow)		первая, подраздел 2
	Услуги		(white)		средняя
	Контакты		(white)		средняя
	Ссылки		(white)		средняя
Пример:
Теперь также определено последнее значение ("blue || olive"). Это значит, что после первых двух элементов меню ис­пользуется среднее значение.  
TS:	backColor = red || yellow |*| white |*| blue || olive

	Введение		(red)		первая, подраздел 1
	О нас		(yellow)		первая, подраздел 2
	Услуги		(white)		средняя
	Контакты		(blue)		последняя, подраздел 1
	Ссылки		(olive)		последняя, подраздел 2

...немного увеличим меню (повторяется среднее значение!)
	Введение		(red)		первая, подраздел 1
	О нас		(yellow)		первая, подраздел 2
	Услуги		(white)		средняя
	....		(white)		средняя
	....		(white)		средняя
	....		(white)		средняя
	....		(white)		средняя
	Контакты		(blue)		последняя, подраздел 1
	Ссылки		(olive)		последняя, подраздел 2

...а если урезать меню до четырех элементов (среднее значение не используется, ввиду его низкого приоритета)
	Введение		(red)		первая, подраздел 1
	О нас		(yellow)		первая, подраздел 2
	Контакты		(blue)		последняя, подраздел 1
	Ссылки		(olive)		последняя, подраздел 2

...а теперь урежем меню до трех элементов (последний подраздел первого значения не используется, так как его прио­ритет ниже последнего значения)
	Введение		(red)		первая, подраздел 1
	Контакты		(blue)		последняя, подраздел 1
	Ссылки		(olive)		последняя, подраздел 2

"1: Приоритет последняя, первая, средняя"
В последних двух примерах показано, что последнее значение имеет высший приоритет, затем идет первое значение, а в конце — среднее.
"2: Если среднее значение пустое, повторяется последняя часть первого значения"
Пример:
Здесь среднее значение отсутствует. Поэтому повторяется второй подраздел первого значения. Заметьте, что между двумя |*||*| нет никаких пробелов!
TS:	backColor = red || yellow |*||*| blue || olive

	Введение		(red)		первая, подраздел 1
	О нас		(yellow)		первая, подраздел 2
	Услуги		(yellow)		первая, подраздел 2 (повтор)
	Контакты		(blue)		последняя, подраздел 1
	Ссылки		(olive)		последняя, подраздел 2

"3: Если первое или последнее значения пустые, перед последним значением повторяется первая часть последнего значения"
Пример:
Теперь отсутствуют первое и последнее значения. Поэтому повторяется первый подраздел последнего значения.  За­метьте, что между двумя |*||*| нет никаких пробелов!
TS:	backColor = |*||*| blue || olive

	Введение		(blue)	последняя, подраздел 1 (повтор)
	О нас		(blue)	последняя, подраздел 1 (повтор)
	Услуги		(blue)	последняя, подраздел 1 (повтор)
	Контакты		(blue)	последняя, подраздел 1
	Ссылки		(olive)	последняя, подраздел 2

"4: Среднее значение повторяется"
Пример:
TS:	backColor = red |*| yellow || green |*| 

	Введение		(red)		первая
	О нас		(yellow)		средняя, подраздел 1
	Услуги		(green)		средняя, подраздел 2
	....		(yellow)		средняя, подраздел 1
	....		(green)		средняя, подраздел 2
	....		(yellow)		средняя, подраздел 1
	....		(green)		средняя, подраздел 2
	Контакты		(yellow)		средняя, подраздел 1
	Ссылки		(green)		средняя, подраздел 2
Условия
Справочник по условиям
Общий синтаксис
Каждое условие заключается в квадратные скобки. Список доступных условий приведен ниже.
"[ELSE]" доступен в качестве оператора иначе (else). Это условие возвращает TRUE, если предыдущие условия вернули FALSE.
Каждый блок условия должен заканчиваться "[GLOBAL]".
Пример:
[browser = msie]
  # Код TypoScript для пользователя с Internet Explorer.
[ELSE]
  # Код TypoScript для пользователей с другими браузерами.
[GLOBAL]
Общие замечания
Обычно значения обрезаются по пробелу перед сравнением, поэтом пробелы не берутся во внимание.
Можно комбинировать несколько условий посредством двух операторов: && (и), || (или).
Вместо "&&" и "||" можно использовать "AND" и "OR". Оператор AND имеет прио­ритет над ИЛИ. Если операторов не используется, подразумевается оператор ИЛИ.
Обратите внимание, что условия нельзя использовать внутри фигурных скобок.
Полная информация об условиях содержится в документе «Синтаксис TypoScript и его всестороннее изучение».
Примеры:
Это условие проверяет, открыт ли сайт в браузере Internet Explorer на Windows (но не на Mac):
	[browser = msie] && [system = win]

Это будет соответствовать браузерам Opera или Firefox:
	[browser = opera] || [browser = firefox]

Это соответствие Firefox или Internet Explorer. В случае Internet Explorer, версия должна быть больше или равна 6.
	[browser = firefox] || [browser = msie] && [version => 6]
browser
Синтаксис:
[browser = browser1,browser2,...]
Значение и условия:
Браузер:
Обозначение:
Amaya
amaya
AOL
aol
Avant
avant
Camino
camino
Google Chrome
chrome
Mozilla Firefox
firefox
Flock
flock
Gecko
gecko
Konqueror
konqueror
Lynx
lynx
NCSA Mosaic
mosaic
Microsoft Internet Explorer
msie
Navigator
navigator
Netscape Communicator
netscape
OmniWeb
omniweb
Opera
opera
Safari
safari
SeaMonkey
seamonkey
Webkit
webkit
?? (если ничего из приведенного выше не было найдено в user agent)
unknown

Условие работает со строкой user agent. Она анализируется регулярным выражением, ищущим соответствие строки приведенным выше идентификаторам. Если соответ­ствие множественное, используется расположенное правее, так как в основном оно и является правильным.
Пример user agent может быть таким:
Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15

В этой строке имеются идентификаторы "Gecko" и "Firefox". Условие
[browser = firefox]

возвратит истину.
Ранние версии TYPO3
До TYPO3 4.2 user agent определялся по другому: каждое значение сравнивалось с ($browsername.$browserversion, например, "netscape4.72"), используя strstr(). Таким образом, если значение было "netscape" или даже "scape", либо "net" — то ему соответ­ствовали все браузеры netscape. Если значение было "netscape4", то ему соответствовали все браузеры Netscape 4.xx. Если любое значение из списка соответствует текущему браузеру, возвращалась верное условие.
В TYPO3 версии 4.2 и старше не определяются все перечисленные выше браузеры.
Примеры:
Соответствует браузерам Chrome и Opera-browsers:
[browser = chrome, opera]

version
Синтаксис:
[version = value1, >value2, =value3, <value4, ...]
Условие:
Значения — цифры с плавающей запятой, в качестве разделителя используется точка ".".
Значения могут использовать три оператора:
Оператор:
Функция:
 [nothing]
Значение должно быть частью начала строки версии. То есть, версии "4.72" соответствуют значения "4" или "4.7", а значение "4.73" не соответствует.
Пример синтаксиса: "значение1"
=
Значение должно точно соответствовать. Версии "4.72" соответствует лишь значение "4.72".
>
Версия должна быть больше значения.
<
Версия должна быть меньше значения.

Примеры:
Это значение соответствует лишь точному номеру версии браузеров "4.03":
[version=  =4.03]
Это значение соответствует всем браузерам, с версией выше 4 и браузерам netscape 3:
[version=  >4][browser= netscape3]

system
Синтаксис:
[system= system1,system2]
Значения и сравнение:
Система:
Обозначение:
Linux
linux
Android
android
OpenBSD/NetBSD/FreeBSD
unix_bsd
SGI / IRIX
unix_sgi
SunOS
unix_sun
HP-UX
unix_hp
Chrome OS
chrome
iOS
iOS
Macintosh
mac
Windows 7
win7
Windows Vista
winVista
Windows XP
winXP
Windows 2000
win2k
Windows NT
winNT
Windows 98
win98
Windows 95
win95
Windows 3.11
win311
Amiga
amiga
Сравнение с операционной системой, используемой посетителями. Значение системы извлекается из строки useragent.
Значения — это строки и совпадением считается вхождение указанных строк в первую часть идентификатора системы.
Например, значение "win9" соответствует системе "win95" и "win98".
Примеры:
Это значение соответствует только системам windows и mac:
[system= win,mac]

Обратная совместимость с ранними версиями TYPO3
TYPO3 версии 4.4 или выше не обнаруживали все указанные выше системы.
Для обратной совместимости, некоторым системам даются более расплывчатые строки.
Рекомендуется использовать приведенные выше идентификаторы, хотя следующее тоже будет верным:

Система:
Общий идентификатор:
Android
linux
Chrome OS
linux
iOS
mac
Windows 7
winNT
Windows Vista
winNT
Windows XP
winNT
Windows 2000
winNT

device
Синтаксис:
[device= device1, device2]
Значения и сравнение:
Устройство:
Обозначение:
КПК
pda
WAP телефоны
wap
Грабберы:
grabber
Индексирующие роботы:
robot
Значения — это строки и совпадением считается вхождение указанных строк в первую часть идентификатора устройства.
Примеры:
Это значение соответствует WAP-телефонам и КПК:
[device = wap, pda]

useragent 
Синтаксис:
[useragent = agent]
Значения и сравнение:
Это прямое сравнение со строкой пользовательского агента из getenv("HTTP_USER_AGENT")
Имеется возможность вставить "*" в начало и/или в конец значения agent для соответствия этому шаблону!
Примеры:
Если HTTP_USER_AGENT - "Mozilla/4.0 (совместимый; Lotus-Notes/5.0; Windows-NT)", то соответствующее значение:
[useragent = Mozilla/4.0 (compatible; Lotus-Notes/5.0; Windows-NT)]

Это значение также будет соответствовать:
[useragent = *Lotus-Notes*]

...но это значение будет соответствовать и пользовательскому агенту вроде этого: "Lotus-Notes/4.5 ( Windows-NT )"
Краткий список строк значений пользовательских агентов и условий соответствия им:
HTTP_USER_AGENT:
Описание агента:
Условия соответствия:
Nokia7110/1.0+(04.77)
Nokia 7110 WAP телефон
[useragent= Nokia7110*]
Lotus-Notes/4.5 ( Windows-NT )
Браузер Lotus-Notes 
[useragent= Lotus-Notes*]
Mozilla/3.0 (compatible; AvantGo 3.2)
Браузер AvantGo
[useragent= *AvantGo*]
Mozilla/3.0 (compatible; WebCapture 1.0; Auto; Windows)
Adobe Acrobat 4.0
[useragent= *WebCapture*]

WAP-агенты:
Это некоторые из известных WAP агентов:
HTTP_USER_AGENT:
HTTP_USER_AGENT (продолжение):
ALAV UP/4.0.7
Alcatel-BE3/1.0 UP/4.0.6c
AUR PALM WAPPER
Device V1.12
EricssonR320/R1A
fetchpage.cgi/0.53
Java1.1.8
Java1.2.2
m-crawler/1.0 WAP
Materna-WAPPreview/1.1.3
MC218 2.0 WAP1.1
Mitsu/1.1.A
MOT-CB/0.0.19 UP/4.0.5j
MOT-CB/0.0.21 UP/4.0.5m
Nokia-WAP-Toolkit/1.2
Nokia-WAP-Toolkit/1.3beta
Nokia7110/1.0 ()
Nokia7110/1.0 (04.67)
Nokia7110/1.0 (04.67)
Nokia7110/1.0 (04.69)
Nokia7110/1.0 (04.70)
Nokia7110/1.0 (04.71)
Nokia7110/1.0 (04.73)
Nokia7110/1.0 (04.74)
Nokia7110/1.0 (04.76)
Nokia7110/1.0 (04.77)
Nokia7110/1.0 (04.80)
Nokia7110/1.0 (30.05)
Nokia7110/1.0
PLM's WapBrowser
QWAPPER/1.0
R380 2.0 WAP1.1
SIE-IC35/1.0
SIE-P35/1.0 UP/4.1.2a
SIE-P35/1.0 UP/4.1.2a
UP.Browser/3.01-IG01
UP.Browser/3.01-QC31
UP.Browser/3.02-MC01
UP.Browser/3.02-SY01
UP.Browser/3.1-UPG1
UP.Browser/4.1.2a-XXXX
UPG1 UP/4.0.7
Wapalizer/1.0
Wapalizer/1.1
WapIDE-SDK/2.0; (R320s (Arial))
WAPJAG Virtual WAP
WAPJAG Virtual WAP
WAPman Version 1.1 beta:Build W2000020401
WAPman Version 1.1
Waptor 1.0
WapView 0.00
WapView 0.20371
WapView 0.28
WapView 0.37
WapView 0.46
WapView 0.47
WinWAP 2.2 WML 1.1
wmlb
YourWap/0.91
YourWap/1.16
Zetor

language
Синтаксис:
[language = lang1, lang2, ...]
Сравнение:
Значения должны строго соответствовать значению getenv(“HTTP_ACCEPT_LANGUAGE”) из PHP. Также, если значение заключено в “*” (например “*en-us*”), то все языки, найденные в строке HTTP_ACCEPT_LANGUAGE будут разбиты и бу­дет произведена попытка сравнения с любой из частей этой строки. Так, обычно строка выглядит примерно так: “de,en-us;q=0.7,en;q=0.3”, и значение “*en-us*” будет ей соответствовать.
IP
Синтаксис:
[IP = ipaddress1, ipaddress2, ...]
Сравнение:
Значение сравнивается с getenv(“REMOTE_ADDR”) из PHP.
Возможно включать "*" вместо одной из частей значения. Также можно включать в список первую, вторую или третью части адреса, при этом сравниваться будут лишь они.
Примеры:
В этом примере строке соответствуют лишь IP-адреса, начинающиеся с "123":
[IP = 123.*.*.*]
или
[IP = 123]
В этом примере строке соответствуют IP-адреса, оканчивающиеся на "123" или адрес "192.168.1.34":
[IP = *.*.*.123][IP = 192.168.1.34]

hostname
Синтаксис:
[hostname = hostname1, hostname2, ...]
Сравнение:
Значение сравнивается с полноценным названием хоста getenv(“REMOTE_ADDR”), найденном в PHP.
Значение — список названий соответствующих доменов через запятую. Возможно использование знака звездочки *, но она не может использоваться в качестве части строки, а должна заменять полное название хоста (например, myhost.*.com => правильно, myhost.*domain.com => не правильно)

hour
Синтаксис:
[hour = hour1, > hour2, < hour3, ...]
Замечание: первый знак "=", сразу после слова "hour", обязателен, и не является оператором. После него идет оператор, а потом — час. 
Сравнение:
Возможные значения — от 0 до 23 (в 24-часовом формате). Значение в виде числа с плавающей точкой сравнивается с текущим часом сервера.
Как указано в разделе "Синтаксис" выше, можно разделять несколько значений в одном условии при помощи запятой. Запятая связывает условия в виде логического сложения (ИЛИ), то есть все условие будет верным, если хотя бы один из операндов верен. 
Оператор:
Функция:
[none]
Требуется точное соответствие.
>
Час должен быть больше значения.
<
Час должен быть меньше значения.
<=
Час должен быть меньше или равен значению.
>=
Час должен быть больше или равен значению.
!=
Час не должен быть равен значению.
Примеры:
Будет верным, если значение между 9 и 10 часами (в соответствии с временем на сервере):
[hour = 9]
Будет верным, если значение меньше 7 часов:
[hour = < 7]
Будет верным, если значение меньше 15 часов:
[hour = <= 14]
Следующий пример показывает использование запятой внутри условия:
Будет верным, если значение между 8 и 9 часами (час равен 8) или после 16 часов (час больше или равен 16):
[hour = 8, >= 16]
Будет верным, если значение между 16 и 8 часами (помните, что запятая выступает в роли оператора ИЛИ):
[hour = > 15, < 8]
И наоборот, условие верно, если менее 8 и более 16 часов:
[hour = > 7] && [hour = < 16]

minute
Тот же синтаксис, что и у "Hour" выше!
Синтаксис:
[minute = ...]
Сравнение:
Минуты часа, возможный интервал значений 0-59.
Помимо этого используется тот же способ сравнения, что и для часа.

month
Тот же синтаксис, что и у "Hour" выше!
Синтаксис:
[month = ...]
Сравнение:
Месяц, начиная с января — 1 и до декабря — 12.
Помимо этого используется тот же способ сравнения, что и для часа.

year
Тот же синтаксис, что и у "Hour" выше! За дополнительной информацией обратитесь к руководству по PHP, фор­мату сроки Y функции date().
Синтаксис:
[year = ...]
Сравнение:
Год, как 4-значное число.
Помимо этого используется тот же способ сравнения, что и для часа.

dayofweek
Тот же синтаксис, что и у "Hour" выше!
Синтаксис:
[dayofweek = ...]
Сравнение:
День недели, начиная с воскресенья — 0 и до субботы — 6.
Помимо этого используется тот же способ сравнения, что и для часа.

dayofmonth
Тот же синтаксис, что и у "Hour" выше!
Синтаксис:
[dayofmonth = ...]
Сравнение:
День месяца, возможный интервал значений 1-31
Помимо этого используется тот же способ сравнения, что и для часа.

dayofyear
Тот же синтаксис, что и у "Hour" выше! За дополнительной информацией обратитесь к руководству по PHP, фор­мату строки z функции date().
Синтаксис:
[dayofyear = ...]
Сравнение:
День года, возможный интервал значений 0-364 (или 365 для високосных лет). Учитывая, что условие использует 0 для первого дня, окажется, что [dayofyear = 7] будет верным для  6го Января.
Помимо этого используется тот же способ сравнения, что и для часа.

usergroup
Синтаксис:
[usergroup = group1-uid, group2-uid, ...]
Сравнение:
Сравнение может возвращать истину лишь при не пустом списке групп (глобальная переменная "gr_list").
Значения должны либо существовать в списке групп ИЛИ значение должно быть "*".
Пример:
Соответствует всем авторизациям:
[usergroup = *]

Это значение соответствует регистрации пользователей из групп с uid 1 и/или 2:
[usergroup = 1,2]

loginUser
Синтаксис:
[loginUser = fe_users-uid, fe_users-uid, ...]
Сравнение:
Соответствует uid авторизованного fe_user. Работает также, как "usergroup" выше, включая знак звездочки * для выбора ЛЮБОГО пользователя.
Пример:
Соответствует любой авторизации (вместо “[usergroup = *]” для соответствия авторизации пользователя!):
[loginUser = *]

Кроме того, возможно проверить, авторизованы ли внешние пользователи вообще.
Пример:
Соответствует, если нет авторизованных пользователей:
[loginUser = ]
page
Синтаксис:
[page|field = value]
Сравнение:
Это условие проверяет значения текущей записи страницы. Хотя то же самое можно сделать при помощи условий TSFE:[field] во внешнем интерфейсе, это условие остается верным и во внешнем, и во внутреннем интерфейсах.
Пример:
Условие верно, если поле layout установлено на 1:
[page|layout = 1]

treeLevel
Синтаксис:
[treeLevel = levelnumber, levelnumber, ...]
Сравнение:
Проверка наличия последнего элемента корневой линии на одном из соответствующих уровней. Уровень = 0 – "корень" сайта. Уровень = 1 — эле­мент меню первого уровня.
Пример:
Так можно поменять что-либо в шаблоне, если просматриваемая страница находится либо на 0 уровне (основном), либо на 2 уровне.
[treeLevel = 0,2]

PIDinRootline
Синтаксис:
[PIDinRootline = pages-uid, pages-uid, ...]
Сравнение:
Проверка нахождения PID (uid страниц) на соответствующем уровне корневой линии.
Пример:
Так можно поменять что-либо в шаблоне, если в корневой линии просматриваемой страницы имеются страницы 34 или 36.
[PIDinRootline = 34,36]

PIDupinRootline
Синтаксис:
[PIDupinRootline = pages-uid, pages-uid, ...]
Сравнение:
Делает тоже, что и PIDinRootline, за исключением того, что uid текущей страницы исключается из проверки.

compatVersion
Синтаксис:
[compatVersion = x.y.z]
Сравнение:
Условие соответствия версии. Эта версия не обязательно эквивалентна версии TYPO3, это значение из настроек, и оно может быть изменено из Инструмента установки (Install Tool).
“compatVersion” особенно полезно, если нужно предоставить новый параметр настроек по умолчанию, и оставить обратную совместимость со старой версией TYPO3.

globalVar
Синтаксис:
[globalVar = var1 = value1, var2 > value2, var3 < value3, var4 <= value4, var5 >= value5, var6 != value6, ...]
Сравнение:
Цифры с плавающей запятой, сравниваются с глобальными переменными "var1". "var1", "var2" ... выше. 
Можно разделять несколько значений в одном условии при помощи запятой. Запятая связывает условия в виде логического сложения (ИЛИ), то есть все условие будет верным, если хотя бы один из операндов верен.
Оператор:
Функция:
=
Строгое соответствие
>
Переменная должна быть больше значения
<
Переменная должна быть меньше значения
<=
Переменная должна быть меньше или равна значению
>=
Переменная должна быть больше или равна значению
!=
Переменная не должна равняться значению
Примеры:
Соответствует ли url, подобному "...&print=1":
[globalVar = GP:print > 0]

Выполняется, если id страницы выше или равно 10:
[globalVar = TSFE:id >= 10] 

Выполняется, если id страницы не равно 316:
[globalVar = TSFE:id != 316] 

Выполняется при отсутствии GPvar style:
[globalVar = GP:style = ]

Выполняется, если переменная GET/POST "L" равна 8 или переменная GET/POST "M" равна 2, либо все вместе:
[globalVar = GP:L = 8, GP:M = 2]

Соответствует страницам, с полем Шаблон, установленным на "Layout 1":
[globalVar = TSFE:page|layout = 1]

Если переменная {$constant_to_turnSomethingOn} равна “1”, то условие выполняется:
[globalVar = LIT:1 = {$constant_to_turnSomethingOn}]

globalString
Синтаксис:
[globalString =   var1=value,  var2= *value2, var3= *value3*, ...]
Сравнение:
Прямое сравнение с глобальными строками.
Возможно добавление в значение знака звездочки "*" в качестве подстановки или регулярного выражения в стиле PCRE (должно быть заключено в "/").
Примеры:
Соответствие HTTP_HOST "www.typo3.com":
[globalString = IENV:HTTP_HOST = www.typo3.com]

Соответствие будет и при этом выражении:
[globalString = IENV:HTTP_HOST = *typo3.com]

...но при этом соответствие HTTP_HOST  будет и при этом значении: "demo.typo3.com".
ВАЖНО ЗАМЕЧАНИЕ ПО globalVar и globalString:
Можно использовать значения из глобальных массивов и объектов, разделяя названия переменных знаком "|" (верти­кальная черта). 
Примеры:
глобальные переменные $HTTP_POST_VARS["key"]["levels"] можно запросить так "HTTP_POST_VARS|key|levels"
Также помните, что рекомендуется программировать свои сценарии в соответствие с настройками php.ini-оптимиза­ции. Просмотрите этот файл (из своего дистрибутива).
Это значит, что нужно получать значения, типа HTTP_HOST через getenv(), возможно сделать запрос GET/POST значе­ний через t3lib_div::GP(). И наконец, полезны многие значения из объекта TSFE. Чтобы получить эти значения для соответствия условиям в “globalVar” и “globalString”, используйте префикс в названии переменных - "IENV"/“ENV:” , “GP:”,  “TSFE:” или “LIT:”, соответственно. Для разделения ключей в массивах и/или объектах может использоваться разделитель “|”. “LIT” означает “literal”, а строка после “:” обрезается и возвращается в качестве значениями (без раз­делителя “|” и чего-бы то ни было)
Примечание: использование префикса "IENV:" крайне рекомендуется для получения переменных сервера/окруже­ния, зависимых от системы. В основном значение будет возвращено через вызов функции t3lib_div::getIndpEnv(). Че­рез "ENV:" будет получен прямой вывод из getenv(), который НЕ всегда одинаковый на разных системах!
Примеры:
Соответствие начала адреса удаленного компьютера "192.168."
[globalString = IENV:REMOTE_ADDR = 192.168.*]

Соответствие имени пользователя значению "test":
[globalString = TSFE:fe_user|user|username = test]

userFunc
Синтаксис:
[userFunc = user_match(checkLocalIP)]
Сравнение:
Вызывается функция “user_match” с первым параметром “checkLocalIP”. Вы сами пишите эту функцию, Вы же решаете, что она проверяет. Результат функции должен быть истина/ложь.
Пример:
Вставьте эту функцию в свой файл localconf.php:

function user_match($cmd) {
	switch($cmd) {
		case 'checkLocalIP':
			if (strstr(getenv('REMOTE_ADDR'), '192.168')) {
				return TRUE;
			}
		break;
		case 'checkSomethingElse':
			// ....
		break;
	}
}

Условия будут выполнены, если адрес удаленного компьютера содержит “192.168” - это и выясняет функция.
[userFunc = user_match(checkLocalIP)]

Функции
stdWrap
Эта функция зачастую добавляется в качестве свойств к значениям в TypoScript. 
Пример с объектом содержимого "HTML"::
10 = HTML
10.value = текст
10.value.case = upper
Здесь значение объекта "10" перед выводом переводится в верхний регистр.
Свойства stdWrap применяются в порядке их следования в приведенной ниже таблице. Если нужны дополнительные сведения, обратитесь к typo3/sysext/cms/tslib/class.tslib_content.php, где можно найти функцию stdWrap() и массив $stdWrapOrder, в котором и представлен точный порядок выполнения.
Свойства stdWrap относящиеся к содержимому
Свойства анализируются в порядке их следования в таблице. Свойства "data", "field", "current", "cObject" (в этом по­рядке!) — особенные, так как они используются для импорта содержимого из переменных или массивов. Приве­денный выше пример может быть переписан так:
10 = HTML
10.value = текст
10.value.case = upper
10.value.field = header

При этом строка "10.value = текст" не используется, потому что вместо нее значение "импортируется" из поля под на­званием "header" из $cObj->массива данных.
Свойство:
Тип данных:
Описание:
По умолчанию:
Получение данных:
setContentToCurrent
boolean
Устанавливает текущее значение, как входящее значение для функ­ции.

setCurrent
string /stdWrap
Установка "текущего" значения. Обычно устанавливается из какой-либо внешней подпрограммы, так что будьте внимательны. Но это-то и удобно с другой стороны.

lang
Массив языковых ключей
Используется для определения определенных значений для языков. 
Если ключ для глобального языка установлен через свойство -> config, то .language, имеется в этом массиве, и используется его значение, вместо определенного по умолчанию входного значения в stdWrap.

Пример:
config.language = de
page.10 = TEXT
page.10.value = I am a Berliner!
page.10.lang.de = Ich bin ein Berliner!

Будет выведено значение "Ich bin..." вместо"I am..."

data
getText


field
название поля
Устанавливает значение содержимого $cObj->data[field]

Пример: установить для содержимого значение поля "title": ".field = title"
$cObj->изменение данных. Смотри описание для типа данных "getText"/field!

Замечание: возможно разделять названия полей знаком “//”. Скажем, вы установили в качестве значения “nav_title // title”, при этом будет возвращено значение поля nav_title, если оно не пустое, при возвращении значения поля title.

current
boolean
Установка "текущего" значения для содержимого (смотрите ->split).

cObject
cObject
Загрузка содержимого из объекта-содержимого.

numRows
->numRows
Возвращает число строк из выборки.

filelist
dir /stdWrap
Читает директорию и возвращает список файлов.
Значение разделяется знаком "|" на параметры:
1: Путь
2: Список расширений через запятую (без пробелов); если пуст, то используются все расширения.
3: сортировка: name, size, ext, date, mdate (дата изменения)
4: обратный порядок: устанавливается через "r"
5: fullpath_flag: при установке, список файлов возвращается с пол­ным путем, а не просто как названия файлов

preUserFunc
Название функции
Вызов PHP-функции или метода в классе для анализа текущего со­держимого, передаваемого в перовом параметре, а свойства передаются как второй параметр.
Смотрите .postUserFuncCalling.

Переназначение / условия:
override
string /stdWrap
Если "override" возвращает что-либо кроме "" или нуля (урезается), то в содержимое загружается ее результат! 

preIfEmptyListNum
(то же, что и "listNum" ниже)
(то же, что и "listNum" ниже)

ifEmpty
string /stdWrap
Если к этому моменту содержимое пусто (урезается), загружается содержимое из "ifEmpty". Нули рассматриваются как пустые значе­ния!

ifBlank
string /stdWrap
То же, что и "ifEmpty", но делается проверка через strlen().

listNum
int
+calc 
+"last"
Разбивает содержимое по "," (запятой), а содержимое устанавливается в item[value]. 

Специальный ключ: "last" — последний элемент массива!

.splitChar (строка):
Определяется строка, использующаяся в качестве разделителя. Если splitChar  - целое число, используется знак с этим кодом (например "10" в качестве разделителя строк...).
По умолчанию: “," (запятая)
.stdWrap (свойства stdWrap):
stdWrap свойства для listNum...

Примеры:
Имеются значение "item 1, item 2, item 3, item 4":
При этом будет возвращено значение "item 3":
.listNum = last - 1

trim

PHP-функция trim(); удаляет пустое место вокруг значения.

stdWrap
->stdWrap
Рекурсивный вызов функции stdWrap.

required
boolean
Этот флагозначает, что требуется установка какого-либо значе­ния для содержимого после любого производимого импорта или об­работки содержимого (data, field, current, listNum, trim). Ноль НЕ расценивается как пустое значение! Вместо этого используйте "if"!
Для пустого содержимого, сразу же возвращается "".

if
->if
Если объект if возвращает ложь, stdWrap сразу же возвращает "".

fieldRequired
название поля
Для этого поля ТРЕБУЕТСЯ значение.

Обработка данных:
csConv
string
Преобразование кодировки символов строки из заданной в каче­стве значения кодировки, в кодировку вывода для внешнего интер­фейса (renderCharset).

parseFunc
object path reference / ->parseFunc
Инструкция обработки содержимого. 
Примечание: при вводе в качестве значения строки, она будет ис­пользована как ссылка на путь объекта глобально в дереве объек­тов TypoScript. Это будет основной настройкой для parseFunc объединенной с любыми свойствами, которые вы здесь добавите. Это работает точно так же, как ссылки для элементов содержимого.

Пример:
parseFunc = < lib.parseFunc_RTE
parseFunc.tags.myTag = TEXT
parseFunc.tags.myTag.value = This will be inserted when &lt;myTag&gt; is found!

HTMLparser
boolean / ->HTMLparser
Этот объект позволяет обрабатывать HTML-содержимое и по всяко­му фильтровать содержимое.
Свойства и нужное значение те же, что и в ->HTMLparser.
(Смотрите параметры для ->HTMLparser в "Core API").

split
->split


prioriCalc
boolean
Вычисление значения, используя операторы -+*/%^ плюс под­держка приоритета операторов + и – и уровней скобок ().
. (точка) десятичный разделитель.
Возвращает значение double.
Если .prioriCalc установлен на “intval” возвращается целое число.
Проверка ошибок, деления на ноль и других неверных значений не проводится. Используйте правильный синтаксис, так как в дальней­шем функция может быть расширена поддержкой дополнительных операторов и особенностей.

Примеры:
100%7 = 2
-5*-4 = 20
+6^2 = 36
6 ^(1+1) = 36
-5*-4+6^2-100%7 = 54 
-5 * (-4+6) ^ 2 - 100%7 = 98
-5 * ((-4+6) ^ 2) - 100%7 = -22

char
int
Значение содержимого устанавливается в chr(value).
PHP: $content = chr(intval($conf['char']);

intval
boolean
PHP функция intval(); возвращает целое число.
PHP: $content = intval($content);

numberFormat
->numberFormat
Формат значения с плавающей запятой для любого количества символов (полезно, например, для цен).

date
date-conf
Содержимое должно быть типа "UNIX-time". Возвращаемое значе­ние содержимого форматируется как дата.
$content=Date($conf["date"], $content);

Пример в котором импортируется timestamp:
.value.field = tstamp
.value.date = 

strftime
strftime-conf
То же, что и "date" выше. Смотрите код или тип данных "strftime-conf" в руководстве по PHP (strftime).
Это форматирование полезно, если региональные установки сдела­ны заранее в объекте CONFIG. Ищите здесь.

Свойства:
.charset  : возможно установить кодировки выводимой строки, если ее нужно преобразовать через renderCharset. По умолчанию разумно предположить кодировку из t3lib_cs.

age
boolean or string
При включении через "1" (целое число) содержимое будет видно как дата (UNIX-time) и разница во времени в содержимом и настоя­щем времени возвращается в одном из восьми вариантов:
"xx min", "xx hrs", "xx days", "xx yrs", "xx min", "xx hour", "xx day" или "year".
Переход на использование следующего шаблона - 60 ми­нут, 24 часа, 365 дней.

ЗАМЕЧАНИЕ: 
Если установить это свойство не как целое число, то оно должно использовать формат восьми частей. Первые четыре значения для множественного числа, оставшиеся — для единственного. Строка по умол­чанию: 
" min| hrs| days| yrs| min| hour| day| year"

Установите другую строку, если нужно изменить единицы. Возмож­но включить символы ". Они в любом случае будут удалены, но при этом пробелы между числом и единицами сохраняются.

Пример:
lib.ageFormat = TEXT
lib.ageFormat.data = page:tstamp
lib.ageFormat.age = " Minuten | Stunden | Tage | Jahre | Minute | Stunde | Tag | Jahr"

case
case
Преобразование регистра

Для этой операции используется "renderCharset".

bytes
boolean
Форматирование вводимого (целого числа) в виде байтов: bytes, kb, mb

Добавив значения для свойства “labels”, можно использовать отли­чающиеся от принятых по умолчанию суффиксы. Метки для байт, кило-, мега- и гига- разделяются вертикальной чертой (|) и могут быть заключены в кавычки "". Например: " | K| M| G" (значение по умолчанию).
Полное написание:

bytes.labels = “ | K| M| G”

substring
[p1],  [p2]
Возвращает подстроку с [p1] и [p2] посылаемыми как второй и тре­тий параметры в функцию PHP substring.

Для этой операции используется "renderCharset".

removeBadHTML
boolean
Удаляется "плохой" HTML код, считающийся опасным для ошибок XSS, на основе шаблона, отфильтровываю­щего HTML.

cropHTML

Обрезает содержимое до нужной длины. В отличие от stdWrap.crop, оставляет теги HTML. Не обрезает по содержимому внутри тегов и закрывает открытые теги. Объекты (вроде ">") считаются одним символом. Смотрите ниже stdWrap.crop относительно синтаксиса и примеров.

Обратите внимание, что stdWrap.crop не должно использоваться, если  уже применялось stdWrap.cropHTML.

stripHtml
boolean
Очищает все html-теги.

crop

Обрезает содержимое до нужной длины.
Синтаксис: +/- (знаков) = слева / справа | [строка] | [булева пере­менная: сохранять целые слова]

Примеры:  
20 | ...    => максимум 20 знаков. Если больше, значение будет обрезано до первых 20 знаков с добавлением "..."
-20 | ... => максимум 20 знаков. Если больше, значение будет об­резано до последних 20 знаков с добавлением "..."
20 | ... | 1 => максимум 20 знаков. Если больше, значение будет обрезано до последних 20 знаков с добавлением "…". Если образ­ка приходится на середину слова, удаляется все слово.

Для этой операции используется "renderCharset".

rawUrlEncode
boolean
Пропуск содержимого через PHP функцию rawurlencode().

htmlSpecialChars
boolean
Пропуск содержимого через PHP функцию htmlspecialchars().
Дополнительное свойство “.preserveEntities” сохраняет все знача­щие символы.

doubleBrTag
string
Заменяет все символы двойного перевода строки на данное значе­ние.

br
boolean
PHP функция nl2br(); преобразует концы строк в теги <br />.

brTag
string
Все коды ASCII "10" (CR) заменяются на данное значение.

encapsLines
->encapsLines
Позволяет разбить содержимое по chr(10) и независимо обработать каждую строку. Использует формат содержимого, сделанного в RTE.

keywords
boolean
Разделяет содержимое по знакам "," ";" и chr(10) (разрыв строки), обрезая каждое значение и возвращает список значений через за­пятую.

innerWrap
wrap /stdWrap
"Обертка" содержимого

innerWrap2
wrap /stdWrap
То же, что .innerWrap (но смотрите порядок их выполнения)

fontTag
wrap


addParams
->addParams
Позволяет добавить параметры тега к содержимому, если содержи­мое является тегом!

textStyle
->textStyle
Заключает содержимое в теги font.

tableStyle
->tableStyle
Заключает содержимое в теги table.

filelink
->filelink
Используется для создания списков ссылок на файлы.

preCObject
cObject
cObject предваряющий содержимое. 

postCObject
cObject
Cobject добавляемый к содержимому.

wrapAlign
align /stdWrap
Заключает содержимое в теги <div style=text-align:[value];”> | </div>, если установлено выравнивание (align).

typolink
->typolink
Заключает содержимое в тег-ссылку.

TCAselectItem
Массив свойств
Преобразование списка значений через запятую в представление элемен­тов в TCA.

.table (string): просматриваемая таблица
.field (string): поле для вставки
.delimiter (string): разделитель для объединения нескольких эле­ментов.

Примечание: на данный момент это работает лишь с полями TCA типа “select”, не участвующих в связях базы данных.

spaceBefore
int /stdWrap
Отступ в пикселях до. При помощи clear-gif;  <img ...><BR>

spaceAfter
int /stdWrap
Отступ в пикселях после. При помощи clear-gif;  <img ...><BR>

space
space /stdWrap
[пробел до]   |   [пробел после]

Дополнительное свойство:
.useDiv = 1
При установке, clear gif не используется вместо тега <div> с атри­бутом style с настройками для высоты. (относится и к spaceBefore и spaceAfter.

wrap
wrap /+.splitChar
.splitChar определяет альтернативный символ-разделитель (по умолчанию “|” - вертикальная черта)

noTrimWrap
"special" wrap
Значение заключается между val1 и val2, в приведенном примере — включая пробелы! Без обрезки значения. Помните, что этот тип "обертки" требует символов "|" в конце и начале.

Пример:
| val1 | val2 |

wrap2
wrap /+.splitChar
То же, что и .wrap (смотрите порядок их применения)

dataWrap

Содержимое раздела {…} анализируется и в содержимое {…} типа getText подставляется результат getText.

Пример:
В результате, содержимое помещается в тег с атрибутом, содержащим номер текущей страницы:
<div id="{tsfe : id}"> | </div>

prepend
cObject
cObject предваряющий содержимое (перед).

append
cObject
cObject добавляемый к содержимому (после).

wrap3
wrap /+.splitChar
То же, что и .wrap (смотрите порядок их применения).

outerWrap
wrap /stdWrap
Обертка для всего содержимого.

insertData
boolean
При установке, строка содержимого анализируется наподобие .dataWrap выше.

Пример:
Отображение заголовка страницы:
10 = TEXT
10.value = This is the page title: {page:title}
10.insertData = 1

offsetWrap
x,y
Входное значение заключается в таблицу с колонкой слева и свер­ху, при этом содержимое смещается на значения x,y. В основе ле­жит cObject OTABLE.

.tableParams / .tdParams /stdWrap
- используется для управления смещением tableParams/tdParams (по умолчанию width=99%) . По умолчанию: смотрите OTABLE.

.stdWrap
- stdWrap  свойства для обертки результата offsetWrap.

postUserFunc
название функции
Вызов PHP функции или метода в классе для анализа текущего со­держимого, передаваемого в  первом параметре, а любые свойства передаются  в виде второго параметра. За дополнительной информацией обратитесь к описа­нию cObject USER.

Пример:
Можно вставить этот пример непосредственно в новую запись ша­блона.

page = PAGE
page.typeNum=0
includeLibs.something = media/scripts/example_callfunction.php

page.10 = TEXT
page.10 {
  value = Hello World
  postUserFunc = user_reverseString
  postUserFunc.uppercase = 1
}

page.20 = TEXT
page.20 {
  value = Hello World
  postUserFunc = user_various->reverseString
  postUserFunc.uppercase = 1
  postUserFunc.typolink = 11
}

postUserFuncInt
название функции
Вызов PHP функции или метода в классе для анализа текущего со­держимого, передаваемого в  первом параметре, а любые свойства передаются  в виде второго параметра. Результат не будет кеширован и выведен вне основного формирования страницы. За дополнительной информацией обрати­тесь к описанию cObject USER_INT и PHP_SCRIPT_INT.
Предоставлено Jens Ellerbrock

prefixComment
string
Предваряет содержимое HTML  комментарием из второй части вве­денной строки (разделяется символом "|"), первая часть — количе­ство табуляций перед комментарием на новой строке.
Содержимое анализируется посредством insertData.

Пример:
prefixComment = 2 | CONTENT ELEMENT, uid:{field:uid}/{field:CType}

Отступ для комментария будет в одну табуляцию (а для следующей строки на 2+1 табуляции)
(добавлено в TYPO3 >3.6.0RC1)

editIcons
string
Если не пустое, то вставляется значок, связанный с typo3/alt_doc.php с параметрами для вставки формы редактирова­ния некоторых полей для внутреннего пользователя.
Значение этого свойства — список редактируемых полей из табли­цы. Предполагается, что текущая запись — это запись редактируе­мого объекта cObj.
Синтаксис: возможно название таблицы : список полей через запятую[список названий полей формы, разделенных символом | ]

.beforeLastTag (1,0,-1): если (1), значок будет вставлен перед по­следним тегом HTML в содержимом. Если -1, значок будет предва­рять содержимое. Если ноль (0), значок добавляется в конец содер­жимого.

.styleAttribute (строка): добавляет атрибуты style к изображению значка. Например, можно указать “position:absolute”, если нужна неразрушающая вставка значка. Примечание: для общей стилиза­ции, все значки редактирования имеют класс “frontEndEditIcons”, который можно использовать в таблице стилей для сайта.

.iconTitle (строка): атрибут title тега image.

.iconImg (HTML): альтернативный HTML код, используемый вместо отображаемого по умолчанию значка. Возможно использовать для установки другого значка для редактирования (например — крас­ная точка или что-то еще... :-)

Пример:
вставляется значок редактирования, связанный с формой, в кото­рой отображаются и редактируются заголовок и основной текст (если у пользователя имеется доступ!).
editIcons = tt_content : header, bodytext

так можно вставить поля header_align и date в "форму", это значит, что они отобразятся на одной строке, ниже поля header. Что сохра­нить немного места.

editIcons = header[header_align|date], bodytext


editPanel
boolean / editPanel
Смотрите cObject EDITPANEL.

debug
boolean
Выводит содержимое с HTMLSpecialChars() и <PRE></PRE>: полез­но для отладки, для просмотра реальных значений stdWrap при разработке сайта, используя TypoScript. 
Должно использоваться только для разработки.

debugFunc
boolean
Выводит содержимое непосредственно в браузер, используя функ­цию debug().
Должно использоваться только для разработки.
Установка значения “2” приведет к выводу содержимого в таблицу, что лучше выглядит.

debugData
boolean
Вывод текущего массива данных, $cObj->data, непосредственно в браузер. Так получает данные ".field".
Должно использоваться только для разработки. 

[tsref:->stdWrap]

imgResource
imgResource содержит свойства, используемые с типом данных imgResource.
Пример:
Масштабирование изображения toplogo.gif до ширины 200 пикселей.
file = toplogo.gif
file.width = 200

Свойство:
Тип данных:
Описание:
По умолчанию:
ext
imageExtension /stdWrap

web
width
pixels /stdWrap
Если установлены и ширина, и высота, а к одному из значений добав­лено "m", будут соблюдены пропорции при масштабировании, ввиду чего будет использовано максимальное значение для ширина/вы­соты изображения. Т.е. изображение будет вписано в прямоугольник с раз­мерами ширины/высоты.

Если установлены и ширина, и высота, а к одному из значений добав­лено "c", будет произведено масштабирование с подрезкой. Это значит, что будут соблюдены пропорции, а изображение будет масшта­бировано до прямоугольника с размерами ширины/высоты. После чего изображе­ние центрируется и выступающие за рамку масштабирования части изображения обрезаются.
Параметр "c" может иметь добавочное процентное значение (-100 ... +100), означающее смещение рамки обрезки от центра к краю.

Помните, что можно использовать что-то одно, “m” или “c”!

Примеры:
Масштабирование и обрезка от центра изображения до 120x80 пикс.:
.width = 120c
.height = 80c

Обрезка до 100x100 пикс.; для альбомного изображения — слева, а для портретного — с центра:
.width = 100c-100
.height = 100c

Обрезка до 100x100 пикс.; для альбомного изображения — немного правее, а для портретного — немного выше центра:
.width = 100c+30
.height = 100c-25

height
pixels /stdWrap
Смотрите ".width"

params
string
IКомандная строка ImageMagick:
fx. "-rotate 90" или "-negate"

sample
boolean
Если имеется, для масштабирования изображения используется -sample, вместо -geometry. Sample не использует сглаживание, и поэто­му работает значительно быстрее.

noScale
boolean /stdWrap
Если установлено, само изображение никогда не будет масштабировано. Вычисляется лишь ширина или высота, в соответствие с другими свойствами, таким образом изображение отображается с измененными размерами, но используется оригинальный файл. Можно использовать для создания PDF или печати страниц, когда оригинальный файл имеет гораздо лучшее качество, чем масштабированный.

Пример:
// test.jpg could e.g. have 1600 x 1200 pixels
file = test.jpg
file.width = 240m
file.height = 240m
file.noScale = 1
Результатом будет следующий тег image. Обратите внимание, что в src="test.jpg" используется оригинальный файл:
<img src="test.jpg" width="240" height="180" />
0
alternativeTempPath
string
Альтернативный путь для хранения временных изображений. Должен входить в список TYPO3_CONF_VARS[FE][allowedTempPaths]

frame
int
Выбор фрейма в анимированном gif или страницы в pdf файлах. 
"" = первый фрейм (ноль)

import
path /stdWrap
Значение должно быть установлено в путь файла,
используя stdWrap название файла можно получить из массива данных.

Пример:
Это вернет первое изображение в поле "image" из массива данных:
.import = uploads/pics/
.import.field = image
.import.listNum = 0

maxW
pixels /stdWrap
Максимальная ширина.

maxH
pixels /stdWrap
Максимальная высота.

minW
pixels /stdWrap
Минимальная ширина (переназначает maxW/maxH).

minH
pixels /stdWrap
Минимальная высота ( переназначает maxW/maxH).

stripProfile
boolean
Если установлено, команда IM будет использовать команду stripProfile, сжимающую формируемые эскизы. За деталями обратитесь к Install Tool. 
Если установлено im_useStripProfileByDefault в install tool, можно отключить это, установив stripProfile=0.

Пример:
10 = IMAGE
10.file = fileadmin/images/image1.jpg
10.file.stripProfile = 1

Маскирование:
(черное скрывается, белое показывается)
m.mask
imgResource
Маскирование, при котором маскируется "m.bgImg". "m.mask" и "m.bgImg" масштабируются до размера изображения imgResource!
ЗАМЕЧАНИЕ: "m.mask" и "m.bgImg" должны быть изображениями.

m.bgImg
imgResource
ЗАМЕЧАНИЕ: "m.mask" и "m.bgImg" должны быть изображениями.

m.bottomImg
imgResource
Изображение "m.bgImg" маскируется посредством "m.bottomImg_mask", перед тем, как imgResources маскируется посредством "m.mask". 
"m.bottomImg" и "m.bottomImg_mask" масштабируются до размера изображения imgResource!
Это чаще всего используется для создания подложки для imgResource.
ЗАМЕЧАНИЕ: "m.bottomImg" и "m.bottomImg_mask" должны быть изображениями.

m.bottomImg_mask
imgResource
(дополнительно)
ЗАМЕЧАНИЕ: "m.bottomImg" и "m.bottomImg_mask" должны быть изображениями.

[tsref:->imgResource]
imageLinkWrap
Этот объект заключает входящее (изображение) в ссылку, подготовленную для вызова сценария eID "tx_cms_showpic" с параметрами, определяющими размер изображения, цвет фона нового окна и т.п.
Формируются md5-хеш параметры. Хеш также формируется и в сценарии "tx_cms_showpic", и они ДОЛЖНЫ совпадать для  по­казываемых изображений. Это служит защитой от изменения параметров url пользователем.
Начиная с TYPO3 4.5 стало возможным отображать изображение во всплывающем окне, вместо использования showpic.php. С краткой инструкцией можно ознакомиться в свойстве "linkParams" ниже.

Свойство:
Тип данных:
Описание:
По умолчанию:
file
stdWrap
Переназначение пути отображаемого изображения.

width
int (1-1000) /stdWrap
Добавление "m" к ширине или высоте, приведет к соблюдению пропорций, а width/height сработают для большего из измерений

height
int (1-1000) /stdWrap
смотрите".width"

effects
Смотрите эффекты GIFBUILDER / . (из библиотеки stdgraphics) 
/stdWrap
Пример:
gamma=1.3 | sharpen=80 | solarize=70

sample
boolean /stdWrap
Если имеется, для масштабирования изображения используется -sample, вместо -geometry. Sample не использует сглаживание, и поэтому работает значительно быстрее.

alternativeTempPath
path /stdWrap
Альтернативный путь для хранения временных изображений. Должен входить в список $TYPO3_CONF_VARS['FE']['allowedTempPaths'].

title
string /stdWrap
Заголовок нового окна (HTML).

bodyTag
<tag> /stdWrap
тег body нового окна

wrap
wrap /stdWrap
Обертка изображения, выводящаяся между тегами body

target
<A>-data:target /stdWrap
ЗАМЕЧАНИЕ:  только если установлено ".JSwindow"

JSwindow
boolean /stdWrap
Если установлено "1", изображение будет открыто в новом окне, соответствущем по размерам изображению!
Здесь можно использовать stdWrap.

JSwindow.expand
x,y /stdWrap
x и y добавляется к размерам окна.

JSwindow.newWindow
boolean /stdWrap
Каждая картинка будет открываться в новом окне!

JSwindow.altUrl
string /stdWrap
Если что-либо будет возвращено, URL, показываемый в JS-окне, будет НЕ из tx_cms_showpic, а введенный здесь!

JSwindow.altUrl_noDefaultParams
boolean
Если включено, параметры изображения не добав­ляются к altUrl автоматически. Полезно, если нужно создать их через пользова­тельскую функцию.

typolink
->typolink
ЗАМЕЧАНИЕ: если что-либо будет возвращено, то imageLinkWrap будет переписан заданным здесь!!!

directImageLink
boolean /stdWrap
Если включено, то будет возвращена прямая ссылка на сформированный файл изображения (это значит, что showpic.php не будет использоваться).
0
linkParams
->typolink
Возможность управления формированием typolink, если не используется JSwindow.

Пример:
JSwindow = 0
directImageLink = 1
linkParams.ATagParams.dataWrap = class="{$styles.content.imgtext.linkWrap.lightboxCssClass}" rel="{$styles.content.imgtext.linkWrap.lightboxRelAttribute}"

Используя этот параметр, запросто можно включить использование всплывающего окна для отображения полноразмерного изображения во внешнем интерфейсе: нужно лишь интегрировать всплывающее окно, включив для него файлы JS и CSS, и активировать по определенной ссылке (например для ссылок с классом "lightbox").

stdWrap
->stdWrap
Включение stdWrap для изображения.

enable
boolean /stdWrap
Изображение имеет ссылки ТОЛЬКО если это истинно!!!
0
[tsref:->imageLinkWrap]
Пример:
1.imageLinkWrap = 1
1.imageLinkWrap {
	enable = 1
	bodyTag = <BODY bgColor=black>
	wrap = <A href="javascript:close();"> | </A>
	width = 800m
	height = 600

	JSwindow = 1
	JSwindow.newWindow = 1
	JSwindow.expand = 17,20
}
numRows
Этот объект возвращает количество строк.
Свойство:
Тип данных:
Описание:
По умолчанию:
table
Название таблицы


select
->select
Запрос на выборку для операции.

Свойство “selectFields” внутренне переписывается на "count(*)".

[tsref:->numRows]
select
Этот объект формирует запрос SQL-select для выбора записей из базы данных.
Некоторые записи скрыты или ограничены во времени. Они автоматически добавляются к SQL-select при поиске в мас­сиве tables.php (доступные поля).
Кроме того, если используется "pidInList", любая страница в списке pid, не видимая для пользователя сайта УДАЛЯЕТ­СЯ из списка pid. Поэтому записи из скрытых, ограниченных по времени или недоступных страниц не могут быть вы­браны! Также, как и записи из корзин.
Свойство:
Тип данных:
Описание:
По умолчанию:
uidInList
список page_id


pidInList
список page_id /stdWrap

this
recursive
int
Рекурсивные уровни для pidInList
0
orderBy
SQL-orderBy
/stdWrap
Без "order by"! Например "sorting, title"

groupBy
SQL-groupBy
/stdWrap
Без "group by"! Например "CType"

max
int 
+calc
+"total"
Максимальное количество записей

Специальные ключи: "total" заменяются на count(*)

begin
int 
+calc 
+"total"
Начиная с записи под номером значения

Специальные ключи: "total" заменяются на count(*)

where
SQL-where
Без "where"!, Например " (title LIKE '%SOMETHING%' AND NOT doktype) "

andWhere
SQL-where /stdWrap
Без "AND"!, Например "NOT doktype".

languageField
string
Если установлено, это указывает на поле записи, в котором содер­жатся ссылка на запись в таблице sys_language. И, если установле­но, записи, возвращенные функцией выбора будут выбраны только если значение этого поля соответствуют $GLOBALS[“TSFE”]->sys_language_uid (устанавливается через параметр config.sys_language_uid).

selectFields
string
Список полей для выбора, или "count(*)".
Если записи нуждаются в локализации, включите соответствующие поля локализации (uid,pid,languageField,transOrigPointerField). Иначе внутренняя локализация TYPO3 не будет соблюдена.
*
join
leftjoin
rightjoin
string
Введите название таблиц для JOIN , LEFT OUTER JOIN и RIGHT OUTER JOIN соответственно.

markers
Массив маркеров
Определенные в этом разделе маркеры можно использовать обычным образом ###название_маркера### в любых других свойствах для select. Каждое значение очищается (escaped) и заключается в кавычки для предотвращения проблем с инъекциями SQL. Это дает возможность безопасного использования внешних данных (например, полей базы данных, параметров GET/POST) в запросе.

<markername>.value (value)
Прямое задание значения.

<markername>.commaSeparatedList (bool)
Если установлено, то значение расценивается как список значений через запятую. Каждое значение из списка очищается (escaped) и заключается в кавычки.

(свойства stdWrap ...)
Для каждого из названий маркеров можно использовать все свойства stdWrap.

Пример:
page.60 = CONTENT
page.60 {
  table = tt_content
  select {
    pidInList = 73
    where = header != ###whatever###
    orderBy = ###sortfield###
    markers {
      whatever.data = GP:first
      sortfield.value = sor
      sortfield.wrap = |ting
    }
  }
}

[tsref:->select]
split
Этот объект используется для разбиения введенного значения по символам и анализа их определенными функциями.
Для каждой итерации, индекс разбиения начинается с 0 (нуля), сохраняется в ключе регистра SPLIT_COUNT.
Пример:
Это пример кода TypoScript для импорта содержимого поля "bodytext" из $cObj->массива данных (строка 2). Содержимое разбивается по знаку перехода строки (строка 4). Все элементы должны быть обработаны stdWrap (строка 5), в кото­рую импортируется значение элемента (строка 6). Это значение заключается в строку таблицы, в первом столбце ко­торой содержится маркер-gif (строка 7). И наконец все содержимое заключается в соответствующие теги table (строка 9).
1	  20 = TEXT
2	  20.field = bodytext
3	  20.split {
4	    token.char = 10
5	    cObjNum = 1
6	    1.current = 1
7	    1.wrap = <TR><TD valign="top"><IMG src="dot.gif"></TD><TD valign="top"> | </TD></TR>
8	  }
9	  20.wrap = <TABLE border="0" cellpadding="0" cellspacing="3" width="368"> | </TABLE><BR>

Свойство:
Тип данных:
Описание:
По умолчанию:
token
str /stdWrap
Строка или символ (маркер) для разделения значений.

max
int /stdWrap
Максимальное количество частей.

min
int /stdWrap
Минимальное количество частей.

returnKey
int /stdWrap
Вместо анализа, из результата разбиения просто возвращается элемент с соответствующим индексом.

cObjNum
cObjNum
+optionSplit
/stdWrap
Это указатель на массив объекта this ("1,2,3,4"), с элементами разбиения.

1,2,3,4
->CARRAY /stdWrap
Объект, относящийся к значению. 
ЗАМЕЧАНИЕ: значение "current" устанавливается в значение текущего элемента при вызове объекта. Смотрите "stdWrap" / current.

Пример (stdWrap used):
1.current = 1
1.wrap = <B> | </B>

Пример (CARRAY used):
1 {
  10 = TEXT
  10.current = 1
  10.wrap = <B> | </B>
  20 = CLEARGIF
  20.height = 20
}

wrap
wrap 
+optionSplit
/stdWrap
Определение обертки для каждого элемента.

[tsref:->split]
if
Эта функция возвращает истину, если соблюдены ВСЕ присутствующие условия (они объединяются оператором И). Если хотя бы одно условие не выполняется, возвращается ложь. 
Возвращаемое значение можно обратить, установив свойство ".negate".
Свойство:
Тип данных:
Описание:
По умолчанию:
isTrue
str /stdWrap
Если значение "истинно".... (не пустая строка и не ноль)

isFalse
str /stdWrap
Если значение "ложно"... (пустое или ноль)

isPositive
int /stdWrap
+ calc
Возвращается ложь, если содержимое не позитивно

isGreaterThan
value /stdWrap
Возвращается ложь, если содержимое не больше ".value"

isLessThan
value /stdWrap
Возвращается ложь, если содержимое не меньше ".value"

equals
value /stdWrap
Возвращается ложь, если содержимое не равно ".value"

isInList
value /stdWrap
Возвращается ложь, если содержимое не находится в разделенном за­пятой списке ".value".
Значения в списке ".value" не должны иметь пробелов!!

value
value /stdWrap
"value" (значение для сравнения, упоминаемое выше)

negate
boolean
Обращает ранее возвращенное значение. То есть, если ранее была возвращена истина, то при этом будет возвращена ложь!!

directReturn
boolean
Если это свойство существует, то будет возвращено значение истина/ложь. Можно использовать для установки истины/лжи для констант TypoScript.

[tsref:->if]
Объяснение
Функция "if" возвращает истину / ложь не вполне ясным способом! Будьте внимательны! 
"if" обычно используется для решения, выводить ли объект или возвращать ли значение (смотрите cObjects и stdWrap)
Как она работает:
Функция возвращает истину или ложь. Что она возвращает — определяется свойствами этой функции. Скажем, если установить "isTrue = 1", то результат будет истина. Если установить "isTrue.field = header", функция возвратит истину, если поле "header" в $cObj->data заполнено! 
Для сравнения значений, нужно загрузить базовое значение в свойство ".value". Пример:
.value = 10
.isGreaterThan = 11

При этом будет возвращена истина, так как значение ".isGreaterThan" больше 10, являющегося базовым значением.
Сложнее:
.value = 10
.isGreaterThan = 11
.isTrue.field = header
.negate = 1

Здесь два условия - isGreaterThan и isTrue. Если они оба истинны (И), в общем будет возвращена истина, НО (!) при этом общий результат будет ложь, так как установлен флаг ".negate" обращающий предыдущий результат!
Пример:
Это объект GIFBUILDER пишущий "НОВЫЙ!" на элементе меню, если поле "newUntil" имеет дату, меньше текущей!
...
  30 = TEXT
  30.text = НОВЫЙ!
  30.сме­щение = 10,10
  30.if {
    value.data = date: U
    isLessThan.field = newUntil
    negate = 1
  }
…
typolink
Превращает значение в ссылку.
Если используется из parseFunc, загружается $cObj->массив_параметров с параметрами ссылки (в нижнем регистре)!
Свойство:
Тип данных:
Описание:
По умолчанию:
extTarget
target /stdWrap
Цель для внешней ссылки.
_top
fileTarget
target /stdWrap
Цель для ссылок на файлы.

target
target /stdWrap
Цель для внутренних ссылок.

no_cache
boolean /stdWrap
Добавление параметра "&no_cache=1" к ссылке.

useCacheHash
boolean
Если включено, список additionalParams отбрасывается и преобразуется в хеш-строку, добавляемую к url, вроде “&cHash=ae83fd7s87”. Когда ме­ханизм кеширования замечает это значение, он вычисляет то же значе­ние на сервере, полагаясь на значения в HTTP_GET_VARS, исключая значения id,type,no_cache,ftu,cHash,MP. Если значе­ние cHash соответствует вычисленному, страница может кешироваться на основе этого.
[SYS][encryptionKey] включается в хеш для его уникальности для сервера и не­предсказуемости.

additionalParams
string /stdWrap
Этот параметр добавляется к концу url. Должно быть кодом, готовым для вставки после последнего параметра. 

Пример:
'&print=1'
'&sword_list[]=word1&sword_list[]=word2'

Applications:
Очень полезно при прикреплении к страницам из результата поиска. Ис­комые слова сохраняются в ключе регистра SWORD_PARAMS и могут быть вставлены подобным образом:
.additionalParams.data = register:SWORD_PARAMS

ЗАМЕЧАНИЕ: это работает только для внутренних ссылок!

addQueryString
boolean
К началу ссылки добавляется QUERY_STRING. Помните, что проверки дублирования параметров не проводится! Хотя это не проблема (будет рассмотрен лишь последний параметр с тем же названием), но если этого нужно избежать, включите "config.uniqueLinkVars".

.method: если установлен GET или POST, будут обрабатываться запра­шиваемые аргументы (данные GET или POST). Эти установки полезны, если используется обработка URL в расширениях, вроде Real URL, преобразующие часть пути в очередь аргументов.
Возможно получить сразу и POST, и GET данные, установив "POST,GET" или "GET,POST". Последний метод в этой последовательности имеет приоритет и он перезаписывает части, присутствующие в первом методе.

.exclude: список исключаемых из ссылки параметров запроса (напри­мер L или cHash).

jumpurl
boolean
Говорит, должна ли ссылка вызывать сценарий с параметром jumpurl для регистрации каких-либо переходов в статистике. 
Работает так же, как и "filelink.jumpurl" – за деталями орабтитесь к его описанию.

Пример:

lib.parseFunc_RTE.tags.link {
  typolink.jumpurl = 1
  typolink.jumpurl.secure = 1
  typolink.jumpurl.secure.mimeTypes = pdf=application/pdf, doc=application/msword, png=image/png, gif=image/gif, jpg=image/jpg
}
Такие настройки в шаблоне TS сделают любую ссылку на внутренний файл, вставленную в RTE, безопасной для скачивания файла.
0
wrap
wrap /stdWrap
Обертки для ссылок.

ATagBeforeWrap
boolean
Если включено, ссылка сначала заключается во ".wrap", а затем в тег <A>.

parameter
string /stdWrap
Это основные данные, которые используются для создания ссылки. Это может быть id страницы, URL внешней страницы, адрес e-mail или ссылка на файл на сервере. Кроме того, может даваться дополнительная информация, определяющая цель, класс и заголовок. Ниже приведено несколько примеров с пояснениями.

Примеры:

parameter = 51
Наиболее простой. Будет создана ссылка на страницу.

parameter = 51 _blank specialLink "Very important information"
Полный пример. Ссылка на страницу 51, которая откроется в новом окне. Ссылка будет иметь атрибут class со значением "specialLink" и атрибут title "Very important information". В результате появится следующее:

<a href="?id=51" target="_blank" class="specialLink" title="Very important information">

parameter = http://typo3.org/ - specialLink
Внешняя ссылка с атрибутом class. Обратите внимание на дефис (-), заменяющий второй параметр (цель). Это дает возможность определения класса (class — третий параметр), не определяя цели.

parameter = info@typo3.org - - "Send a mail to main TYPO3 contact"
Создание ссылки mailto с атрибутом title (но без цели и класса).

Как видно из примеров, каждая значимая часть параметров отделяется пробелом. Сами значения, содержащие пробелы, должны быть помещены в двойные кавычки. Каждое из значений подробно описывается далее.

Цель
Первым параметром определяется цель для ссылки. Если присутствует знак @, то значение расценивается как адрес email и будет создана ссылка mailto. Если значение содержит точку (.) перед первым слешем (/), или двойной слеш (//), или внутри находится схема (вроде http), ссылка расценивается как внешняя. Если же имеется слеш, но без точки перед ним, это будет расценено как путь к файлу, и ссылка будет установлена на него (даже если он не существует, это может быть расценено, как понятный URL). В других случаях подразумевается, что значение либо id страницы, либо ее псевдоним и создается ссылка на эту страницу, если она существует.

В случае ссылки на страницу, значение может быть более сложным, чем просто номер или псевдоним. Может быть три "значения", разделенные запятой. Пример:

typolink.parameter = 51,100,&test=1 - - "RSS Feed"

Первое значение — это id страницы, второе — ее тип, третье переназначает свойство "additionalParams". Также возможно определить section переназначающее свойство section. Если меткой section является целое число, оно расценивается как указание на запись в tt_content. Если нет, то используется как есть. Если имеется только метка в section, создается ссылка на текущую страницу. Примеры:

typolink.parameter = 51#345
Создается ссылка на страницу 51 с якорем на элемент tt_content с номером 345

typolink.parameter = #top
Создается ссылка на текущую страницу, с якорем "top".

Также возможно настроить typolink на использование своей функции ("обработчика ссылок") для построения ссылки. Детально это описано после этой таблицы.

Цель или настройка всплывающего окна
Обычно цели определяются описанными выше свойствами (extTarget, fileTarget и target), но возможно переназначить их прямым указанием в свойстве parameter. Для пропуска какого-либо значения, если нужно определить, например, третье или четвертое свойства без определения цели (как в приведенном выше примере), можно использовать дефис (-).
Вместо цели, второй параметр можно использовать для определения параметров всплывающего окна JavaScript, в котором будет открыта ссылка (используя window.open). Можно определить ширину и высоту окна, также как и дополнительные параметры, передаваемые в функцию JavaScript. Также смотрите свойство "JSwindow". Примеры:

typolink.parameter = 51 400x300
Страница 51 будет открыта во всплывающем окне с размерами 400 на 300 пикселей.

typolink.parameter = 51 400x300:resizable=0,location=1
То же, что и выше, но размер окна не меняется и не будет показана область с адресом.

Class
Третье значение можно использовать для определения названия класса для тега link. Этот класс вставляется в тег перед любыми другими значениями из свойства "AtagParams". Остерегайтесь конфликта атрибутов класса. Возможно применять дефис (-) для пропуска определения этого значения, для определения четвертого свойства (смотрите приведенный пример).

Title
Обычно атрибут title для ссылки link определяется через свойство "title" или даже через свойство "AtagParams". Но можно и установить четвертый параметр здесь, имеющий преимущество над остальными сделанными установками. Обратите внимание, что title должен быть заключен в двойные кавычки ("), если в нем имеются пробелы.

ЗАМЕЧАНИЕ: при использовании из parseFunc, значения не нужно явно определять, а нужно импортировать через:

typolink.parameter.data = parameters : allParams

forceAbsoluteUrl
boolean
Принудительная установка абсолютных ссылок на внутренние страницы, таким образом соблюдается схема URL с добавлением названия домена.

Дополнительное свойство:
.scheme: определение используемой схемы URL (https или http). По умолча­нию используется http.


Пример:
typolink {
  parameter = 13
  forceAbsoluteUrl = 1
  forceAbsoluteUrl.scheme = https
}

0
title
string /stdWrap
Установка параметра заголовка для тега A.

JSwindow_params
string
Предустановка значений для открытия окна. Это пример списка с почти всеми возможными атрибутами:
status=1,menubar=1,scrollbars=1,resizable=1,location=1,directories=1,toolbar=1

returnLast
string
Если установлено "url", то будет возвращен URL ссылки ($this->lastTypoLinkUrl).
Если установлено "target", будет возвращена цель для ссылки.
В этих двух случаях вы не получите значение в "обертке", а непосред­ственно значения url или цели!

section
string /stdWrap
Если это значение присутствует, то к любой внутренней ссылке добав­ляется "#".
Это полезно для создания ссылок с одной страницы непосредственно к какой-либо части другой страницы.

ATagParams
параметры <A> /stdWrap
Дополнительные параметры

Пример:
class=”board”

linkAccessRestrictedPages
boolean
Если установлено, то typolink-и, указывающие на ограниченные в досту­пе страницы, все еще будут присутствовать, несмотря на недоступность этих страниц.

userFunc
название функции
Данные ссылки, сформированные функцией typolink передаются в опре­деленную пользователем функцию для окончательной обработки.
Переменная $content? передаваемая в пользовательскую функцию (пер­вый параметр) является массивом с ключами “TYPE”,  “TAG”, “url”, “targetParams” и “ATagParams”. 
TYPE указывает на вид ссылки: mailto, url, file, pageю
TAG — полный тег <A>, сформированный и подготовленный в функции typolink.
Последние три объединяются в значении "TAG" по этой формуле:

<a href="'.$finalTagParts['url'].'"'.
           $finalTagParts['targetParams'].
           $finalTagParts['ATagParams'].'>

Пользовательская функция должна возвращать тег <A>.

[tsref:->typolink]
Использование обработчиков ссылок
Имеется возможность (добавлена в TYPO3 4.1) зарегистрировать по ключевому слову обработчик ссылок. Например, можно сослаться на страницу с id 34 через “<link 34>”, вставленное в обычное поле для основного текста, при этом теги <link> преобразуются в “->typolink”. Но что, если имеется расширение “pressrelease”, и нужно связать элементы пресс-релиза, выводимые расширением на какой-то странице, которую вы не помните? При помощи этой возможности возможно создать для этого расширения такую логику его работы.
В поле ссылки (значение “parameter” для ->typolink) нужно ввести “pressrelease:123”:


Обычно некий TypoScript преобразует это значение в атрибут “parameter” при вызове ->typolink. При вводе “pressrelease:123” в качестве  “parameter” для ->typolink, будет проверено, не является ли “pressrelease” ключевым словом, с которым связан обработчик ссылок, и если это так, то этот обработчик будет вызван для создания ссылки.
Регистрация обработчика для ключевого слова “pressrelease” делается так:
$TYPO3_CONF_VARS['SC_OPTIONS']['tslib/class.tslib_content.php']['typolinkLinkHandler']['pressrelease'] = 'EXT:pressrelease/class.linkHandler.php:&tx_linkHandler';

Файл класса “pressrelease/class.linkHandler.php“ содержит класс “tx_linkHandler”, который может выглядеть так:
class tx_linkHandler {
	function main($linktxt, $conf, $linkHandlerKeyword, $linkHandlerValue, $link_param, &$pObj) {
		$lconf = array();
		$lconf['useCacheHash'] = 1;
		$lconf['parameter'] = 34;
		$lconf['additionalParams'] = '&tx_pressrelease[showUid]='.rawurlencode($linkHandlerValue);

		return $pObj->typoLink($linktxt, $lconf);
	}
}

В этой функции, значение части после ключевого слова установлено как значение параметра GET, “&tx_pressrelease[showUid]”, а значение “parameter” новой ->typolink устанавливается на “34”, что подразумевает, что на странице с ID 34 установлено расширение, отображающее pressrelease 123, при вызове через &tx_pressrelease[showUid]=123. Дополнительно использован атрибут “useCacheHash” для функции typolink, для кеши­рования отображаемого. 
Результирующая ссылка будет выглядеть примерно так:
<a href="index.php?id=34&amp;tx_pressrelease[showUid]=123%3A456&amp;cHash=c0551fead6" >

Ссылка будет кодироваться через RealURL и соответствующей config.linkVars, покуда для формирования ссылок ис­пользуется ->typolink.
textStyle
Используется для стилизации текста через набор стандартных параметров + определенные специфики сайта.
Свойство:
Тип данных:
Описание:
По умолчанию:
align.field
align
Установка в поле из $cObj->массива данных

face.field


string
Установка в поле из $cObj->массива данных

[1] = "Times New Roman";
[2] = "Verdana,Arial,Helvetica,Sans serif";
[3] = "Arial,Helvetica,Sans serif";

face.default
string /stdWrap
[default] = User defined

size.field


string
Установка в поле из $cObj->массива данных

[1] = 1;
[2] = 2;
[3] = 3;
[10] = "+1";
[11] = "-1";

size.default
string /stdWrap
[default] = определенная пользователем

color.field



string
Установка в поле из $cObj->массива данных

смотрите доступные цвета в "content.php"

color.default
string /stdWrap
[default] = определенный пользователем

color.1
color.2
string
[1],[2] = определенный пользователем

properties.field
int
Установка в поле из $cObj->массива данных

Значения свойства выглядят так:
bit 0: <Ж>
bit 1: <К>
bit 2: <П>
bit 3: (верхний регистр)

Так, значение 5 приведет к жирному, подчеркнутому тексту

properties.default
int /stdWrap
[default] = определенный пользователем (Это значение будет исполь­зоваться, если ".field" - ложь!)

altWrap
wrap
Если установлено это значение, обертка в тег font, с параметрами шрифта, размера и цвета НЕ делается. Скорее элемент заключается в обертку с этим значением. Используется для назначения таблиц сти­лей, например:
<div class=”text”> | </div>

[tsref:->textStyle]
encapsLines
Свойство:
Тип данных:
Описание:
По умолчанию:
encapsTagList
список строк
Список тегов, расцениваемых формирующими. Должны быть в нижнем регисте.

Пример:
encapsTagList = div, p

При такой настройке, красные строки будет распознаны в качестве фор­мирующих:

Первая строка текста
Какой-то <div>текст</div>
<p>Какой-то текст</p>
<div>Какой-то текст</div>
<B>Какой-то текст</B>

remapTag.[tagname]
string
Введите здесь новое название для формирующего тега, если нужно при­вести все формирующие теги к единому названию.

Например, установка значения “remapTags.P=DIV”, приведет к преоб­разованию:

<p>Какой-то текст</p>
<div>Какой-то текст</div>

в

<div>Какой-то текст</div>
<div>Какой-то текст</div>

([tagname] в верхнем регистре).

addAttributes.[tagname]
массив строк
Атрибуты для формирующих тегов.

Пример:
addAttributes.P {
  style=padding-bottom:0px; margin-top:1px; margin-bottom:1px;
  align=center
}

([tagname] в верхнем регистре).

.setOnly = 
exists : значение будет установлено, ТОЛЬКО если свойства еще имеется
blank : значение будет установлено, ТОЛЬКО если свойства еще имеется ИЛИ пустое (“”)

По умолчанию значения атрибутов всегда устанавливаются/переназнача­ются.

removeWrapping
boolean
Если установлено, все существующие "обертки" строк будут удалены.

Это:

Первая строка текста
Какой-то <div>текст</div>
<p>Какой-то текст</p>
<div>Какой-то текст</div>
<B>Какой-то текст</B>

станет этим:

Первая строка текста
Какой-то <div>текст</div>
Какой-то текст
Какой-то текст
<B>Какой-то текст</B>

wrapNonWrappedLines
wrap
Обертка не формирующих строк

Пример:
.wrapNonWrappedLines = <P>|</P>

Это:

Первая строка текста
<p>Какой-то текст</p>

превратиться в это:

<P>Первая строка текста</P>
<p>Какой-то текст</p>

innerStdWrap_all
->stdWrap
Обертка содержимого внутри всех строк, независимо, формирующие они или нет.

encapsLinesStdWrap.[tagname]
->stdWrap
Обертка содержимого внутри всех формирующих строк.
([tagname] в верхнем регистре).

defaultAlign
string /stdWrap
Если установлено, то это значение "выравнивания" используется по умолчанию для тегов .encapsTagList, .bypassEncapsTagList и .nonWrappedTag

nonWrappedTag
tagname
Для всех не заключенных в обертку строк здесь можно установить, какой тег использовать для обертки. Примером может быть тег “P”. Это альтер­натива .wrapNonWrappedLines и имеет преимущество, что возможно уста­новить атрибуты через .addAttributes и defaultAlign. Так возможно легко установить теги используемые для строк с оберткой и без обертки.

[tsref:->encapsLines]
Пример:
encapsLines {
  encapsTagList = div,p
  remapTag.DIV = P
  wrapNonWrappedLines = <P>|</P>
  innerStdWrap_all.ifEmpty = &nbsp;
}

Этот пример показывает, как можно обработать содержимое посредством TYPO3 и таблиц стилей, когда используется тег <P> для формирования каждой строки.
Скажем это содержимое сделано в Rich Text Editor:
Строка №1 

[Выше имеется пустая строка!] 
<DIV align=right>Эта строка выравнивается по правому краю</DIV>

После обработки encapsLines с приведенной настройкой, содержимое будет таким:
<P>Строка №1</P>
<P>&nbsp;</P>
<P>[Выше имеется пустая строка!] </P>
<P align="right">Эта строка выравнивается по правому краю</P> 

Каждая строка заключена в тег <P>. Строка из базы данных, уже заключенная (но в теги <DIV>), была преобразова­на в <P>, но с сохранением своего выравнивания. В целом, обратите внимание, что Rich Text Editor ЛИШЬ сохранил строку, которая фактически была выравнена вправо, все остальные строки RTE сохранил без каких-либо тегов, чтобы содержимое в базе данных оставалось по возможности удобочитаемым.
Пример:
# Убедитесь, что операторы nonTypoTagStdWrap не содержатся вне <typolist> и <typohead>:
tt_content.text.20.parseFunc.tags.typolist.breakoutTypoTagContent = 1
tt_content.text.20.parseFunc.tags.typohead.breakoutTypoTagContent = 1
# ... и нет <BR> перед typohead.
tt_content.text.20.parseFunc.tags.typohead.stdWrap.wrap >
# Настройка nonTypoTagStdWrap на обертку текста тегами P
tt_content.text.20.parseFunc.nonTypoTagStdWrap >
tt_content.text.20.parseFunc.nonTypoTagStdWrap.encapsLines {
  encapsTagList = div,p
  remapTag.DIV = P
  wrapNonWrappedLines = <P style="margin:0 0 0;">|</P>

  # Назначение атрибутов в любые формирующие теги
  addAttributes.P {
    style=margin:0 0 0;
  }
  innerStdWrap_all.ifEmpty = &nbsp;
  innerStdWrap_all.textStyle < tt_content.text.20.textStyle
}
# в конце удаляем старый стиль текста во всем основном тексте.
tt_content.text.20.textStyle >
# ... и тег <BR> больше не нужен после содержимого...
tt_content.text.20.wrap >

Это пример заключения обычного текста содержимого tt_content в теги <P>, установки пустой строки через тег <BR>, но совместимость с функционалом RTE, вроде выравнивания и классов для параграфов, все еще остается.
tableStyle
Используется для стилизации тега table. Исходное значение будет вставлено в тег table.
Свойство:
Тип данных:
Описание:
По умолчанию:
align
align /stdWrap


border
int /stdWrap


cellspacing
int /stdWrap


cellpadding
int /stdWrap


color.field
string
Установка в поле из $cObj->массива данных

color.default
color.1
color.2
string
[default],[1],[2] = определенное пользователем


params
<TABLE>-параметры


[tsref:->tableStyle]
Пример:
styles.content.tableStyle {
  align.field = text_align
  border.field = table_border
  cellspacing.field = table_cellspacing
  cellpadding = 1

  color.field = table_bgColor
  color.default = {$styles.content.tableStyle.color}
  color.1 = {$styles.content.tableStyle.color1}
  color.2 = {$styles.content.tableStyle.color2}
}
addParams
Свойство:
Тип данных:
Описание:
По умолчанию:
_сме­щение
int
Используйте, чтобы определить, каким тегом нужно управлять.
1 — первый тег из введенного значения, 2 — второй, -1 — последний, -2 — второй с конца.
1
(массив строк)
string /stdWrap
Определяет содержимое каждого добавляемого свойства тега.
Если свойство тега с таким названием уже было (чувствительно к регистру!), то оно будет переназначено! 
Если возвращается пустая строка (но не ноль!), то существующее (если имеется) свойство не переназначается.

[tsref:->addParams]
Пример:
page.13 = HTML
page.13.value = <tr><td valign=top>
page.13.value.addParams.bgcolor = {$menuCol.bgColor}
page.13.value.addParams._сме­щение = -1 

Результат примера:
<tr><td valign="top" bgcolor="white">

В этом примере добавляется свойство "bgColor" к значению HTML cObject, если содержимое не “” (ноль здесь рассматривается как значение!).
filelink
Исходное — название файла по пути "path".
Значок, размер и файл обрабатываются в указанном порядке.
Свойство:
Тип данных:
Описание:
По умолчанию:
path
path /stdWrap
Пример: "uploads/media/"

icon
boolean /stdWrap
Нужно ли отображать значок.

icon_image_ext_list
список расширений изображений /stdWrap
Расширения файлов, которые должны выводиться в виде эскизов вместо значков.

icon_thumbSize
string /stdWrap
Определение размера значка в пикселях.

Чтобы свойство сработало, "icon" должен быть быть включен, а расширение файла изображение должно входить в список "icon_image_ext_list".

Можно установить одно из двух значений, согласно примеру. Если установить два значения, первое будет определять максимальную ширину, а второе — максимальную высоту. Пропорции оригинального изображения будут соблюдены.

Примеры:
icon_thumbSize = 150
icon_thumbSize = 40x40

iconCObject
cObject
Введите cObject для альтернативного использования для значков, например типа IMAGE.
Если установлено, то это будет подставлено в сценарий эскизов для отображения эскизов.

icon_link
boolean
Должны ли значки быть ссылками.

labelStdWrap
->stdWrap
Параметры stdWrap для меток (по умолчанию меткой является на­звание файла), перед тем, как они помещаются в теги A.
Используйте для, например, импорта других меток из поля базы данных и т.п.

wrap
wrap /stdWrap
Обертка для ссылок.

ATagBeforeWrap
boolean
Если установлено, то ссылка сначала оборачивается через ".wrap", а затем помещается в тег <A>.

file
->stdWrap
stdWrap метки (по умолчанию меткой является название файла) по­сле помещения в тег A!

size
boolean /stdWrap
Нужно ли показывать размер.

jumpurl
boolean
Должна ли ссылка вызывать сценарий с параметрами jumpurl для регистрации любых переходов в статистике.
Плюсы в том, что любые щелчки по файлу будут зарегистрированы в статистике.
Минус в том, что пользователь не сможет щелкнуть по ссылке пра­вой кнопкой мыши и выбрать "Сохранить объект как" в браузере.

Дополнительные свойства:
  .secure = [boolean]; если установлено, то НЕ происходит пере­направление к файлу, на который указывает jumpurl, файл читается и возвращаются корректные заголовки. Этот параметр до­бавляет хеш и locationData к url, и к записи ДОЛЖЕН иметься доступ для скачки файла. Кроме того, если местоположение файла на сер­вере защищено через .htaccess, то к файлу не будет НИКАКОГО досту­па и получится защищенная загрузка!

  .secure.mimeTypes = список mimetypes, синтаксис [ext] = [mimetype]

  .parameter = [string/stdWrap]
По умолчанию ссылка jumpurl использует текущий pid и typeNum. 
Если нужна альтернатива значений (например, для записи в журнал), можно определить их здесь.
Параметры смотрите в typolink.parameter.

Пример:
jumpurl.secure = 1
jumpurl.secure.mimeTypes = pdf=application/pdf, doc=application/msword

Пример:
jumpurl.secure = 1
jumpurl.secure.mimeTypes = pdf=application/pdf, doc=application/msword

target
target


stdWrap
->stdWrap


ATagParams
Параметры <A> /stdWrap
Дополнительные параметры.

Пример:
class="board"

removePrependedNumbers
boolean
Если установлено, из имени файла удаляются любые 2 предвари­тельно установленные цифры (например _23).

altText
titleText
string /stdWrap
Для значков (изображения сформированные через "iconCObject" должны иметь свои свойства)

Если titltext не определен, используется alttext.
Если не определен alttext, используется пустой alttext.

emptyTitleHandling
string /stdWrap
Значение может быть “keepEmpty” для сохранения пустого атрибута title, или “useAlt” для использования содер­жимого атрибута alt.
useAlt
longdescURL
string /stdWrap
Для значков (изображения сформированные через "iconCObject" должны иметь свои свойства)

Атрибут "longdesc" (URL документа с деталями об изображении).

[tsref:->filelink]
Пример:
    1.filelink {
      path = uploads/media/
      icon = 1
      icon.wrap = <td> | </td>
      size = 1
      size.wrap = <td> | </td>
      file.fontTag = {$styles.content.uploads.wrap}
      file.wrap = <td> | </td>
      jumpurl = 1
      target = _blank
      stdWrap = <tr> | </tr>
    }

numberFormat
Воспользовавшись этим свойством, можно отформатировать значения с плавающей запятой, например для указания цен. Это обертка для функции number_format() из PHP.
Можно определить количество знаков после запятой и разделитель десятичных знаков и тысяч.
Так как в конечной итоге свойства используются в функции PHP number_format(), необходимо убедиться в передаче правильных параметров в функцию. Если не уверены, наведите справки в руководстве по PHP.
Свойство:
Тип данных:
Описание:
По умолчанию:
decimals
integer /stdWrap
Количество знаков после запятой в отформатированном числе. По умолчанию 0, при этом исходное значение будет округлятся вверх или вниз до целого числа.
0
dec_point
string /stdWrap
Символ-разделитель десятичных знаков. По умолчанию
точка ".".
.
thousands_sep
string /stdWrap
 Символ-разделитель тысяч. По умолчанию запятая ","; уста­новите пустое значение, если разделитель тысяч не нужен.
,
[tsref:->numberFormat]
Примеры:
lib.myPrice = TEXT
lib.myPrice {
  value = 0.8
  numberFormat {
    decimals = 2
    dec_point.cObject = TEXT
    dec_point.cObject {
      value = .
      lang.ru = ,
    }
  }
  noTrimWrap = || &euro;|
}
# По умолчанию будет выводиться "0.80 €", а для русского языка "0,80 €".

lib.carViews = CONTENT
lib.carViews {
  table = tx_mycarext_car
  select.pidInList = 42
  renderObj = TEXT
  renderObj {
    field = views
    # По умолча­нию используется 3 знака после запятой или
    # количество, заданное в переменной Get/Post precisionLevel, если задано.
    numberFormat.decimals = 3
    numberFormat.decimals.override.data = GP:precisionLevel
    numberFormat.dec_point = ,
    numberFormat.thousands_sep = .
  }
}
# Результатом будет что-то подобное "9.586,007".
parseFunc
Этот объект используется для анализа некоторого содержимого на предмет специальных типов тегов, вещей типа "makeLinks" и т.п...
Пример:
В этом примере берется содержимое поля "bodytext" и анализируется при помощи функций makelinks, с подстановкой всех тегов <LINK> и <TYPOLIST> с чем-либо еще. 
tt_content.text.default {
  20 = TEXT
  20.field = bodytext
  20.wrap = | <BR>
  20.brTag = <br>
  20.parseFunc {
    makelinks = 1
    makelinks.http.keep = path
    makelinks.http.extTarget = _blank
    makelinks.mailto.keep = path
    tags {
      link = TEXT
      link {
        current = 1
        typolink.extTarget = _blank
        typolink.target={$cLinkTagTarget} 
        typolink.wrap = <B><FONT color=red>|</FONT></B>
        typolink.parameter.data = parameters : allParams
      }

      typolist < tt_content.bullets.default.20
      typolist.trim = 1
      typolist.field >
      typolist.current = 1
    }
  }
}

Свойство:
Тип данных:
Описание:
По умолчанию:
externalBlocks 
список названий тегов/+properties
Позволяет предварительно разбить содержи­мое, так, чтобы в  parseFunc  передавалось для анализа лишь содержимое блока вне за­данных тегов.
Дополнительные свойства:
.[tagname] {
  callRecursive = [boolean]; если задано, то содержимое блока снова направляется в parseFunc. То есть, содержимое не обрабатывается ни­чем иным, кроме stdWrap (см. ниже).
  callRecursive.dontWrapSelf = [boolean]; если установлено, то со­держимое, возвращенное из parseFunc не заключается в теги блока.
  callRecursive.alternativeWrap = альтернативные теги для поме­щения содержимого, вместо оригинальных тегов.
  callRecursive.tagStdWrap = ->stdWrap обработка тегов блока.
  stdWrap = ->stdWrap обработка целого блока (независимо от уста­новки callRecursive).
  stripNLprev = [boolean]; удаление последнего перехода строки пре­дыдущего внешнего блока.
  stripNLnext = [boolean]; удаление первого перехода строки следую­щего внешнего блока.
  stripNL = [boolean]: проделывает две предыдущие операции.

   HTMLtableCells = [boolean]; если установлено, содержимое прове­ряется на наличие таблицы и разбивается каждая ячейка.
   # ниже default — все ячейки, а 1,2,3... определяют конкретные столбцы.
   HTMLtableCells.[default/1/2/3/...] {
     callRecursive = [boolean]; содержимое обрабатывается текущей parseFunc.
      stdWrap = ->stdWrap обрабатывает содержимое ячейки.
      tagStdWrap = -> тег <TD> обрабатываемый ->stdWrap
   }
   HTMLtableCells.addChr10BetweenParagraphs = [boolean]; если установлено, то все вхождения </P><P> дополняются chr(10), встав­ленным между ними.
}

Пример:
Этот пример используется для разбивки обычного текста содержимого так, чтобы таблицы и цитаты обрабатывались корректно. Цитаты сно­ва возвращаются в parseFunc (рекрсивно), где их верхние/нижние от­ступы устанавливаются на 0 (чтобы не были видны переводы строк).
Также таблицы отображаются с рядом переназначенных свойств для ячеек.
tt_content.text.20.parseFunc.externalBlocks {
  blockquote.callRecursive=1
  blockquote.callRecursive.tagStdWrap.HTMLparser = 1
  blockquote.callRecursive.tagStdWrap.HTMLparser {
    tags.blockquote.fixAttrib.style.list = margin-bottom:0;margin-top:0;
    tags.blockquote.fixAttrib.style.always=1
  }
  blockquote.stripNLprev=1
  blockquote.stripNLnext=1

  table.stripNL=1
  table.stdWrap.HTMLparser = 1
  table.stdWrap.HTMLparser {
    tags.table.overrideAttribs = border=0 cellpadding=2 cellspacing=1 style="margin-top: 10px; margin-bottom: 10px;"
    tags.tr.allowedAttribs=0
    tags.td.overrideAttribs = valign="top" bgcolor="#eeeeee" style="font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 10px;"
  }
}

constants
boolean
Константы, определенные на основном уровне подставляются в текст. Название констант заключается в "###".

Пример:
constants.EMAIL =  email@email.com
(ЗАМЕЧАНИЕ: это TypoScript основного уровня!)
Все вхождения строки ###EMAIL### будут замещены. Константы определены как объекты основного уровня. 

short
массив строк
Тоже, что выше, но на локальном уровне.

Пример:
Все встреченные “T3” заменяются на “TYPO3 CMS”, а “T3web” - на ссылку на typo3.com.
short {
  T3 = TYPO3 CMS
  T3web = <a href=”http://typo3.com”>typo3</a>
}

plainTextStdWrap
->stdWrap
Это свойства stdWrap для всего содержимого, кроме тегов. 

userFunc
название функции
Все содержимое, кроме тегов, передается в выбранную функцию. По­хоже, например, на .postUserFunc в stdWrap.
Помните, что название функции должно по возможности быть с пре­фиксом “user_”

nonTypoTagStdWrap
->stdWrap
Наподобие .plainTextStdWrap. Разница: 
.plainTextStdWrap работает во ВСЕХ местах текста без тегов. .nonTypoTagStdWrap последовательно обрабатывает весь текст (вклю­чая теги) между специальными TypoTag (если .breakoutTypoTagContent не установлен для TypoTag)

nonTypoTagUserFunc
название функции
Наподобие .userFunc. Разница в том (как и в nonTypoTagStdWrap), что производится последовательная обработка всех кусков содержимого вокруг TypoTag-ов, пока .userFunc ни обработает все содержимое вне тегов. (Примечание: .breakoutTypoTagContent должно быть установле­но для TypoTag, если оно исключено из nonTypoTagContent)

sword
wrap
Отмечает любые слова из метода GET, посылая массив sword_list[] в текст. Слово ДОЛЖНО состоять хотя бы из двух символов!
ЗАМЕЧАНИЕ: работает лишь при $GLOBALS["TSFE"]->no_cache==1
<font color="red">|</font>
makelinks
boolean / ->makelinks
Преобразует адреса web, начинающиеся с "http://" и адреса почты, начинающиеся с "mailto:" в ссылки.

tags
->tags
Здесь возможно определить свои теги, которые будут анализировать содержимое каким-либо образом.

allowTags
список строк
Список тегов, которые могут присутствовать в коде! 
Самый высокий приоритет: если тег присутствует в allowTags, то denyTags игнорируется!!!

denyTags
список строк
Список тегов, которые НЕ могут присутствовать в коде! (используйте "*" для тек.)
Приоритет ниже: если тег НЕ находиться в allowTags, то используется denyTags. Если denyTags не "*" и тега нет в списке, то тег может про­пускается!

Пример:
Позволены только теги <B>, <I>, <A> и <IMG>
.allowTags = b,i,a,img
.denyTags = *

if
->if
Если "if" возвращает ложь, то входное значение не обрабатывается, а возвращается как есть.

[tsref:->parseFunc]
makelinks
makelinks преобразует все вхождения 
	http://www.webaddress.rld 
	mailto:name@email.rld 
...в настоящие теги ссылок.
Свойство:
Тип данных:
Описание:
По умолчанию:
http.extTarget
target
Цель ссылки.
_top
http.wrap
wrap /stdWrap
Во что помещается ссылка.

http.ATagBeforeWrap
boolean
Если включено, то ссылка сначала помещается в http.wrap, а затем в тег <A>.

http.keep
list: "scheme","path","query"
По умолчанию, текстом ссылки будет полное имя домена ссылки.

Примеры:
http://www.webaddress.rld/test/doc.php?id=3 
"": 		www.webaddress.rld
"scheme": 		http://www.webaddress.rld
"scheme,path": 	http://www.webaddress.rld/test/doc.php
"scheme,path,query": http://www.webaddress.rld/test/doc.php?id=3

http.ATagParams
параметры <A> /stdWrap
Дополнительные пара­метры.

Пример:
class="board"

mailto.wrap
wrap /stdWrap
Обертка ссылки.

mailto.ATagBeforeWrap
boolean
Если включено, то ссылка сначала помещается в mailto.wrap, а затем в тег <A>.

mailto.ATagParams
параметры <A> /stdWrap
Дополнительные пара­метры.

Пример:
class="board"

[tsref:->makelinks]
tags
Используется для создания собственных тегов и описания их работы. Используется вместе с parseFunc.
Свойство:
Тип данных:
Описание:
По умолчанию:
Массив...
cObject +stripNL
+ breakoutTypoTagContent
Каждая запись Массива... относится к тегу, который будет анализиро­ваться. Элементы ДОЛЖНЫ быть в нижнем регистре. 
Каждая запись должна соотноситься с объектом содержимого.
"current" относится к содержимому тега, например <TAG>содержи­мое</TAG>: здесь "current" соотносится с "содержимое".
Параметры:
Параметры тега устанавливаются в $cObj-> parameters (ключ в ниж­нем регистре):
<TAG COLOR="red">содержимое</TAG>
=> $cObj->parameters[color] = red 
Специальные добавочные свойства в объекте содержимого:
$cObj->parameters[allParams]:  при этом автоматически устанавлива­ется целая строка параметров тега, например " color="red"'
[cObject].stripNL: булева переменная, говорящая parseFunc, что новая строка перед и после содержимого удаляется.
[cObject].breakoutTypoTagContent: булева переменная, говорящая parseFunc, что этот блок содержимого разбивает содержимое без TypoTag, и что содержимое после этого должно быть заново "оберну­то".

Примеры:
tags.bold = TEXT
tags.bold {
  current = 1
  wrap = <B> | </B>
}
tags.bold.stripNL = 1

[tsref:->tags]
Пример:
В этом примере создаются 4 тега. The <LINK>-, <TYPOLIST>-, <GRAFIX>- и <PIC>.
<LINK> превращается в typolink и предоставляет простую возмож­ность создания ссылок в тексте.
<TYPOLIST> используется для создания маркированных списков.
<GRAFIX> создает gif-файл, размером 90x10 пикселей, с текстом, содержащимся в теге.
<PIC> позволяет вставлять изображение в текст. Содержимое тега должно быть ссылкой на изображение в "fileadmin/".
    tags {
      link = TEXT
      link {
        current = 1
        typolink.extTarget = _blank
        typolink.target={$cLinkTagTarget} 
        typolink.wrap = <B><FONT color=red>|</FONT></B>
        typolink.parameter.data = parameters : allParams
      }

      typolist < tt_content.bullets.default.20
      typolist.trim = 1
      typolist.field >
      typolist.current = 1

      grafix = IMAGE 
      grafix {
        file = GIFBUILDER
        file {
          XY = 90,10
          100 = TEXT
          100.text.current = 1
          100.сме­щение = 5,10
          100.nicetext = 1
        }
      }
      pic = IMAGE
      pic.file.import = fileadmin/
      pic.file.import.current = 1
    }
HTMLparser
Свойство:
Тип данных:
Описание:
allowTags
list of tags
Дозволенные по умолчанию теги
tags.[tagname]
boolean/->HTMLparser_tags
Можно установить это свойство на 0 или 1, что позволить или запретить тег. Если ввести свойство ->HTMLparser_tags, автоматически выключит этот пара­метр и он станет ненужным.
[tagname] в нижнем регистре.
localNesting
список тегов, должен входить в сохраняе­мые теги
Список тегов (среди уже установленных), что принудительно установит фла­жок nesting.
globalNesting
(ibid)
Список тегов (среди уже установленных), что принудительно установит фла­жок nesting на “global”
rmTagIfNoAttrib
(ibid)
Список тегов (среди уже установленных), что принудительно установит rmTagIfNoAttrib на истину.
noAttrib
(ibid)
Список тегов (среди уже установленных), что принудительно установит allowedAttribs равным нулю  (то есть удалит все атрибуты).
removeTags
(ibid)
Список тегов (среди уже установленных), которые будут настроены для удале­ния.
keepNonMatchedTags
boolean / "protect"
Если включено (истина=1), то все теги, сохраненные независимо от тегов, присутствующих как ключи массива $tags. 
Если "protect", то теги сохраняются с преобразованием <> в &lt; и &gt;
По умолчанию, все недозволенные теги УДАЛЯЮТСЯ! Поэтому Вы, вероятно, захотите установить это значение!
htmlSpecialChars
-1 / 0 / 1 / 2
Это оценивает все содержимое, НЕ являющееся тегами: 
“0” значит "отключено" — ничего не происходит.
“1” значит, что содержимое вне тегов передается в htmlspecialchar() (функцию PHP преобразующая &”<> в &...;)
“2” тоже, что “1”, но значения, вроде “&amp;” или “&#234” не затрагиваются.
“-1” противоположное “1” - преобразует &lt; в <, &gt; в >, &quot; в “ etc.
xhtml_cleaning
boolean
Очищает содержимое для соответствия XHTML. Все еще экспериментальная функция и поддерживает лишь некоторые операции очистки (вроде перевода тегов и атрибутов в нижний регистр).
[page:->HTMLparser; tsref:->HTMLparser]
HTMLparser_tags
Свойство:
Тип данных:
Описание:
overrideAttribs
string
Если установлено, эта строка присутствует в качестве атрибутов тега. 
allowedAttribs

'0' (ноль) = атрибутов нет, "[список атрибутов через запятую]" = доз­воленные атрибуты. Если пусто/не установлено, позволены все атрибу­ты.
fixAttrib.[attribute].set
string
Переназначает значение атрибута на заданное.
fixAttrib.[attribute].unset
boolean
Если включено, то атрибут отключается.
fixAttrib.[attribute].default
string
Если атрибутов с таким названием нет, это значение используется по умолчанию (если оно не пустое).
fixAttrib.[attribute].always
boolean
Если установлено, то атрибут всегда обрабатывается. Обычно атрибут обрабатывается только если он существует.
fixAttrib.[attribute].trim
fixAttrib.[attribute].intval
fixAttrib.[attribute].upper
fixAttrib.[attribute].lower
boolean
Если установлены любые из этих ключей, то значения обрабатываются соответствующей функцией PHP.
fixAttrib.[attribute].range
[low],[high]
Установка интервала (целые значения). 
fixAttrib.[attribute].list
Список значений, очищенный
Значения атрибута должны находиться в этом списке. Если нет, то ис­пользуется первое значение.
fixAttrib.[attribute].removeIfFalse
boolean/"blank" string
Если установлено, то "ошибочный" атрибут удаляется. Если это значе­ние "blank", то значение может быть пустой строкой (то есть "нулевое" значение не удаляется).
fixAttrib.[attribute].removeIfEquals
string
Если значение атрибута соответствует установленному здесь, то оно удаляется.
fixAttrib.[attribute].casesensitiveComp
boolean
Если установлено, то сравнение в .removeIfEquals и .list будут зависеть от регистра. Здесь не чувствительно.
fixAttrib.[attribute].prefixLocalAnchors
integer
Если первый символ - “#” (якорь тегов <a>), то значение будет ис­пользоваться как префикс относительных или локальных путей.
Если значение - “1” то получите абсолютный путь (t3lib_div::getIndpEnv('TYPO3_REQUEST_URL'))
Если значение - “2” то получите относительный путь (удалением t3lib_div::getIndpEnv('TYPO3_SITE_URL'))

Пример:

...fixAttrib.href.prefixLocalAnchors = 1
fixAttrib.[attribute].prefixRelPathWith
string
Если значение атрибута - относительный URL (“http” “/” в качестве пер­вого символа не используются), то значение этого свойства будет слу­жить префиксом к атрибуту.

Пример:

...fixAttrib.src.prefixRelPathWith = http://192.168.230.3/typo3/32/dummy/
fixAttrib.[attribute].userFunc
function reference
Пользовательская функция для обработки атрибута.

Пример:

...fixAttrib.href.userFunc = tx_realurl->test_urlProc
protect
boolean
Если установлено, то знаки тегов <> преобразуются в &lt; и &gt;
remap
string
Если установлено, название тега переопределяется на это.
rmTagIfNoAttrib
boolean
Если установлено, то тег удаляется, если не имеет атрибутов.
nesting

Если истина, то этот тег должен иметь начальные и конечные теги. Лю­бые неверные теги будут удалены. Это "</B><B><I></B></I></B>" будет преобразовано в это: "<B><I></B></I>". 
Если это значение "глобальное", то истина для nesting относительно других тегов, назначенных для "глобального" контроля вложенности сохраняется. Это значит, что, если <B> и <I> установлены как гло­бальные nesting, то строка '</B><B><I></B></I></B>' превратится в '<B></B>'
[page:->HTMLparser_tags; tsref:->HTMLparser_tags]
Настройка
Top-level objects (основные объекты)
Свойство:
Тип данных:
Описание:
По умолчанию:
types
readonly
Типы (внутренние)
type=99 зарезервирован для отображения простого текста.

resources
readonly
Ресурсы в списке (внутренние).

sitetitle
readonly
Заголовок сайта (внутренний).

config
->CONFIG
Глобальная настройка. 
Эти значения сохраняются с кешируемыми страницами, это значит, что они доступны при получении кешируемых страниц.

constants
->CONSTANTS
Константы, относящиеся к сайту, например общий адрес email. Эти константы могут быть подставлены в текст на страницах. Подстановка осуществляется через parseFunc. (Параметр: constants=1)

FEData
->FE_DATA
Здесь можно настроить обработку данных, подставленных из внешне­го интерфейса, скрипты и т.п.

includeLibs
Массив строк
Здесь можно включить файлы php с библиотеками функций, для ис­пользования в своих включенных сценариях в TYPO3. 
Смотрите объект PAGE, имеющий те же свойства.

Другие зарезерви­рованные TLO:

plugin
tt_*
temp
styles
lib
_GIFBUILDER

Эти названия объектов верхнего уровня зарезервированы. Это значит, что Вы рискуете, используя их в статических шаблонах:
“plugin” используется для формирования специального содержимого, вроде досок, решений ecommerce, гостевых книг и т.п. Обычно уста­навливаемых через static_template. Смотрите отдельные описания ниже!
“tt_*”, например tt_content (из “content (default)”) используется для формирования содержимого из таблиц.
“temp” и “styles” используются для библиотек условий, копирующихся во время анализа, но не сохраняемых в кеше вместе с шаблоном. "temp" / "styles" убираются перед кешированием шаблона! Поэто­му, эти названия используйте для хранения временных данных.
“lib” может использоваться для "библиотеки" или кода, на который можно сослаться в TypoScript (в отличие от “styles” которые не сохра­няются)

...
->PAGE
Начало новой страницы. 

Пример:
page = PAGE
page.typeNum = 1

Руководство:
Хорошо использовать общие названия объектов PAGE:
page для основной страницы с содержимым
frameset, frameset2 для фреймов.
top, left, menu, right, bottom, border для верхних и меню и т.п. фреймов.
Это просто рекомендации. Особенно распространено название "page" для основной страницы с содержимым.

...
(что-нибудь)
Если объект основного уровне — не объект PAGE, он может использо­ваться в качестве временного хранилища для настройки. В этом слу­чае нужно использовать объекты "temp" или "styles".
"tt_..." обычно используется для определения настроек записей содер­жимого. Например, "tt_content" используется по умолчанию для та­блицы tt_content. Смотрите cObject "CONTENT".

[tsref:(TLO)]
"дополнение" TLO
Используется в TYPO3 для расширений, установленных как дополнения внешнего интерфейса. Обычно здесь можно установить настройки для расширений. Скажем, имеется расширение с ключом “tx_myext”, а в нем имеется внешнее дополнение с названием “tx_myext_pi1”, тогда его настройки через TypoScript можно найти в дереве объектов в разде­ле “plugin.tx_myext_pi1”!
Большинство расширений — это объекты USER или USER_INT, то есть они имеют хотя бы 1 или 2 свойства. Кроме того, приведенная таблица обрисовывает некоторые свойства по умолчанию. Обычно, системные свойства содержат префикс с подчеркиванием:
Свойство:
Тип данных:
Описание:
По умолчанию:
userFunc

Свойства для настроек объекта USER / USER_INT расширения

includeLibs

Свойства для настроек объекта USER / USER_INT расширения

_CSS_DEFAULT_STYLE
string
Используйте для создания некоторых CSS по умолчанию, встав­ленных в раздел заголовка документа. Скорее всего, это будет представлять наиболее приемлемое отображение для расшире­ния, но в идеале, оно должно быть перемещено во внешнюю та­блицу стилей.
Это значение для всех расширений читается сценарием pagegen при формировании заголовка документа.

_DEFAULT_PI_VARS.[piVar-key]
string
Позволяет установить значения по умолчанию для массива piVars, использующихся (и должных использоваться) в большинстве расширений для обмена данными между собой. 
Работает только при вызове расширения через $this->pi_setPiVarDefaults().

_LOCAL_LANG.[lang-key].[label-key]
string
Может использоваться для переназначения меток локализации расширения по умолчанию.

[tsref:plugin]

"CONFIG"
В typo3/sysext/cms/tslib/ это известно как $GLOBALS["TSFE"]->config["config"], ввиду чего, свойство "debug" (отладка) доступно как $GLOBALS["TSFE"]->config["config"]["debug"].
Свойство:
Тип данных:
Описание:
По умолчанию:
defaultGetVars
array
Позволяет установить значения по умолчанию для параметров GET. Значения по умол­чанию берутся только если параметры GET не определены. Обозначения в массиве делаются точками, например:
test[var1] будет записано как test.var1

Пример:
config.defaultgetVars {
    test.var1.var2.p3 = 15
    L = 3
}

linkVars
list
HTTP_GET_VARS, что должно передаваться вместе с ссылками в TYPO3. Это компилируется в строку, хранящуюся в $GLOBALS["TSFE"]->linkVars

Значения rawurlencoded в PHP.

Можно определить диапазон правильных значений, добавив () после каждого значения. Если диапазон не верный, переменная не добав­ляется к ссылкам. Это очень важно для предотвращения забивания системы кеширования подделанными значениями.

Диапазон может содержать одно из следующих значений:
[a]-[b] – диапазон целых значений;
int – дозволены лишь целые значения;
[a]|[b]|[c] – список допустимых строк (пробелы удаляются);
/[regex]/ - соответствие регулярному выражению (стиль PCRE)

Пример:
config.linkVars = L, print
Все ссылки в TYPO3 будут дополнены "&L=[значение L]&print=[значе­ние print]".

config.linkVars = L(1-3), print
Тоже, что выше, но “&L=[значение L]”  будет добавлено только если текущее значение равно 1, 2 или 3.

Замечание: не включайте параметр "type" в список linkVars, так как это приведет к неожиданным результатам.

uniqueLinkVars
boolean
Может получиться, что TYPO3 формирует ссылки с одинаковыми пара­метрами дважды и более раз. Это не проблема, так как используются лишь последние параметры, это нужно лишь для опрятности.
1
MP_defaults
string
Позволяет установить список номеров id страниц, к которым всегда добавляется соответствующий  “&MP=...” параметр.

Синтаксис:
[id],[id],... : [MP-var] | [id],[id],... : [MP-var] | ... 

Пример:
config.MP_defaults = 36,37,48 : 2-207

Это добавляет по умолчанию “&MP=2-207” ко всем ссылкам, указываю­щим на страницы 36,37 и 48

MP_mapRootPoints
список PID/string
Определяет список номеров ID, начиная с которого в ветви автомати­чески вычисляются переменные MP.
Результат используется также, как и MP_defaults, для поиска перемен­ных MP, если ни один не был указа до вызова в t3lib_tstemplate::linkData().
Возможно определить “root” в качестве специального ключа в списке ID, при этом будет создано карта-дерево для целого сайта (но это ОЧЕНЬ сильно сказывается на производительности при обработке большого количества страниц!).
Порядок указанных ID может иметь значение; любые, уже обработан­ные ID в ветви (указанием ID предыдущей корневой точки) снова не обрабатываются.

MP_disableTypolinkClosestMPvalue
boolean
Если установлено, функция typolink не будет пытаться найти бли­жайшее значение MP для id.

renderCharset
string
Кодировка, используемая для формирования внутреннего содержимо­го страниц. Крайне рекомендуется, чтобы это значение было таким же, как и кодировка содержимого в основном источнике данных (например в базе данных). Ввиду чего не придется делать никаких преобразований.
Все строки из locallang файлов и локальных строк преобразуются в "renderCharset" в процессе формирования. 

Если для вывода нужна отличная от render charset кодировка,  смотри­те ниже - "metaCharset". 

Если установлено значение TYPO3_CONF_VARS['BE']['forceCharset'], то оно по умолчанию используется для "renderCharset". Для многоязыч­ных сайтов крайне рекомендуется использование TYPO3_CONF_VARS['BE']['forceCharset'] в TYPO3. Установив его, не нужно будет заботиться о renderCharset и metaCharset – кодировка во всей системе будет одна и та же.
$TYPO3_CONF_VARS['BE']['forceCharset'] если что-то отличное от
"iso-8859-1"
metaCharset
string
Кодировка, используемая для вывода документа. Например, в мета теге:
<meta http-equiv="Content-Type" content="text/html; charset=...>

Используется для a) HTML тега meta, b) HTTP заголовка (если не за­блокировано через .disableCharsetHeader) и c) xhtml prologues (если доступно)

Если renderCharset и metaCharset отличаются, выводимое содержимое автоматически преобразуется в metaCharset перед выводом и наобо­рот, значения, отсылаемые из страницы, преобразуются из metaCharset в renderCharset для внутренней обработки. Конечно же, это преобразование занимает некоторое время, ввиду чего лучше вез­де использовать одинаковую кодировку.
значение ".renderCharset"
disableCharsetHeader
boolean
По умолчанию отсылается заголовок "content-type:text/html; charset...". Этот параметр отключает его отсылку.

sendCacheHeaders
boolean
Если установлено, TYPO3 выведет заголовки управления кешем для клиента, полагаясь на внутреннее кеширование страницы. Это воз­можность позволяет браузерам клиентов и/или прокси серверам управлять загрузкой сайтов через TYPO3.

Условия для позволения клиентского кеширования:
страница была в кеше
На странице нет *_INT или *_EXT объектов (например USER_INT)
Не зарегистрирован внешний пользователь
Не зарегистрирован внутренний пользователь

Если эти условия выполняются, высылаются заголовки:
С последними изменениями [SYS_LASTCHANGED для id страницы]
Истекшие [время, истекшее со времени кеширования страницы]
Etag [md5 содержимого]
Cache-Control: max-age: [секунды со времени expiretime]
Pragma: public

Если кеширование запрещено, отправляются такие заголовки, для запрещения кеширования:
Cache-Control: private

Обратите внимание, что включение кеширования браузером, значит согласование в написании файлов журналов. Так как, при кеширова­нии страницы у клиента, она не будет запрашивать сервер, поэтому запрос не будет зафиксирован в журнале. Поэтому должны быть способы для обхода этой проблемы, но они в любом случае находятся вне компетенции TYPO3.

Совет: включение заголовков управления кешем может запутать ре­дакторов сайтов, видящих устаревшее содержимое, взятое из кеша браузера. “Shift-перезагрузка” решает как проблему кеширования браузера, так и прокси, и даже может заставить TYPO3 заново создать содержимое страницы. Запомните эту уловку!

Благодарим Ole Tange, www.forbrug.dk за соавторство в этой возмож­ности.

sendCacheHeaders_onlyWhenLoginDeniedInBranch
boolean
Если включено, то заголовки управления кешем позволят клиентское кеширование, только если регистрации пользователей отключены для ветви. Эта функция облегчает управление клиентским кешированием на сайтах со смесью статических страниц и динамических разделов для зарегистрированных пользователей. 

Подоплека проблемы вот в чем: в TYPO3 тот же URL может отобра­зить различное содержимое, в зависимости от того, зарегистрирован ли пользователь, или нет. Если пользователь зарегистрирован, заго­ловки кеширования никогда не позволят клиентское кеширование. Но если тот же URL посещается до регистрации (кеширование разреше­но), то пользователь после регистрации все еще будет видеть страни­цу из кеша до регистрации (и будет думать, что он не зарегистриро­вался)! Существует лишь один способ для предотвращения такой си­туации - различные URL для страниц, когда пользователь зарегистри­рован в системе (что может сделать расширение “realurl”).

Другой путь разрешения этой проблемы — использование этого пара­метра в комбинации с разрешением и запретом регистрации в различ­ных частях сайта. В записи страниц (вкладка "доступ", параметр "ре­жим входа в систему") можно отключить регистрацию внешних поль­зователей для ветви дерева страниц. Так как регистрация на многих сайтах требуется лишь для некоторых страниц в дереве, отключение возможности регистрации на остальных страницах упростит использо­вание заголовков управления кешем в комбинации с регистрацией; заголовки для кеша будут посылаться, когда регистрация пользова­телей отключена и ни в коем случае не посылаются при дозволенной регистрации! При этом ситуация с одинаковым URL при регистрации возникать просто не будет.

additionalHeaders
Строки, разделенные знаком "|"
Свойство можно использовать для указания расширенных заголовков HTTP. Каждый заголовок отделяется вертикальной чертой "|".

Примеры:
Content-type: text/vnd.wap.wml
(будет отослан заголовок содержимого для WAP-сайта).

Content-type: image/gif | Expires: Mon, 25 Jul 2011 05:00:00 GMT
( будет отослан заголовок содержимого для файла GIF и заголовок Expires).

Location: www.typo3.com
(перенаправление страницы на www.typo3.com)

По умолчанию TYPO3 отсылает заголовки "Content-Type" в кодировке по умол­чанию, если не отключено через config.disableCharsetHeader (см. выше). Затем отсылаются кешированные заголовки, если настроено (см. выше). Затем настает очередь расширенных заголовков, плюс финальный заголовок "Content-Length", если включено (см. ниже).

enableContentLengthHeader
boolean
Если установлено, посылается заголовок "content-length: [bytes of content]".

Если на странице обнаружен объект PHP_SCRIPT_EXT, или если за­регистрирован внутренний пользователь, этот параметр отключается. Причина в том, что величина содержимого этих объектов не может быть включена в content-length, а некоторые браузеры обрезают доку­мент до обозначенной длины.

doctype
string
Если установлено, то будет сформировано объявление типа документа (и вводная часть XML). Значение может быть либо полным doctype или одним из следующих ключевых слов:

"xhtml_trans" для XHTML 1.0 переходный тип документа.
"xhtml_frames" для XHTML 1.0 тип документа с набором фреймов.
"xhtml_strict" для XHTML 1.0 строгий тип документа doctype.
"xhtml_basic" для XHTML основной тип документа.
"xhtml_11" для XHTML 1.1 типа документа.
"xhtml+rdfa_10" для XHTML+RDFa 1.0 типа документа.
"xhtml_2" для XHTML 2 типа документа.
"html5" для HTML5 типа документа.
"none" БЕЗ типа документа вообще.

Замечание: В TYPO3 4.4 ключевое слово для HTML5  – "html_5". Это написание устарело начиная с TYPO3 4.5.

Помните, что ключевые слова заставляют TYPO3 изменить способ формирования некоторых тегов XHTML для соответствия стандартам XML. Если установлен строгий тип документа, то нужно также устано­вить config.xhtmlDoctype (см. далее).

За детальной информацией по эффектам в теге html обратитесь к "config.htmlTag_setParams" и "config.htmlTag_langKey".

По умолча­нию используется переходный HTML 4 тип документа:

<!DOCTYPE html
        PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

doctypeSwitch
boolean / string
Если установлено, порядок <?xml...> и <!DOCTYPE...> будет изменен. Это необходимо для MSIE для соответствия стандартам XHTML.

Что происходит:
По умолчанию TYPO3 выводит XML/DOCTYPE в соответствии со стан­дартами XHTML. Тем не менее, браузеры, вроде MSIE, будут работать в режиме совместимости, если теги <?xml> и <DOCTYPE> расположе­ны в обратном порядке. И это прервет проверку правильности CSS... 
Посредством этого пара­метра, дизайнеры могут определиться в своих желаниях.

Если нужно проверить режим совместимости своего браузера, то сде­лать это можно при помощи простого JavaScript, который может быть вставлен на страницу TYPO3, например так:

page.headerData.1 = TEXT
page.headerData.1.value = <script>alert(document.compatMode);</script>

Если браузер правильно определит DOCTYPE, то отобразится “CSS1Compat”.
Если же режим совместимости не будет соблюдаться, будут получены другие сообщения. Например MSIE выведет “BackCompat” - это значит, что он работает в режиме совместимости, имитируя старые движки.

xhtmlDoctype
string
Установка типа документа формируемых страниц для версии XHTML.

Если установлена строка config.doctype, то config.xhtmlDoctype должен быть установлен на одно из этих ключевых слов:

"xhtml_trans" для XHTML 1.0 переходный тип документа.
"xhtml_frames" для XHTML 1.0 тип документа с набором фреймов.
"xhtml_strict" для XHTML 1.0 строгий тип документа doctype.
"xhtml_basic" для XHTML основной тип документа.
"xhtml_11" для XHTML 1.1 типа документа.
"xhtml_2" для XHTML 2 типа документа.

Это пример использования MathML 2.0 в документе XHTML 1.1:

config.doctype (
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
"http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
)
config.xhtmlDoctype = xhtml_11

По умолчанию:
то же, что и config.doctype, если использует­ся ключевое сло­во.

xmlprologue
string
Если пусто (не установлено), то по умолчанию используется вводная часть XML 1.0, если тип документа установлен на известные ключевые слова (например xhtml_11):

<?xml version="1.0" encoding="[config.renderCharset]">

Если установлено на одно из ключевых слов, то будет использована стандартная вводная часть:
“xml_10” XML 1.0 вводная часть (выше)
“xml_11” XML 1.1  вводная часть

Если установлено "none", то по умолчанию вводная часть XML не ис­пользуется.
Любые другие строки используются сами по себе в качестве вводной части XML.

htmlTag_setParams
string
Установка атрибутов для тега <html> страницы. Если "config.doctype" установлен на ключевое слова с XHTML, то некоторые атрибуты уже установлены. Это свойство позволяет переназначить любые предуста­новленные свойства на необходимые.

Особенность: если установить "none", то не атрибуты не будут уста­новлены вообще.

Пример:
config.htmlTag_setParams =  xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"

namespaces
массив строк
Это свойство дает возможность добавить область имен xml (namespaces, xmlns) в тег <html>. Это особенно полезно при добавлении RDFa или микроформатов в свой html.

Пример:
config.namespaces.dc = http://purl.org/dc/elements/1.1/
config.namespaces.foaf = http://xmlns.com/foaf/0.1/

Результатом такой настройки будет тег <html> вроде:

<html xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:foaf="http://xmlns.com/foaf/0.1/">

htmlTag_langKey
string
Позволяет установить значение языка для атрибутов "xml:lang" и "lang" в теге <html> (при использовании "config.doctype = xhtml*").

Значение должно соответствовать формату, определенному в IETF RFC 3066

Пример:
config.htmlTag_langKey = en-US
en
htmlTag_dir
string
Установка направления написания для всего документа (полезно для отображения арабского, еврейского языка).

В основном используется как значение атрибута "dir" тега <html>.

Значения:
rtl = с права налево (арабский / еврейский)
ltr = с лева направо (по умолчанию для всех языков)

Пример:
config.htmlTag_dir = rtl

disableImgBorderAttr
boolean
Возвращает атрибут 'border' для тега <img>, только если doctype не xhtml_strict, xhtml_11 или xhtml_2, либо если не установлен параметр настроек 'disableImgBorderAttr'.

ATagParams
параметры <A>
Дополнительные параметры для всех ссылок в TYPO3 (за исключени­ем ссылок в меню)

Пример:
Для размытия ссылок, вставьте:
onFocus="blurLink(this)"

setJS_openPic
boolean
Если включено, принудительно включается JavaScript функция openPic/

setJS_mouseOver
boolean
Если включено, принудительно включаются JavaScript функции over() и out().

removeDefaultJS
boolean / string
Если установлено, JavaScript в заголовке по умолчанию будет удален.
JavaScript по умолчанию — это функция blurLink и переменные опре­деления браузера.

Особый случай: если используется значение "external", то JavaScript по умолчанию записывается во временный файл и включа­ется из этого файла. Смотрите "" далее.

Зависит от режима совместимости (см. Сервис управле­ния>Установка>Update wizard):
compatibility mode < 4.0:   0
compatibility mode >= 4.0:   1

Примеры:
config.removeDefaultJS = external
config.removeDefaultJS = 1

minifyJS
boolean
Если установлено inline или externalized (см. removeDefaultJS выше) JavaScript будет минимизирован. Минификация заключается в удале­нии всех пробелов, при этом страницы загружаются быстрее. Вместе с removeDefaultJS = external это должно сократить объем сайта.

В зависимости от режима совместимости (см. Сервис управле­ния>Установка>Update wizard):
compatibility mode < 4.0:   0
compatibility mode >= 4.0:   1

Пример:
config.minifyJS = 1

Замечание: JavaScript во внешних файлах внешнего интерфейса будет минимизирован только если обработчик компрессии зарегистри­рован через $GLOBALS['TYPO3_CONF_VARS']['FE']['jsCompressHandler']. 

Пример:
$GLOBALS['TYPO3_CONF_VARS']['FE']['jsCompressHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_jsCompressHandler.php:tx_myext_jsCompressHandler->minifyJs';

minifyCSS
boolean
Параметр включает минимизацию CSS.

Пример:
config.minifyCSS = 1

Замечание: CSS во внешних файлах внешнего интерфейса будет минимизирован только если обработчик компрессии зарегистри­рован через $GLOBALS['TYPO3_CONF_VARS']['FE']['cssCompressHandler']. 

Пример:
$GLOBALS['TYPO3_CONF_VARS']['FE']['cssCompressHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_cssCompressHandler.php:tx_myext_cssCompressHandler->minifyCss';

concatenateJsAndCss
boolean
Настройка config.concatenateJsAndCss объединяет JS и CSS файлы внешнего интерфейса.

Пример:
config.concatenateJsAndCss = 1

Замечание: нет обработчика объединения по умолча­нию. Можно указать собственный обработчик, зарегистрировав его через $GLOBALS['TYPO3_CONF_VARS']['FE']['concatenateHandler']. 

Пример:
$GLOBALS['TYPO3_CONF_VARS']['FE']['concatenateHandler'] = t3lib_extMgm::extPath($_EXTKEY) . 'Classes/class.tx_myext_concatenateHandler.php:tx_myext_concatenateHandler->concatenateFiles';
0
inlineStyle2TempFile
boolean
Если установлено, встроенные стили управления ядра TYPO3 записы­ваются в файл,  typo3temp/stylesheet_[hashstring].css, а заголовок со­держит лишь ссылку на таблицу стилей.
Хеш файла зависит исключительно от содержимого стилей.

Зависит от режима совместимости (см. Сервис управле­ния>Установка>Update wizard):
compatibility mode < 4.0:   0
compatibility mode >= 4.0:   1

Пример:
config.inlineStyle2TempFile = 1

meaningfulTempFilePrefix
integer
Если > 0, то TYPO3 попытается создать значащий префикс заданной длины для временных файлов изображений.
Работает с файлами  GIFBUILDER (используя содержимое из объектов GIFBUILDER TEXT в качестве основы для префикса), меню (берется название элемента меню) и масштаби­рованными изображениями (на основе оригинального назва­ния).

ftu
boolean
Если установлено, вставляется "&ftu=...." идентификатор GET-восста­новления.
"&ftu=[hash]" всегда вставляется в ссылки первой посещенной поль­зователем страницы. Если при следующем обращении оказывается, что пользователем разрешены cookies, эта переменная более не уста­навливается, вместо этого срабатывают cookies. Если cookies не уста­новлены, "ftu" остается установленной для все ссылок сайта, поэтому возможно отслеживать перемещения пользователя.

Этот параметр не должен быть установлен, если на Ваш сайт заходят пауки, вроде Teleport!
Не нужно устанавливать этот параметр, если нужно, чтобы поисковые движки проиндексировали Ваш сайт (вместе с па­раметром simulateStaticDocuments!)

Также можно пропустить эту возможность, если уверены, что пользо­ватели сайта будут использовать cookies.
 "ftu" означает fe_typo_user ("fe" это "внешний интерфейс").
false
mainScript
string
Это позволяет определить альтернативный "mainScript", т.е. документ ожидаемый TYPO3, как документ по умолчанию. Это используется в тегах form и других местах, где TYPO3 должен ссылаться непосред­ственно на основной сценарий приложения.
index.php
pageGenScript
resource
Альтернативный сценарий формирования страниц для приложений, использующих index_ts.php для инициализации, кеширования, стати­стики и т.п. Этот сценарий включается в глобальное пространство index_ts.php-script, поэтому сюда возможно включать библиотеки. Для библиотек всегда используйте include_once.
Помните, что ничего не должно выводиться из такого включенного сценария. Все содержи­мое должно устанавливаться в $TSFE->content. Взгляните на typo3/sysext/cms/tslib/pagegen.php

ЗАМЕЧАНИЕ: этот параметр игнорируется, если  в localconf.php установлено

$TYPO3_CONF_VARS['FE']['noPHPscriptInclude'] = 1;
typo3/sysext/cms/tslib/pagegen.php
debug
boolean
Если установлено, то выво­диться отладочная информация в коде TypoScript. На данный момент применяется лишь для объектов меню.

message_page_is_being_generated
string
Альтернативное HTML сообщение, появляющееся при формировании страницы.
Обычно, после формирования страницы, ее временная копия сохраня­ется в буферной таблице на 30 секунд.

Возможно использовать ключевые слова, заменяющиеся соответствую­щими значениями. Возможные ключевые слова: ###TITLE###, ###REQUEST_URI###

message_preview
string
Альтернативное сообщение в HTML, появляющееся при активации функции предпросмотра!

message_preview_workspace
string 
Альтернативное сообщение в HTML, появляющееся при активации функции предпросмотра в черновом рабочем пространстве. Можно ис­пользовать sprintf() метку для названия пространства (первое) и но­мер (второе).

Примеры:
config.message_preview_workspace = <div class="previewbox"> Выво­диться пространство с названием "%s" (number %s)!</div>
config.message_preview_workspace = <div class="previewbox"> Номер пространства %2$s название "%1$s"!</div>

disablePreviewNotification
boolean
Полное отключение блока сообщений о предвари­тельном просмотре.
0
locale_all
string
PHP: setlocale("LC_ALL", [значение]);
примеры значений: deutsch, de_DE, danish, portuguese, spanish, french, norwegian, italian. За остальными значениям обратитесь на www.php.net. То же в linux, ищите в at /usr/share/locale/.

TSFE->localeCharset разумно установить на строку кодировки для соот­ветствующего региона. Это используется в stdWrap.strftime для преоб­разования локальных строк в renderCharset внешнего интерфейса.

Пример:
Это сформирует данные из stdWrap/strftime так, как принято в Дании:
locale_all = danish
locale_all = da_DK

sword_standAlone
boolean
Используется в parseFunc-подстановки искомых слов (sword):
Если установлено, слова ДОЛЖНЫ быть окружены пробелами для раз­метки.

sword_noMixedCase
boolean
Используется в parseFunc-подстановки искомых слов (sword):
Если установлено, слова ДОЛЖНЫ быть точно в том же регистре, как и искомое слово.

intTarget
target
Внутренняя цель по умолчанию. Используется в typolink, если цель не установлена.

extTarget
target
Внешняя цель по умолчанию. Используется в typolink, если extTarget не установлена.
_top
fileTarget
target
Цель для ссылок на файлы по умолчанию. Используется в typolink, если fileTarget не установлена.

spamProtectEmailAddresses
"ascii" /
-10 to 10
Если установлено, то адреса email в typolink будут зашифрованы от спама, и боты не смогут их определить.

Если установить число в качестве значения, то шифрование осуще­ствляется простым смещением кодов символов. Если установить зна­чение, как "-2", то все символы изменят свой ASCII код на "-2". Для осуществления этого, к каждой странице добавляется маленький JavaScript код!
(Рекомендуется устанавливать это значение в диапазоне от -5 до 1, так как установка значения >= 2 означает преобразование “z” в “|”, которое является специальным символом в синтаксисе TYPO3 и может привести к ошибочкам)

Альтернативно, возможно установить как ключ "ascii". При этом каж­дый символ в адресе "mailto:" будет переведен в Unicode HTML 
примечание. Взгляните на пример, чтобы понять, как это работает.

Пример:
mailto:a@b.c будет преобразовано в
mailto:&#97;&#64;&#98;&#46;&#99;
Большое преимущество этого метода то, что не требуется JavaScript!

spamProtectEmailAddresses_atSubst
string
Метка, подставляемая вместо символа (@).
(at)
spamProtectEmailAddresses_lastDotSubst
string
Метка, подставляемая вместо последней точки email адресах.
Пример: (dot)
По умолчанию: . ( <= обычная точка)
forceTypeValue
int
Принудительное значение &type для всех ссылок, формируемых TYPO3 (за исключением тех, которые локально переназначены значе­ниями forceTypeValue).
Полезно при использовании шаблона с определенным содержимым, скажем &type=95, но при этом цель не должна быть затронута. При этом цели остаются пустыми, а значение типа вводится по желанию.

frameReloadIfNotInFrameset
boolean
Если установлено, то текущая страница проверяется, не существует ли для названия объекта страницы (например “page” или “frameset”) родительского объекта — “родитель.[название]” (например “parent.page”), и, если нет, страница загружается в top frame. Это страховка от того, чтобы ссылки из поисковых машин, указывающие на содержимое фреймов, загружали весь набор фреймов.
Работает лишь со значениями type отличных от нуля.

jumpurl_enable
boolean
JumpUrl — понятие, когда внешние ссылки перенаправляются из сценария index_ts.php, который сначала регистрирует URL. Эта воз­можность интересна лишь при использовании “config.sys_stat”.
0
jumpurl_mailto_disable
boolean
Отключение использования jumpUrl для ссылок на email-адреса.
0
compensateFieldWidth
double
Это значение в виде числа с плавающей точкой используется в FORMS cObject для компенсации длины текстового поля формы и полей вво­да.
Параметр полезен, если установлен параметр для страницы "smallFormFields". В этом случае Netscape формирует немного более длинные поля для форм, чем IE. Если нужно, чтобы оба браузера отображали поля форм одинакового размера, используйте значение, примерно "0.6" для браузера netscape.

Пример:
[browser = netscape]
  config.compensateFieldWidth = 0.6
[global]

Этот параметр может быть переназначен в FORMS-cObject.

includeLibrary
resource
Включение файла PHP.

incT3Lib_htmlmail 
boolean
Включение t3lib/class.t3lib_htmlmail.php.

lockFilePath
string
Используется для блокировки путей "внутри" данного пути.
Используется в "filelist" из stdWrap
fileadmin/
noScaleUp
boolean
Обычно изображения масштабируются до размера, определенного че­рез TypoScript. При этом маленькие изображения принудительно уве­личиваются до большего размера, что не всегда хорошо.
Если установлено это свойство, изображения не будут увеличиваться. Этот параметр очищает переменную $this->mayScaleUp класса t3lib_stdgraphics (зачастую "gifbuilder").

USERNAME_substToken
string
Маркер, использующийся на странице для замены именем текущего пользователя ЕСЛИ он зарегистрировался! Если он не зарегистриро­вался, замены не происходит.
<!--###USERNAME###-->
USERUID_substToken
string
Маркер, использующийся на странице для замены UID текущего поль­зователя ЕСЛИ он зарегистрировался! Если он не зарегистрировался, замены не происходит.
Для этого параметра нет значения по умолчанию и замена происходит только если это значение определить.

cache_period
int, seconds
Количество секунд, в течение которых страница хранится в кеше.
Это значение переназначается значением, установленным для записи страницы (поле="cache_timeout"), если оно больше нуля.
86400 (=24ч)
cache_clearAtMidnight
boolean
Установка этого параметра приводит к обновлению кеша каждую пол­ночь.
false
no_cache
boolean
Если это истина, то страница не кешируется. Если ложь, то игнориру­ется. Другие параметры могут установить его в истину по другим при­чинам.
-
disableAllHeaderCode
boolean
Если установлено, то ни один из параметров объекта PAGE не обраба­тывается и содержимым страницы станет результирующий массив cObject (1,2,3,4...) объекта PAGE. Это значит, что результирующий cObject будет включать все из <HTML> .... </HTML> тега!!!
Используйте эту возможность в шаблонах, представляющих отличные от HTML типы содержимого. Это могут быть изображения или WAP-страницы!
false
disablePageExternalUrl
boolean
Если установлено, то для страниц с типом документа “External Url” не будут включены jumpUrl в TSFE. Это поможет со внешними url, кото­рые открываются внутри набора фреймов.

stat
boolean
Включение журналирования статистики для всего.
true
stat_typeNumList
int/list
Список типов страниц, которые должны регистрироваться в статисти­ческой таблице, sys_stat.
Если типы не перечислены, регистрируются все типы.
По умолчанию "0,1", что обычно регистрирует все посещения в набо­ре фреймов и посещения страниц с содержимым. Конечно, это зави­сит от дизайна шаблона.
0,1
stat_excludeBEuserHits
boolean
Если установлено, посещение страницы не регистрируется при реги­страции пользователя в TYPO3.
false
stat_excludeIPList
список строк
Если REMOTE_ADDR находится в списке IP-адресов, он также не реги­стрируется.
Можно использовать шаблон, например “192.168.1.*”

stat_mysql
boolean
Включение регистрации в таблицу MySQL sys_stat.
false
stat_apache
boolean
Включение регистрации в файл "stat_apache_logfile"
false
stat_apache_logfile
filename
Определение название файла журнала, куда TYPO3 записывает стати­стику в стиле Apache. Расположение директории определяется в $TYPO3_CONF_VARS["FE"]["logfile_dir"], она должна существовать и быть открытой для записи. Путь может быть относительным (к PATH_site) или абсолютным, но, в любом случае, он должен находить­ся внутри дозволенных путей для TYPO3 (для абсолютного пути это значит, что должно быть внутри переменной “lockRootPath” из $TYPO3_CONF_VARS).

Также в названиях файлов возможно использовать маркеры времени, как они описаны в функции PHP strftime(). Это обеспечит естествен­ный оборот файлов статистики.

Пример:
config.stat_apache_logfile = typo3_%Y%m%d.log

Создается ежедневный файл статистики (напр. typo3_20060321.log).

stat_apache_pagenames
string
"pagename" смоделированная для apache.
По умолчанию:    "[path][title]--[uid].html"
Коды:
[title] = вставляет заголовок, без спецсимволов и урезанный до 30 символов.
[uid] = id
[alias] = любой псевдоним
[type] = тип (typeNum)
[path] = путь к странице
[request_uri] = вставляет серверное значение REQUEST_URI (полезно, например для RealUrl)

stat_apache_notExtended
boolean
Если истина, то файл статистики НЕ записывается в расширенном формате Apache.

stat_apache_noHost
boolean
Если истина, HTTP_HOST, если доступна, НЕ вставляется вместо IP-ад­реса.

stat_apache_niceTitle
boolean / string
Если установлено, URL будет переведен из renderCharset в ASCII (например ä => ae, à => a, &#945; "alpha" => a), что делает хорошо читаемые заголовки страниц в журнале. Все не ASCII символы, кото­рые не могут быть преобразованы заменяются на подчеркивания.

Если установлено в “utf-8”, заголовки страниц будут преобразованы в  UTF-8, что в результате даст даже лучший результат, только если про­грамма анализа статистики поддерживает эту кодировку.

stat_apache_noRoot
boolean
Если установлено, корневая часть (уровень 0) пути будет удалена. На­звания становятся короче, если имеется избыточная часть, вроде "дом" или "мой сайт".

stat_titleLen
int 1-100
Длина названий страниц в пути, записываемом в журнал/базу данных.
20
stat_pageLen
int 1-100
Длина названия страниц (в конце пути) записываемом в журнал/базу данных.
30
simulateStaticDocuments
boolean /
string
Если установлено, TYPO3 делает ссылки не так как обычно. Может ис­пользоваться с Apache компилированном с mod_rewrite и на­стройками в httpd.conf для использования этого в файлах ".htaccess".
Включите это в файл .htaccess:
RewriteEngine On
RewriteRule   ^[^/]*\.html$  index.php

Это значит, что любые "*.html" документы должны быть обработаны index.php. 
Если это так, TYPO3 будет интерпретировать url html документа так:
	[title].[id].[type].html
Заголовок не обязателен и полезен лишь для файла журнала apache. Можно не использовать и [title], и [type], но если заголовок присут­ствует, то должен быть и тип!.

Пример:
TYPO3 интерпретирует это как страницу с uid=23 и type=1 :
Startpage.23.1.html

TYPO3 интерпретирует это как страницу с alias = "start" и type ноль (по умолчанию):
start.html

Альтернативный параметр (PATH_INFO):
Вместо использования модуля rewrite в apache (например в Windows!) возможно использовать переменную PATH_INFO из PHP.
Это очень просто. Просто установите simulateStaticDocuments равным “PATH_INFO” и все заработает!

Дополнительно: смотрите далее, .absRefPrefix

Пример (вставьте в поле Setup в вашем шаблоне):
config.simulateStaticDocuments = PATH_INFO
По умолчанию определяется параметр­ом на­строек в localconf.php. 
$TYPO3_CONF_VARS["FE"]["simulateStaticDocuments"] = 1;
затрагивает все сайты в базе данных.
Также возможно установить это значение к стро­ке   “PATH_INFO”
simulateStaticDocuments_addTitle
int
Если не ноль, TYPO3 формирует url с названиями, обрезанными до первых [simulateStaticDocuments_addTitle] количество символов.

Пример:
Startpage.23.1.html
вместо по умол­чанию, "23.1.html", без заголовка.


simulateStaticDocuments_noTypeIfNoTitle
boolean
Если установлено, то значение type не устанавливается в моделируе­мом названии файла, если значение type равно нулю. Тем не менее, название файла должно быть без заголовка. 

Пример:
“Startpage.23.0.html” останется “Startpage.23.0.html”
“23.0.html” станет “23.html” (то же, что и было, но без нуля)
“23.1.html” останется “23.1.html”

simulateStaticDocuments_replacementChar
string
Разделитель слов для URL сформированных через simulateStaticDocuments. Если установлено на дефис, этот параметр позволяет поисковым движкам индексировать ключевые слова в URL. До TYPO3 4.0 этот символ был жестко закодирован на подчеркивание.

В зависимости от режима совместимости (см. Сервис управле­ния>Установка>Update wizard):
compatibility mode < 4.0:   подчеркивание “_”
compatibility mode >= 4.0:   дефис “-”

simulateStaticDocuments_dontRedirectPathInfoError
boolean
Зависит от режима PATH_INFO:
Когда страница запрашивается методом “PATH_INFO”, он должен быть настроен для правильной работы. Если PATH_INFO не настроен, сценарий index_ts.php отсылает заголовок расположения правильной страницы. В любом случае, если Вы предпочитаете сообщения об ошибках, просто установите этот параметр.

simulateStaticDocuments_pEnc
string
Позволяет закодировать дополнительные параметры в моделируемом названии файла.

Пример: 
Имеется новостное расшире­ние. Url главной страницы "Page_1.228.0.html", но при щелчке по элементу новостей, url должен быть "Page_1.228.0.html?&tx_mininews_pi1[showUid]=2&cHash=b8d239c224".
Кроме того, этот URL не должен индексироваться сторонними поис­ковыми механизмами, так как имеется строка запроса (все после зна­ка “?”). Это свойство позволяет решить эту проблему через добавле­ние параметров:

Установить значение “base64”:
При этом название файла будет преобразовано так: “Page_1.228+B6JnR4X21pbmluZXdzX3BpMVtzaG93VWlkXT0yJmNIYXNoPWI4ZDIzOWMyMjQ_.0.html”. Строка запроса была просто закодирована в base64 (и что-то еще...) и добавлена к названию HTML файла (те­перь внешние поисковые системы обнаружат его!). По настоящему здорово то, что в названии файла содержатся параметры. Расплата за это —  очень длинное название файла.

Установить значение “md5”:
При этом название файла будет преобразовано так:
“Page_1.228+M57867201f4a.0.html”. Здесь название короче! При этом все параметры хешированы в 10-символьную строку, добавленную в название файла. В то же время, элемент был добавлен в таблицу кеша в базу данных. Поэтому, когда запрос на это имя файла будет отправлен во внешнем интерфейсе, в базе данных будет найдена ДЕЙСТВИТЕЛЬНАЯ строка параметров! И главное — название файла осталось довольно короткой (в отличие от метода base64). Недостаток в том, что ЕСЛИ очистить таблицу кеша базы данных, эти URL не сра­ботают, пока страница с ссылками не будет снова сформирована (и в базу данных будет снова занесен список параметров).

ЗАМЕЧАНИЕ: начиная с TYPO3 3.6.0 кодирование работает лишь  с параметрами, вручную занесенными в список через .simulateStaticDocuments_pEnc_onlyP (см. следующее) или с теми, ко­торые могут быть разрешены различ­ными расширениями. Это позво­ляет уменьшить риск при объединении многих параметров.

simulateStaticDocuments_pEnc_onlyP
string
Список переменных, которые могут быть частью виртуального назва­ния файла simulate_static_document, закодированного с помощью md5/base64 (см. свойство выше).

Пример:
simulateStaticDocuments_pEnc_onlyP = tx_maillisttofaq_pi1[pointer], L, print

-> здесь включен параметр "pointer" для расширения "maillisttofaq" (в дополнение к любым переменным, установленным самим расширение­м), а также и параметры "L" (возможно выбор языка) и "print" (воз­можно версия для печати).

content_from_pid_allowOutsideDomain
boolean
Возможность “Показать содержимое этой страницы” позволяет отоб­разить содержи­мое страниц лишь текущего домена. Включение этого параметра позволяет показывать содержимое любой страницы из де­рева страниц!

absRefPrefix
string
Если установлено это значение, то все относительные ссылки в TypoScript будут содержать эту строку, как префикс. Используется для преобразования относительных путей в абсолютные.

Замечание: эти значения автоматически устанавливаются на на­звание директории, содержащей сценарий index.php, если simulateStaticDocuments установлен на “PATH_INFO”.
Если вы работаете на сервере, к которому есть и внутренний и внеш­ний доступ, то полезно установить absRefPrefix на url и путь этого сайта, например http://www.typo3.com/. Если это не сделать, то име­ется риск возвращения страниц из кеша внутренней сети, при этом изображения и ссылки будут недоступны извне.

pageRendererTemplateFile
string
Установка шаблона для класса, формирующего страницу (t3lib_PageRenderer).

Пример:
pageRendererTemplateFile = fileadmin/test_pagerender.html

noPageTitle
integer
Если нужно лишь название сайта (из записи шаблона) в теге <title>, установите здесь 1. При значении 2 тег <title> совсем не выводится.
Обратите внимание, что этот тег нужен для совместимости с XHTML, поэтому выключить его можно только если он формируется вручную.
0
pageTitleFirst
boolean
По умолчанию TYPO3 выводит тег title в формате "сайт: заголовок страницы". 
Если установлено (и выводится заголовок страницы), то заголовок страницы будут выво­дится ПЕРЕД заголовком шаблона. Это будет выглядеть так: "заголовок страницы: сайт". 
0
titleTagFunction 
название функции
Передает содержи­мое тега <title> в эту функцию. Никакие параметры typoScript не передаются.

moveJsFromHeaderToFooter
boolean
Если установлено, то весь Javascript (включенный и содержащийся в коде) перемещается вниз документа HTML, после содержимого и перед закрывающим тегом body.

headerComment 
string
Содержимое добавляется перед комментарием “TYPO3 Content Management Framework” в разделе <head> страницы. Используется для вставки примечаний, вроде “Сделано в моем агентстве” .

language
string
Языковой ключ. Дополнительную информацию см.
Выбор между:
English  (default) = [empty]
Danish = dk
German = de
Norwegian = no
Italian = it
и т.п... 

Значение должно соответствовать ключу, используемому для языка внутреннего интерфейса, если он есть. Смотрите в config_default.php или ищите официальные 2-байтовые ключи для нужных языков на TYPO3.org. Помните, что выбор официальных ключей важен, если  нужно использовать корректные языковые метки из "locallang" файлов.
Если нужный язык пока еще не является системным языком в TYPO3 можно использовать собственную искусственную строку и брать для нее значения через шаблон TypoScript, в котором свойство “_LOCAL_LANG” в большинстве расши­рений служит для перезаписи / добавления значений меток. Используемые ключи нужно искать в locallang файлах используемых расши­рений.

language_alt
string
Если использует­ся “config.language” (выше), здесь возможно устано­вить ключ другого языка, используемого для меток, если метки для основного языка не найдены. Например, бразильский сайт на порту­гальском может иметь “pt” в качестве альтер­нативного языка, при этом метки будут показаны на португальском, если они не будут найдены на бразильском наречии португальского языка. Эта возмож­ность важна, если один из языков не до конца переведен, но имеется перевод на другом, сходном языке.

sys_language_uid
int
Это значение указывает на uid записи из таблицы “sys_language” и, если установлено, то различные части кода, отображаемого во внеш­нем интер­фейсе, будут выбирать записи, связанные с этим языком. Смотрите ->SELECT.

Кроме того, значение зависит от того, могут ли быть найдены записи страницы на альтернативном языке. Если нет, значение по умолчанию будет нулевым (язык по умол­чанию), если значение “sys_language_mode” не установлено на что-то вроде “content_fallback”.

sys_language_mode
string
Настройка режимов обработки локализации.
Син­таксис "[ключ] ; [значение]".

Возможные ключи:

[default] – система ищет переводы страницы (в таблице “Alternative Page Language”) и, если не находит, возвращает для отображения язык по умолчанию.

content_fallback - [ рекомендуется ] система всегда будет работать с выбранным языком, даже если для страницы нет записей переводов. При этом меню и т.п. останутся переведенными. В любом случае, со­держимое на странице может быть выведено на другом языке, опре­деляемым значением этого ключа, например "content_fallback ; 1,0" для выведения не переведенного содержимо­го на языке  sys_language_uid 1, и если оно не представлено, то на языке по умол­чанию (0)

strict – система сообщит об ошибке, если запрашиваемый перевод не найден. Обычно это значит, что все страницы с серым фоном в моду­ле Веб>Инфо / Обзор локализации будут с ошибкой (другими слова­ми, они будут сброшены на язык по умол­чанию так или иначе)

ignore – система останется на выбранном языке, даже если страница не переведена и содержимое на выбранном языке недоступно, после чего эту ситуацию возможно обработать самостоятельно.

sys_language_overlay
boolean / keyword
Если установлено, записи из определенных таблиц, выбранных через CONTENT cObject используя установку “languageField” выберут язык по умолчанию (0) вместо любых языков, установленных в sys_language_uid / sys_language_mode. Дополнительно система будет искать перевод выбранных записей и перекрывать настроенные поля.
Для этого требуется, чтобы таблица была настроена с “languageField” и “transOrigPointerField” в разделе [ctrl] $TCA. Кроме того, исключение определенных полей может быть сделано через директиву “l10n_mode” в настройке полей $TCA.

Для управления внутренним интерфейсом требуется настройка моду­ля “Веб>Страница” для отображения соответствующих элемен­тов; то есть будет показан элемент по умол­чанию и рядом с ним любой найденный перевод. Эта настройка может быть сделана через Tsconfig страницы для раздела сайта, используя путь объекта “mod.web_layout.defLangBinding = 1”.

Ключ: 
hideNonTranslated : при использовании этого ключа, запись без перевода не будет показана. По умол­чанию запись без перевода отоб­ражается на языке по умол­чанию.

sys_language_softMergeIfNotBlank
string
Установка дополнительных полей “mergeIfNotBlank” из TypoScript.

Объяснение:
В TCA возможно настроить “l10n_mode”, модель локализации, для каждого поля. Два параметра отвечают за отображение содержимо­го во внешнем интер­фейсе; это “exclude” и “mergeIfNotBlank” (за деталя­ми обратитесь к документы “TYPO3 Core API”). Первый (“exclude”) означает, что поле найденное в переводе записи не будет перекры­вать значение записи поля по умолчанию. Второй (“mergeIfNotBlank”) значит, что оно будет перекрываться, только если имеется не пустое значение в переводе.
Так как практично установить поля “mergeIfNotBlank” для каждого сайта, этот параметр позво­ляет переназначить дополнительные поля из таблиц.

Синтаксис:
 [таблица]:[поле],  [таблица]:[поле],  [таблица]:[поле], ...

Пример:
config.sys_language_softMergeIfNotBlank = tt_content:image , tt_content:header

Эта настройка означает, что поля header и image элемента содержи­мого будут браться из перевода, только если в них содержится не пу­стое значение. Для поля image это очень практично, т.к. будет(ут) ис­пользоваться изображе­ние(я) из перевода по умолчанию если не вставлены другие изображения!

sys_language_softExclude
string
Установка дополнительного "exclude" флага l10n_mode в TCA для вы­вода во внешний интерфейс. Работает также, как sys_language_softMergeIfNotBlank (детали содержится там, синтаксис тот же!).

Свойства для полей, установленные этим свойством будут сброшены, если для тех же полей установлено "sys_language_softMergeIfNotBlank".

typolinkCheckRootline
boolean
Если установлено, то каждая “typolink” проверяется на связь со стра­ницей в корневой линии сайта.
Если связи нет, то TYPO3 ищет первую запись домена (без пере­направления) в этой корневой линии. 
Если найден (другой домен), то этот домен приставляется к ссылке и используется внешняя цель, а ссылка ведет на страницу с правиль­ным доменом.

typolinkEnableLinksAcrossDomains
boolean
Этот параметр включает создание ссылок между доменами, используя схему ссылок текущего домена.

Если этот параметр не установлен, то все междоменные ссылки будут формироваться так:
"http://domain.tld/index.php?id=12345" (где 12345 – id страницы). Если этот параметр включен и текущий сайт использует, например, simulateStatic, то ссылки будут формироваться так: "http://domain.tld/PageTitle.12345.html" (включая RTE ссылки). Для этого параметра требуется, чтобы домены, на которые ссылаются со страниц, имели те же настройки для:
- схемы ссылок (т.е. везде должны использоваться simulateStatic или RealURL или CoolURI но не их смесь)
- все домены имели идентичные параметры локализации (config.sys_language_XXX директивы) 
- все домены имели те же определенные языки

Это параметр подразумевает "config.typolinkCheckRootline=1", который включается автомати­чески. Установка параметра "config.TypolinkCheckRootline" в TS шаблоне не будет иметь эффекта.

Оговорка: должно быть понятно, что ссылка на другой домен формируется в контексте текущего домена. По­бочные эффекты этого не наблюдались на момент написания этой до­кументации, но они могут существовать. Если они будут найдены, до­кументация будет обновлена соответствую­щим образом.
0
typolinkLinkAccessRestrictedPages
integer (id страницы) / ключ "NONE"
Если установлено, то typolink, указываю­щие на страницы с запрещен­ным доступом останутся, даже если страница не будет доступна. Если значение этой страницы будет целым числом, то оно рассматривается как id страницы, на которую будет вести такая ссылка. 
Если значение “NONE” оригинальная ссылка на страницу будет сохра­нена, хотя она сгенерирует ситуацию страница-не-найдена (которая, конечно же, должна быть правильно обработана).

Смотрите также “showAccessRestrictedPages” для объектов меню (та же возмож­ность для меню).

Пример:
config.typolinkLinkAccessRestrictedPages = 29
config.typolinkLinkAccessRestrictedPages_addParams = &return_url=###RETURN_URL###&pageId=###PAGE_ID###

Создается ссылка на страницу id 29 и добавляются параметры GET с обратным URL и id оригинальной страницы.

typolinkLinkAccessRestrictedPages_addParams
string
Смотрите “typolinkLinkAccessRestrictedPages” выше.

notification_email_urlmode
string
Этот параметр позволяет обрабатывать URL в простых текстах email,  так чтобы длинные URL, длиной более 76 символов не обрезались. Этот параметр может быть либо пустым, либо “76”, либо “all”. 
Если строка пустая, все ссылки в простом тексте email  не затрагива­ются. 
Если установлено 76, то все ссылки длиннее 76 символов сохраняются в базе данных, а хеш в переменной GET ?RDCT=[md5/20] посылается вReinstated PHP_SCRIPT сценарий index.php, который ищет соответствующую ссылку в базе данных, получая заголовок местоположения (перенаправление). 
Если установлено “all”, тогда преобразуются ВСЕ “http://” ссылки в сообщении.

notification_email_encoding
string
Настройка кодировки обычных текстовых email (уведомлений). По умолчанию кодировка “quoted-printable”. Но установкой, например  “base64”, можно закодировать содержимо­е через base64.

Возможные значения:
base64
quoted-printable
8bit

notification_email_charset
string
Альтернативная кодировка для уведомительных сообщений.
ISO-8859-1
admPanel
boolean
Если установлено, внизу страниц появляется панель управления.

ЗАМЕЧАНИЕ: дополнительно панель должна быть включена для пользователя через TSconfig пользователя! Смотрите документацию по TSconfig относительно дополнительных свойств панели администрирования.

beLoginLinkIPList
[IP-номер]
Если установлено и REMOTE_ADDR соответствует списку IP-адресов (поддерживаются шаблоны, *), то ссылка на сценарий typo3/ login бу­дет перенаправлена на отображаемую страницу.

ЗАМЕЧАНИЕ: beLoginLinkIPList_login и/или beLoginLinkIPList_logout (см. далее) должны быть определены, если ссылка должна быть пока­зана!

beLoginLinkIPList_login
HTML
HTML код, заключаемый в ссылку на регистрацию в системе, смотрите 'beLoginLinkIPList'

Пример:
<hr /><b>АВТОРИЗАЦИЯ</b>

beLoginLinkIPList_logout
HTML
HTML код, заключаемый в ссылку выхода из системы, смотрите выше.

index_enable
boolean
Включение индексации кешируемых страниц.

index_externals
boolean
Если включено, внешние медиа, связанные со страницей, также ин­дексируются.

index_descrLgd
int
Здесь указывается, сколько символов сохранять в качестве описания индексированных страниц. Можно использовать для отображения ре­зультатов поиска.
200
index_metatags
boolean
Позволяет включить или выключить индексацию метатегов. По умол­чанию включено.
true
xhtml_cleaning
string
Попытка очистки выходного кода, сделать его совместимым с XHTML и немного уменьшить. ПОКА ЕЩЕ НЕ ЗАВЕРШЕНО, но можно предвари­тельно посмотреть, нужно ли это.

Что сделано к этому времени:
- все теги (img,br,hr) оканчиваются на "/>" - что-то еще?;
- элементы и атрибуты в нижнем регистре;
- все атрибуты в кавычках;
- добавление атрибута "alt" к тегам img, если их там не было.

Что пока НЕ сделано, согласно спецификации XHTML:
- Wellformedness: вложенность НЕ проверяется;
- использование атрибутов name/id не отслеживается.
- не позволена определенная вложенность элемен­тов. Интереснее, что <PRE> не может содержать img, big,small,sub,sup …;
- обертка сценариев и стилевых элемен­тов содержания в CDATA, или в качестве альтернативы, они должны быть преобразованы в литеры (entitites);
- настройки кодировок может поместить специальные требования в XML declaration/ meta-http-equiv. (C.9);
- UTF-8 кодировка фактически ожидается в XML!!!
- элементы стиля и названия атрибутов НЕ должны преобразовывать­ся в нижний регистр;
- амперсанды (и все остальные литеры (entities), как мне кажется) ДОЛЖНЫ быть преобразованы в коды символов! (&amps;). Это может означать дальнейшее преобразование содержимо­го вне тегов перед выводом страницы. Может быть связано с проблемой кодировки в це­лом.
- Не дозволены сокращения значений- нужно сделать следующее: selected="selected"

За деталями обратитесь к классу t3lib_parsehtml
Можно задействовать эту функцию со следующими значениями:

all = содержимое всегда обрабатывается перед сохранением в кеше; 
cached = обрабатываются только страницы, помещаемые в кеш;
output = только выводимый код перед его отображением.

prefixLocalAnchors
string keyword
Если установлен один из ключей, содержимое будет иметь локальные привязки для ссылок в виде путей для сценария. В основном это зна­чит, что <a href=”#”> будет преобразовано в <a href=”path/path/script?params#”>. Эта процедура необходима если тег <base> установлен на сценарий (например, если используется расши­рение “realurl” для понятных URL).

Ключи те же, что и в “xhtml_cleaning”, смотрите выше.

disablePrefixComment
boolean
Если установлено, свойство “prefixComment” в stdWrap отключено, тем самым предотвращается все объясняющие и потребляющие место комментарии в коде HTML.

baseURL
string
В заголовок документа прописывается тег <base>. Установите его значение на соответствующий URL, и добавьте в конце строки “/”.

Пример:
config.baseURL = http://typo3.org/sub_dir/

tx_[extension key with no underscores]_[*]
-
Место настройки для дополнений. Можно использовать, например, для расширения в случае необходимости настройки его через TypoScript, но это фактически ничего не отображает во внешнем интерфейсе (например, невозможно получить настройки в виде аргументов из внешнего интерфейса в процессе формирования).

Пример:
config.tx_realurl_enable = 1

[tsref:config/->CONFIG]
"CONSTANTS"
Свойство:
Тип данных:
Описание:
По умолчанию:
Массив...
string
Константы. 

Примеры:
.EMAIL = email@email.com
При этом, если parseFunc где либо будет настроена с constants=1, то все вхождения строки ###EMAIL### будут заменены текстом.
смотрите ->parseFunc

[tsref:constants]
"PAGE"
Страница описывается двумя основными значениями — "id" и "type". 
Страница описывается двумя основными значениями — "id" и "type". 
"Id" указание uid страницы (или псевдонима). Так ищется страница. 
"Type" определяет способ обработки страницы. В основном используется с фреймами. Набор фреймов обычно имеет type=0 (или он не установлен), а документы в фрейме должны быть определены другими типами, например type=1 для страницы с содержимым.
Вы должны изучить наборы фреймов для TYPO3 сайтов. Кроме того, изучите стандартные шаблоны для набора фреймов.
Хорошая привычка, использовать type=1 для основной страницы сайта с фреймами. Для сайтов без фреймов, обычно тип равен нулю.
Еще одна хорошая привычка - использование "page" в качестве названия объекта основного уровня (toplevel) для страницы содержимого на сайте.
Большая часть этого кода находится в сценарии PHP  typo3/sysext/cms/tslib/class.tslib_pagegen.php.
Свойство:
Тип данных:
Описание:
По умолчанию:
typeNum
int
Это typeId страницы. Значение по умолчанию – 0 для первого найденного объекта PAGE, но ДОЛЖНО быть определено и быть уникальным, если используется более одного такого объекта (повним­ательнее, если используются фреймы)!
0
1,2,3,4...
cObject


wrap
wrap
Обертка содержимо­го массива cObject.

stdWrap
->stdWrap
Обертки содержимого массива cObject с параметрами stdWrap.

bodyTagCObject
cObject
Значение по умол­чанию для bodytag переназначенное “.bodyTag”, если оно установлено.

bodyTag
<tag>
Тег body страницы.

Пример:
<body bgcolor="{$bgCol}">
<body bgcolor="#FFFFFF">
headTag
<tag>
Тег head, если нужна альтернатива.
<head>
bodyTagMargins
int
Отступы в теге body.

Свойство:
.useCSS = 1 (boolean) - – установит строку “BODY {margin: ...}” при объявлении стилей документа, для совместимости с XHTML.

Пример:
значение 4
добавит leftmargin="4" topmargin="4" marginwidth="4" marginheight="4"  в тег body.

bodyTagAdd
string
Содержимое, добавляемое в конец тега body.

bgImg
imgResource
Фоновое изображе­ние для страницы. Автоматически добавляется в тег body.

frameSet
->FRAMESET
Если здесь установить любое свойство, страница будет выво­дится в наборе фреймов.

meta
->META


shortcutIcon
resource
Favicon для страницы. Создайте ссылку на файл icon!
Браузеры, поддерживающие отображение favicons, показывают ее в адресной строке, в списке закладок рядом с названием сайта и на вкладках, рядом с названием страницы.

Примечание:
Это должен быть настоящий файл ".ico" (iconfile)

headerData
->CARRAY
Вставляет содержимое в раздел header. Это могут быть JavaScript, теги meta, ссылки на другие таблицы стилей. 
Вставляется после определений стилей.

footerData
->CARRAY
То же, что и headerData выше, за исключением того, что этот блок включается внизу страницы (прямо перед закрывающим тегом body).

config
->CONFIG
Настройка страницы. Значения переназначают те же значения в объекте основного уровня "config".

includeLibs
массив строк
Так возможно включить файлы php. То же самое, что делает "includeLibrary" в ->CONFIG, но так возможно включить несколько файлов. Эти файлы включаются после файла includeLibrary.

ЗАМЕЧАНИЕ:
Объект основного уровня "includeLibs" и сценарии, определенные в этом свойстве, добавляются друг за другом. Ключи сценария (значен­ие "массив строк", как ниже в "tx_myext") из этого свойства пе­резаписывают любые ключи сценариев из свойства объекта основ­ного уровня "includeLibs"!
Названия файлов сценариев имеют тип "resource".

Пример:
includeLibs.tx_myext = lib_filename.php


JavaScript:
javascriptLibs
массив строк
Так можно подключить библиотеки JavaScript, которые распространяются с ядром TYPO3.

javascriptLibs {
     # включить prototype
   Prototype = 1

     # включить Scriptaculous
   Scriptaculous = 1
     # добавление модулей dragdrop и controls в Scriptaculous
   Scriptaculous.modules = dragdrop,controls

     # включить ExtCore
   ExtCore = 1
     # включить файл отладки ExtCore(без сжатия)
   ExtCore.debug = 1

     # includes ExtJS
   ExtJs = 1
     # включить ext-all.css
   ExtJs.css = 1
     # включить тему по умол­чанию
   ExtJs.theme = 1
    # загрузка специальных адаптеров(jquery|prototype|yui)
   ExtJs.adapter = …
     # инициализация QuickTips
   ExtJs.quickTips = 1
     # включение файла отладки ExtJS(без сжатия)
   ExtJs.debug = 1

     # включить библиотеку SVG
   SVG = 1
     # включить файл отладки SVG
   SVG.debug = 1
     # принудительное формирование с флеш
   SVG.forceFlash = 1
}
Замечание: если сразу запрошены ExtCore и ExtJS, будет загружена лишь ExtJS. Это отразиться на всех установленных параметрах. Они затронут лишь ExtJS. 
Замечание: в TYPO3 4.5.2 и старше необходимо запрашивать что-то одно — ExtJS или ExtCore, но не вместе. Попытка их одновременной загрузки приведет к ошибкам. 

inlineLanguageLabel
массив строк
ExtJS specific, adds language labels to the page.

Пример:
inlineLanguageLabel {
   label1 = 123
   label2 = 456
}

Выведет следующий код:

TYPO3.lang = {"label1":"123","label2":"456"};

inlineSettings
массив строк
Относиться к ExtJS, на страницу добавляются языковые метки.

Пример:
page.inlineSettings {
   setting1 = Hello
   setting2 = GoOnTop
}

Выведет следующий код:

TYPO3.settings = {"TS":{"setting1":"Hello","setting2":"GoOnTop"}};

extOnReady
->CARRAY
Относиться к ExtJS, добавляется встроенный javascript, обернутый в Ext.onReady.ExtJS specific.

Пример:
page.extOnReady {
   10 = TEXT
   10.value = Ext.Msg.alert("TypoScript Message","Hello World!");
}

Выведет следующий код:

Ext.onReady(function() {Ext.Msg.alert("TypoScript Message","Hello World!"); });

includeJSlibs.[array]
resource
Добавление файлов JS библиотеки в заголовок страницы.

Определенный файл должен быть настоящим типом "resource", ина­че ничего не будет вставлено. Это значит, что на файлы нельзя ссылаться (например, через “http://...”), за исключением использования свойства “.external”.

Каждый файл имеет необязательные свойства:
.allWrap – обертка для всего тега, полезно для условных комментариев.
.external – если установлено, существование файла не проверяется. Полезно для включения внешних файлов.

Пример:
includeJSlibs.twitter = http://twitter.com/javascripts/blogger.js
includeJSlibs.twitter.external = 1

includeJSFooterlibs.[array]
resource
То же, что и includeJSlibs выше, за исключением того, что блок включается внизу страницы (прямо перед закрывающим тегом body).

includeJS.[array]
resource
Вставка одного или нескольких (Java)Scripts в тег <script>.

Определенный файл должен быть настоящим типом "resource", ина­че ничего не будет вставлено. Это значит, что на файлы нельзя ссылаться (например, через “http://...”), за исключением использования свойства “.external”.

Каждый файл имеет необязательные свойства:
.type - установка MIME типа сценария (по умолчанию: text/javascript)
.compressed – флаг. Используется внешними компрессорами, чтобы определить, был ли файл предварительно сжат.
.forceOnTop – флаг. Если установлен, то файл будет добавлен выше остальных.
.allWrap – обертка для всего тега, полезно для условных комментариев.
.external – если установлено, существование файла не проверяется. Полезно для включения внешних файлов.

Пример:
includeJS {
  file1 = fileadmin/helloworld.js
  file1.type = application/x-javascript
  file2 = javascript_uploaded_to_template*.js
}

includeJSFooter.[array]
resource
То же, что и includeJS выше, за исключением того, что блок включается внизу страницы (прямо перед закрывающим тегом body).

jsInline
->CARRAY
Использование cObjects для создания встроенного JavaScript.

Пример:
page.jsInline {
	10 = TEXT
	10.dataWrap = var pageId = {TSFE:id};	
}

Замечание:
через config.removeDefaultJS = external, inlineJS помещается во внешний файл.
Через config.minifyJS = 1, jsInline будет по возможности сокращен.

jsFooterInline
->CARRAY
То же, что и jsInline выше, за исключением того, что блок включается внизу страницы (прямо перед закрывающим тегом body).

inlineJS
->CARRAY
Включение Javascript в раздел header. Не используете теги script, так как они добавляются TYPO3.

Пример:
page.inlineJS.10 = TEXT
page.inlineJS.10.value = function a(val) { alert(val); }

Через config.removeDefaultJS = external, inlineJS перемещается во внешний файл.
Через config.minifyJS = 1, inlineJS будет по возможности сокращен.

Замечание: это устаревшая функция, которая была удалена в TYPO3 4.3. Вместо нее используйте jsInline instead.


Таблицы стилей CSS:
stylesheet
resource
Вставляет таблицу стилей в раздел <HEAD> страницы;
<link rel="stylesheet" href="[resource]">

includeCSS.[array]
resource
Вставка таблицы стилей (как и свойство .stylesheet), позво­ляет включить несколько таблиц стилей, введя названия файлов в мас­сив.

Определенные файлы должны иметь правильный тип "resource", иначе они не будут вставлены.

Каждый файл имеет  необязательные свойства:
.media – установка атрибута media тега <style>;
.title – установка заголовка тега <style>;
.alternate – если включено (boolean), атрибут rel будет "alternate stylesheet";
.import – если установлено (boolean), используется возможность @import для включения таблицы стилей, вместо <link>.
.allWrap – обертка всего тега, полезна для условных комментариев.
.external – если установлено, не делается проверки существования файла. Полезно для включения внешних файлов.

Пример:
includeCSS {
  file1 = fileadmin/mystylesheet1.css
  file2 = stylesheet_uploaded_to_template*.css
  file2.title = High contrast
  file2.media = print
  ie6Style = fileadmin/css/style3.css
  ie6Style.allWrap = <!--[if lte IE 7]>|<![endif]-->
  cooliris = http://www.cooliris.com/shared/
             resources/css/global.css
  cooliris.external = 1
}

cssInline
->CARRAY
Используется cObjects для создания встроенного CSS.

Пример:
cssInline {
    10 = TEXT
    10.value = h1 {margin:15px;}
    
    20 = TEXT
    20.value = h1 span {color: blue;}
}

CSS_inlineStyle
string
Значение просто передаваемое как встроенная css (встроенная в до­кумент css, заключенная в теги <style>).


Другое:
insertClassesFromRTE
boolean
Если установлено, классы для Rich Text Editor, настраиваемые в TSconfig страницы, вставляются в начало раздела Style, сразу по­сле настройки таблицы стилей.

.add_mainStyleOverrideDefs = [* / список тегов ] - будут добавлен­ы все настроенные теги “RTE.default. mainStyleOverride_add”.

Скоро может устареть. Наиболее вероятно, что RTE нужно будет на­страивать через таблицы стилей. Все еще в разработке...

noLinkUnderline
boolean
Отключение подчеркивания ссылок. Используются встроенные в до­кумент стили.

Устарело. Вместо этого используйте таблицы стилей.

hover
HTML-цвет
Цвет ссылок, когда мышка находится над ними! (только MSIE). Используются встроенные в документ стили.

Устарело. Вместо этого используйте таблицы стилей.

hoverStyle
string
Дополнительная информация по стилям для hover-цвета.

Пример:
page.hoverStyle = font: bold; text-decoration: none;

Устарело. Вместо этого используйте таблицы стилей.

smallFormFields
boolean
Выводит поля форм, типа текстовых, полей ввода, блоки выбора с текстом "verdana size 1". 
Используются встроенные в документ стили.

Совет:
Используйте вместе с параметр­ом настройки "compensateFieldWidth", установленным на "0.6" для браузера netscape для получения ма­леньких полей форм одинаковой шири­ны!

Устарело. Вместо этого используйте таблицы стилей.

adminPanelStyles
boolean
Будут включены стили CSS для панели управления.

[tsref:(page)]
"FE_DATA"
Свойство:
Тип данных:
Описание:
По умолчанию:
массив названий та­блиц
->FE_TABLE


[tsref:FEData]
"FE_TABLE"
Свойство:
Тип данных:
Описание:
По умолчанию:
default.[field]
string
Это свойство отвечает за свойства таблиц по умолчанию:

Пример:
Определение значений для новых записей. Они будут переназначены любыми подставленными вместо них значениями (если подстановка разрешена через "allowNew")
default {
  subject = This is the default subject value!
  hidden = 1
  parent = 0
}

allowNew.[field]
string
Это свойство отвечает за разрешение переназначения полей из внешне­го интерфейса.

Пример:
Здесь определено, что поле subject, требуется для внешнего интерфей­са, если значение не получено, в объект вставляется значение по умол­чанию (смотрите выше). 
С другой стороны, поле "hidden" не может быть изменено во внешнем интерфейсе. Оно получает значение из определения его по умол­чанию (смотрите выше). Установка для поля "0" (ноль) равнозначно не опреде­лению его в массиве.

allowNew {
  subject = 1
  hidden = 0
}

allowEdit.[field]
string
Тоже, что и выше ("allowNew"), но отвечает за то, что записывается при обновлении записи (а не новое представление).
Обратите внимание на свойство ниже!  ("overrideEdit")

overrideEdit.[field]
string
Работает подобно значению по умолчанию выше, но эти значения вставляются после отправки, вместо значений не прошедших обра­ботку. Это означает обратное значениям по умолчанию, перезаписывае­мым при отправке значениями, прошедшими проверку.

Пример:
Здесь overrideEdit служит для защиты при обновлении пользователем своей записи (если он ее "владелец") поле "hidden" будет установлено не зависимо ни от чего.

overrideEdit {
  hidden = 1
}

userIdColumn
string (field)
Это строка, указывающая на столбец записи, в который должен встав­ляться id текущего fe_user пользователя. Этот fe_user uid вставляется/обновляется и как "new", и как "edit"

autoInsertPID
boolean
Работает с новыми записями: автомати­чески вставляет PID страницы, на которой были отправлены данные. Все "pid" представленные из от­правленных данных будут перезаписаны. Для удобства.

processScript
resource
Сценарий, включаемый для обработки введенных в таблицу данных. Сценарий включается из функции класса tslib_fetce.
Очень важный параметр, так как будете ли вы использовать или нет возмож­ность "cleaning"/"authorization", полностью зависит от написания сценария для обработки данных и помещения их в базу данных.
Очень хороший пример приведен на "media/scripts/guest_submit.inc", включен из static_template "plugin.tt_guest" (Используется для функцио­нала гостевой книги по умолчанию).

separator
string
Символ-разделитель, используемый, если данные получаются в виде массива из, например многоэлементного блока выбора.
chr(10) (окончание строки)
doublePostCheck
string (field name)
Определение поля (целое) в которое вставляется целочисленный хеш переданных данных. Если поле установлено, то проверяется, нет ли другой записи с таким значением. Если есть, то запись НЕ вставляется, так как она проверяется на "дублирование" (отправка тех же данных повторно).

[tsref:FEData.(tablename)/->FE_TABLE]
"FRAMESET"
Свойство:
Тип данных:
Описание:
По умолчанию:
1,2,3,4...
frameObj
Настройка фреймов и вложенных наборов фреймов.

cols
<frameset>-data:cols
Колонки

rows
<frameset>-data:rows
Строки

params
<frameset>-параметры
Пример:
border="0" framespacing="0" frameborder="NO"

[tsref:(page).frameSet/->FRAMESET]

"FRAME"
Свойство:
Тип данных:
Описание:
По умолчанию:
obj
указатель на название объекта основного уровня
Название объекта основного уровня PAGE / FRAMESET.

Пример:
"left", "page", "frameset"

options
url-параметры
Пример:
print=1&othervar=anotherthing
добавит '&print=1&othervar=anotherthing' к содержимому ".src" (если ".src" не установлен вручную!!!).

params
<frame>-параметры
Пример:
scrolling="AUTO" noresize frameborder="NO"

name
<frame>-data:name
Вручную установленное название фрейма.

ЗАМЕЧАНИЕ: устанавливается автомати­чески и не должно переписываться при обычных условиях!
значение ".obj"
src
<frame>-data:src /stdWrap
Вместо адресации в "obj", можно определить определенный источ­ник для фрейма через этот параметр. При этом будет переназна­чено поведение по умолчанию для исполь­зования параметров "obj"!
typolink к id=[currentId]&type=[obj->typeNum]
[tsref:(page).frameSet.(number)/->FRAMESET.(number)]
Пример простого набора фреймов с topframe и content-frame:
frameset = PAGE
frameset.typeNum = 0

page = PAGE
page.typeNum = 1

top = PAGE
top.typeNum = 3

frameset.frameSet.rows = 150,*
frameset.frameSet.params = border="0" framespacing="0" frameborder="NO"
frameset.frameSet {
  1 = FRAME
  1.obj = top
  1.params = scrolling="NO" noresize frameborder="NO" marginwidth="0" marginheight="0"
  2 = FRAME
  2.obj = page
  2.params = scrolling="AUTO" noresize frameborder="NO"
}
"META"
Свойство:
Тип данных:
Описание:
По умолчанию:
Массив...
string /stdWrap
Теги meta
Если значение пустое (после обрезки), метатег не формируется.
Если "ключ" (например "REFRESH" или "DESCRIPTION") — "REFRESH" (не чувствителен к регистру), то в метатеге используется атрибут "http-equiv" вместо "name".

Примеры:
.REFRESH =  [sec]; [url, остается пустым для некоторых страниц]
.DESCRIPTION = Описание содержимого этого документа.
.KEYWORDS = Ключевые слова...

[tsref:->META]

"CARRAY"
Свойство:
Тип данных:
Описание:
По умолчанию:
1,2,3,4...
cObject
Числовой "массив" объектов содержимо­го (cObjects). Порядок опре­деления объектов не важен, так как массив будет отсортирован перед его анализом!

Отдельные свойства:
(свойства stdWrap...)

ЗАМЕЧАНИЕ: применяется ТОЛЬКО если "CARRAY /stdWrap" уста­новлен как тип данных
Если определить для CARRAY любые свойства без чисел, stdWrap будет вызван для всех свойств CARRAY.

Пример:
Будет возвращено '<B>Это формируется перед "10"тестом</B>'
10 = TEXT
10.value = тестом
5 = HTML
5.value = Это формируется перед "10"
wrap = <B> |</B>

(TDParams)
<TD>-параметры
ЗАМЕЧАНИЕ: применяется ТОЛЬКО если "CARRAY +TDParams" установлен как тип данных
Это свойство используется лишь в некоторых случаях использования CARRAY. Ищите примечания об этом в случае исполь­зования.

[tsref:->CARRAY]
Объекты содержи­мого (cObject)
PHP информация:
Объектами содержимо­го (cObjects) в основном управляет сценарий PHP "typo3/sysext/cms/tslib/content.php". Класс PHP под названием "tslib_cObj" и часто они являются также именами переменных объектов ($cObj)
У $cObj в PHP имеется массив, $this->data, содержащий записи различных типов. Смотрите тип данных "getText".
Эта запись обычно "загружается" с записью из таблицы, в зависимости от ситуации. Скажем, при создании меню она зачастую загружается с записью страницы текущего элемента меню, или, относительно формирования содержимо­го — с записью этого содержимо­го.
ПОВТОРНОЕ ИСПОЛЬЗОВАНИЕ cOBJECTS:
При работе с "cObjects", возможно использовать специальный синтаксис для повторного исполь­зования cObjects без фактического создания копии. Это уменьшает размер шаблона в буфере. Но, с другой стороны, не дает гибкости при переназначении значений. 
Этот пример покажет, как это работает:
#
# Определение временных объектов:
#
lib.stdheader = COA
lib.stdheader {
  stdWrap.wrapAlign.field = header_position
  stdWrap.typolink.parameter.field = header_link
  stdWrap.fieldRequired = header

  1 = TEXT
  1.current = 1
  1.fontTag = {$content.wrap.header1}

  stdWrap.space = {$content.headerSpace}
}


#
# CType: header
#
tt_content.header = COA
tt_content.header {
  10 < lib.stdheader
  10.stdWrap.space >

  20 = TEXT
  20.field = subheader
  20.fontTag = {$content.wrap.subheader1}
}


#
# CType: bullet
#
tt_content.bullets = COA
tt_content.bullets {
  10 = < lib.stdheader
  20 < styles.content.bulletlist_gr
}

сначала определяется lib.stdheader. Это (и должен быть) cObject ! (в этом случае - COA).
Затем lib.stdheader копируется в tt_content.header.10 посредством оператора "<". Это значит, что фактически копия lib.stdheader создается во время анализа.
Но не в случае tt_content.bullets.10. Здесь lib.stdheader просто указатель, а использоваться lib.stdheader как cObject бу­дет во время выполнения.
Причина копирования lib.stdheader в первом случае — необходимость сброса ".stdWrap.space" внутри cObject ("10.stdWrap.space >"). Это НЕВОЗМОЖНО сделать во втором случае, когда создается лишь указатель. 
ЗАМЕЧАНИЕ: 
Если lib.stdheader был бы temp.stdheader, указатель не будет работать! Это связано с тем фактом, что ссылка на "temp." во время выполнения ничего там не обнаружит, так как он освобождается перед тем, как шаблон сохраняется в кеше!
Это справедливо для "temp." и "styles." (смотрите описание объекта основного уровня).
Варианты перезаписи значений:
Несмотря на то, что в TypoScript невозможно перезаписать значения (через операторы и т.п.), свойства объекта со ссылками объединяются в настройками ссылки.
Пример:
page.10 = TEXT
page.10.value = kasper
page.10.case = upper

page.20 = < page.10
page.20.case = lower
page.20.value >
page.20.field = pages

Результат этой настройки:

Помните, что .value не очищается (красная строка), это просто объединение двух массивов:


Поэтому красная строка в примере выше бесполезна.
HTML
Объект содержимого "HTML" можно использовать для вывода статического текста или html. stdWrap доступен как для самих cObject, так и для свойства "value". Смотрите примеры.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
HTML /stdWrap
HTML-код.

stdWrap
->stdWrap
(выполняется после stdWrap для свойства ".value".)

[tsref:(cObject).HTML]
Пример:
10 = HTML
10.value = Текст в верхнем регистре
10.value.case = upper
Пример:
10 = HTML
10.value.field = bodytext
10.value.br = 1
Пример:
10 = HTML
10.stdWrap.field = title
10.stdWrap.wrap = <strong>|</strong>

TEXT
TEXT очень схож с cObject "HTML". Но stdWrap находится в самом корне объекта. Это нестандартно. Посмотрите примеры.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
value /stdWrap
Текст, заключенный в свойства stdWrap.

(свойства stdWrap...)



[tsref:(cObject).TEXT]
Пример:
10 = TEXT
10.value = Текст в верхнем регистре
10.case = upper
Пример:
10 = TEXT
10.field = bodytext
10.br = 1

COBJ_ARRAY (COA, COA_INT)
Это cObject, в который можно помещать несколько других cObject, используя цифры для их упорядочивания.
Этот cObject имеет псевдоним COA. Можно его использовать вместо COBJ_ARRAY.
Это объект также может быть создан как COA_INT, в этом случае он работает точно также, как объект USER_INT: выполняется без кеширования! COA_INT предлагает использовать эту возмож­ность не только с объектами USER cObjects, но и с любыми cObject.
Свойство:
Тип данных:
Описание:
По умолчанию:
1,2,3,4...
cObject


if
->if
Если "if" возвращает ложь COA НЕ выполняется

wrap
wrap /stdWrap


stdWrap
->stdWrap


includeLibs
список ресурсов /stdWrap
(Это свойство используется только для объекта COA_INT!, смотрите Введение.)
Список ресурсов через запятую, которые включаются как сценарии PHP (через функцию include_once()) при включении этого сценария.
Это возможно сделать, так как любые включаемые файлы известны перед включением сценария. И это не так с обычными PHP_SCRIPT cObject.

[tsref:(cObject).COA/(cObject).COA_INT/(cObject).COBJ_ARRAY]
Пример:
temp.menutable = COBJ_ARRAY
temp.menutable {
  10 = HTML
  10.value = <table border=0 cellpadding=0 cellspacing=0>

  20 = HMENU
  20.entryLevel = 0
  20.1 = GMENU
  20.1.NO {
    wrap = <tr><td> | </td></tr>
    XY = {$menuXY}
    backColor = {$bgCol}
    20  = TEXT
    20 {
      text.field = title
      fontFile = media/fonts/hatten.ttf
      fontSize = 23
      fontColor = {$menuCol}
      сме­щение = |*| 5,18 || 25,18
    }
  }
  
  30 = HTML
  30.value = </table>
}

FILE
Этот объект возвращает содержимое файла, установленного в свойстве "file".
В /typo3/sysext/cms/tslib/class.tslib_content.php он определен как функция PHP fileResource().
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource /stdWrap
Если ресурс является изображением jpg,gif,jpeg,png, то изображе­ние вставляется с тегом image. Файлы остальных форматов читаются и вставляются в код HTML.
Максимальный размер читаемого файла внутренне установлен на 1024 кБайт!

linkWrap
linkWrap /stdWrap
(Выполняется перед ".wrap" и ".stdWrap".)

wrap
wrap /stdWrap
(Выполняется после ".linkWrap" но перед ".stdWrap".)

stdWrap
->stdWrap
( Выполняется после ".linkWrap" и ".wrap".)

altText
titleText
string /stdWrap
Только для вывода <img>!

Если не определен titltext, будет использоваться
Если не определен alttext, будет использоваться пустой alttext

emptyTitleHandling
string /stdWrap
Значение может быть “keepEmpty” для сохранения пустого атрибута title, или “useAlt” для использования содер­жимого атрибута alt.
useAlt
longdescURL
string /stdWrap
Только для вывода <img>!

Атрибут "longdesc" (URL указывающий на документ с дополнительны­ми деталями об изображе­нии).

[tsref:(cObject).FILE]
Пример:
Это пример определения страницы, но содержи­мое между тегами body берется из файла "gs.html":
page.10 = FILE
page.10.file = fileadmin/gs/gs.html
IMAGE
Возвращает тег image с файлом, указанным в свойстве "file", и набором параметров, указанных через соответствующие свойства.
В /typo3/sysext/cms/tslib/class.tslib_content.php он определен как функция PHP cImage().
Массив $GLOBALS["TSFE"]->lastImageInfo устанавливается, как массив информации о возвращаемом изображении (если имеется) и содержит ширину, высоту и т.п.
Свойство:
Тип данных:
Описание:
По умолчанию:
file
imgResource


params
<IMG>-параметры /stdWrap


border
integer
Значение атрибута “border” тега image.
0
altText
titleText

(alttext)
string /stdWrap
Если не определен alttext, будет использоваться пустой alttext

("alttext" старая проверка правописания этого атрибута. Она будет использовать только если "altText" не определен в значениях или свойствах)

emptyTitleHandling
string /stdWrap
Значение может быть “keepEmpty” для сохранения пустого атрибута title, или “useAlt” для использования содер­жимого атрибута alt.
useAlt
longdescURL
string /stdWrap
Атрибут "longdesc" (URL указывающий на документ с дополнительными де­талями об изображе­нии).

linkWrap
linkWrap /stdWrap
(перед ".wrap")

imageLinkWrap
boolean/
->imageLinkWrap
ЗАМЕЧАНИЕ: используется ТОЛЬКО если НЕ установлен linkWrap, а файл НЕ GIFBUILDER (так как он работает лишь с оригинальными файлами изоб­ражений)

if
->if
Если "if" возвращает ложь, изображение не отображается!

wrap
wrap /stdWrap


stdWrap
->stdWrap


[tsref:(cObject).IMAGE]
Пример:
    10 = IMAGE 
    10.file = toplogo*.gif
    10.params = hspace=5
    10.wrap = |<BR>
IMG_RESOURCE
Возвращается лишь ссылка на изображение, возможно заключенная в stdWrap. Может использоваться для фоновых изображений для таблиц или строк таблиц, либо для импорта изображе­ния в свои включаемые сценарии.
Массив $GLOBALS["TSFE"]->lastImgResourceInfo устанавливается, как массив информации о возвращаемом изображе­нии (если имеется) и содержит ширину, высоту и т.п.
Свойство:
Тип данных:
Описание:
По умолчанию:
file
imgResource


stdWrap
->stdWrap


[tsref:(cObject).IMG_RESOURCE]

CLEARGIF
Вставляется прозрачный файл gif.
Свойство:
Тип данных:
Описание:
По умолчанию:
height
<img>-data:height /stdWrap
Высота изображения.
1
width
<img>-data:width /stdWrap
Ширина изображения.
1
wrap
wrap /stdWrap

|<br />
stdWrap
->stdWrap
(Выполняется после ".wrap".)

[tsref:(cObject).CLEARGIF]
Пример:
    20 = CLEARGIF
    20.height = 20
CONTENT
Этот объект разработан для формирования содержимого, делая возможным отбор и обработку записей.
Ключ регистра SYS_LASTCHANGED обновляется на основании поля tstamp выбранных записей, имеющих более высокое по сравнению с текущим значение.
Свойство:
Тип данных:
Описание:
По умолчанию:
select
->select
Здесь устанавливается SQL-оператор!

table
TableName /stdWrap
Таблица, из которой должно браться содержимо­е. 
В стандартной конфигурации – это "tt_content"
ЗАМЕЧАНИЕ: позволены лишь таблицы “pages” или таблицы с одним из префиксов: “tt_”, “tx_”, “ttx_”, “fe_”, “user_” или “static_”.

renderObj
cObject

< [tablename]
slide
integer /stdWrap
Если установлено, и элементы содержимо­го не найдены через команду select, то будет исследоваться корневая линия пока не будет найдено содер­жимое.

Возможные значения “-1” (переход обратно до корня сайта), “1” (только на текущем уровне) и “2” (вверх на один уровень).

Используйте -1 в комбинации с collect.

.collect (integer): если включено, будут собраны все элементы содержимо­го, найденные на текущей или родительских страницах.  Иначе поиск остано­вился бы после первого найденного значения. Установите в качестве значе­ния нужное число уровней для сбора элементов или “-1” для сбора всех эле­ментов до корня сайта.
.collectFuzzy (boolean): полезно лишь для режима collect. Если никаких элементов на определенной глубине не найдено в режиме collect, поиск дви­гается далее, пока не будет найдена хотя бы одно соответствие.
.collectReverse (boolean): изменяет порядок элементов режима collect. Если включено, элементы текущей страницы будут отображены внизу.

wrap
wrap /stdWrap
Обертка всего содержимого полностью...

stdWrap
->stdWrap
(Выполняется после ".wrap".)

[tsref:(cObject).CONTENT]

Пример (объект CONTENT):
  1 = CONTENT
  1.table = tt_content
  1.select {
    pidInList = this
    orderBy = sorting
  }
Пример (записи renderObj):
// Настройка для записей со значением typeField (часто "CType") установленным в "header"
tt_content.header.default {
  10 = TEXT
  10.field = header
  .....
}

// Настройка для записей со значением typeField (часто "CType") установленным в "bullets"
// Если в поле "layout" установлено "1" или "2" используется специальная настройка, иначе — по умолчанию
tt_content.bullets.subTypeField = layout
tt_content.bullets.default {
  .....
}
tt_content.bullets.1 {
  .....
}
tt_content.bullets.2 {
  .....
}

// А это происходит, если значение typeField не соответствует ничему упомянутому выше
tt_content.default.default {
  .....
}
RECORDS
Этот объект предназначен для вывода списков записей из различных таблиц. В отличие от объекта CONTENT, здесь невозможен уточненный отбор записей (отсутствует свойство "select").
Ключ регистра SYS_LASTCHANGED обновляется на основании поля tstamp выбранных записей, имеющих более высокое по сравнению с текущим значение.
ЗАМЕЧАНИЕ: записи с родительскими id (pid) недоступных страниц (скрытых, с ограниченным доступом или огра­ниченными по времени) обычно не выбираются. Страницы могут иметь любой тип, за исключением корзины. Отключе­ние проверки производится через параметр "dontCheckPid".
Свойство:
Тип данных:
Описание:
По умолчанию:
source
список записей /stdWrap
Список id записей, возможно с префиксом названий таблиц.

Пример:
source = tt_content_34, 45, tt_links_56

tables
list of tables /stdWrap
Список воспринимаемых таблиц. Если любой элемент в списке ".source" не имеет префикса с названием таблицы, то подразумевается первая та­блица в этом списке.
Настройка названий таблиц возможно и в .conf.

Пример:
tables = tt_content, tt_address, tt_links
conf.tx_myexttable = TEXT
conf.tx_myexttable.value = Hello world

Добавляются таблицы tt_content, tt_address, tt_links, tx_myexttable.

conf.[tablename]
cObject
Массив настроек представляющий записи из таблицы tablename
Если НЕ определено, то представление за­писей осуществляет­ся через объект основного уровня [tablename] – то же самое, что cObject CONTENT!
dontCheckPid
boolean /stdWrap
Обычно записи невозможно выбрать, если их родительская страница (pid) недоступна для пользователя сайта. Этот параметр отключает та­кую проверку.

wrap
wrap /stdWrap


stdWrap
->stdWrap
(Выполняется после ".wrap".)

[tsref:(cObject).RECORDS]
Пример:
  20 = RECORDS
  20.source.field = records
  20.tables = tt_address
  20.conf.tt_address < tt_address.default
HMENU
Формирует иерархическое меню.
Свойство:
Тип данных:
Описание:
По умолчанию:
(1 / 2 / 3 /...)
menuObj
Требуется!
Определяет, как menuObj должен представлять элементы меню раз­личных уровней. 
1 — первый уровень, 2 — второй уровень, 3 — третий уровень...

Пример:
temp.sidemenu = HMENU
temp.sidemenu.1 = GMENU
(no menu)
cache_period
int
Число секунд, в течение которых меню может оставаться в кеше. Если значение не определено, будет использовано первое доступное значение из следующих:
    1) cache_timeout текущей страницы;
    2) config.cache_period определенный глобально;
    3) 86400 (= 1 день)

entryLevel
int /stdWrap
Определяет, с какого уровня корневой линии должно начинаться меню. 
По умолчанию — "0", что означает самую первую страницу сайта.
Если значение < 0, entryLevel выбирается "вне" корневой линии. Так, "-1" — меню с элементами из внешнего уровня, "-2" — на 2 уровня дальше вовне...
0
special
"directory" / "list" / "updated" / "browse" / "rootline" / "keywords" / "language"
Обратитесь к разделу "Свойство .special" и соответствующим таблицам.

special.value
список uid страниц /stdWrap
Смотрите выше

minItems
int
Минимальное количество элементов в меню. Если количество стра­ниц меньше этого числа, добавляется фиктивная страница с заго­ловком "..." и uid=[текущая страница_id].

Примечание: затрагивает и подменю. Для установки индивидуаль­ного значения для каждого уровня меню, установите свойства в объектах меню (смотрите таблицу “Общие свойства”).

maxItems
int
Максимальное количество элемен­тов меню. Избыточные элементы игнорируются.

Примечание: затрагивает и подменю. (смотрите примечания для “minItems”).

begin
int +calc
Первый элемент в меню. 

Пример:
В результате получается меню, в котором пропущены два первых элемента, а меню начинается с третьего:
  begin = 3  

Примечание: затрагивает и подменю. (смотрите примечания для “minItems”).

excludeUidList
список целых чисел /stdWrap
Список uid страниц через запятую, исключаемых при построении меню. Можно добавить “current”, чтобы текущая страница исключа­лась из меню.

Пример:
Страницы с этими uid НЕ появятся в меню!!! В дополнение, всегда исключается текущая страница.
  excludeUidList = 34,2,current

excludeDoktypes
список целых чисел
Список типов страниц (doktype), исключаемых из меню. По умолча­нию — это “не в меню” (5) и помеченных, только для доступа вну­тренних пользователей (6). 
5,6
includeNotInMenu
boolean
Если включено, страницы типа "не в меню", будут включены в меню.

alwaysActivePIDlist
список целых чисел /stdWrap
Список UID страниц, которые всегда будут расцениваться, как актив­ные пункты меню и автомати­чески открываться не зависимо от кор­невой линии.

protectLvar
boolean / keyword
Если установлено, то каждая страница в меню будет проверена на наличие записи с альтернативным языком, для языка, определенно­го в "config.sys_language_uid" (обычно определенной через &L). Если такового нет, и в "Настройках локализации" страниц установлен па­раметр "спрятать страницу, если нет перевода для текущего языка", то элемент меню обычно связан с недоступной страницей, при выбо­ре которой появляется сообщение об ошибке. Установка этого пара­метра предотвратит эту ситуацию, простым добавле­нием “&L=0” для таких страниц. Это значит, что они переключаться на язык по умол­чанию, вместо использования выбранного языка.
Проверка выполняется лишь при запросе перевода ("config.sys_language_uid" не ноль).

Ключевое слово: “all”
Если установлено “all”, то выполняется та же проверка, но поиск не будет осуществляться, если установлено "спрятать страницу, если нет перевода для текущего языка", страница всегда возвращается на язык по умолчанию, если перевод не найден.

Эти параметры имеет смысл использовать, когда “config.sys_language_mode” не установлено на “content_fallback”.

addQueryString
string
смотрите typolink.addQueryString

Примечание: работает только с special=language.

if
->if
Если "if" возвращает ложь, меню не формируется

wrap
wrap /stdWrap


stdWrap
->stdWrap
(Выполняется после ".wrap".)

[tsref:(cObject).HMENU]
Пример:
temp.sidemenu = HMENU
temp.sidemenu.entryLevel = 1
temp.sidemenu.1 = TMENU
temp.sidemenu.1 {
  target = page
  NO.afterImg = media/bullets/dots2.gif |*||*| _
  NO.afterImgTagParams = hspace="4"
  NO.linkWrap = {$fontTag}
  NO.ATagBeforeWrap = 1

  ACT < .NO
  ACT = 1
  ACT.linkWrap = <b>{$fontTag}</b>
}

Свойство .special
Это свойство делает возможность создания меню, которые не отображают напрямую текущую структуру страниц, а со­здают меню в виде ссылок на страницы, типа "следующая/предыдущая", "последняя измененная", "страницы на опре­деленной стринаце" и т.п.
Замечание: .не устанавливаете .entryLevel для HMENU при использовании этого параметра! Существует лишь одно исключение — special.keywords. 
Кроме того, удосто­верьтесь, что выбираются страницы для первого уровня меню. Подменю в menuPbjects 2+ будут создаваться как обычно.
special.directory
HMENU типа special = directory позво­ляет создавать меню с подстраницами одной или нескольких родительских стра­ниц. Родительские страницы определяются свойством “.value”. Обычно используется для карт сайта.
Поддерживаются точки доступа.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
список id страниц /stdWrap
Будет сформировано меню всех страниц с pid = 35 и pid = 56.
20 = HMENU
20.special = directory
20.special.value = 35, 56
id текущей страницы
[tsref:(cObject).HMENU.special.directory]
special.list
HMENU типа special = list позволяет создавать меню, со списком страниц, определенным в свойстве “.value”.
Поддерживаются точки доступа.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
список id страниц /stdWrap
Будет сформировано меню из двух страниц (uid=35 и uid=36):

20 = HMENU
20.special = list
20.special.value = 35, 56

Если .value не установлено, то используется uid 0, и будет показана лишь домашняя страница.
0
[tsref:(cObject).HMENU.special.list]
special.updated
HMENU со свойством special = updated позволяет создать меню наиболее часто обновляемых страниц.
Замечания по формированию: порядок сортировки по умол­чанию обратный (desc) по полю, определенному через “mode” , но установка “alternativeSortingField” для объекта меню (например GMENU, смотрите позже) переназначит его.
Поддерживаются точки доступа.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
список id страниц /stdWrap
Будет сформировано меню наиболее часто обновляемых страниц из ветвей дерева, начиная с заданных uid (uid=35 и uid=36).
20 = HMENU
20.special = updated
20.special.value = 35, 56

mode
string
Поле в базе данных, содержащее информацию о последних обнов­лениях.

Возможны следующие значения:
- SYS_LASTCHANGED: обновляется на последнее время обновления содержимого страницы.
- crdate: используется поле "crdate" из записи страницы.
- tstamp: используется поле "crdate" из записи страницы, оно автоматически обновляется при сохранении страницы.
- manual или lastUpdated: использование поля "lastUpdated", которое в записи страницы можно установить вручную.
- starttime: использование поля starttime.

Поля с пустыми значениями обычно не выбираются.
SYS_LASTCHANGED
depth
int
Определение глубины уровней в дереве страниц.
Возможный диапазон 1-20.
Глубина 1 означает лишь стартовую страницу, глубина  2 — старто­вый id + первый уровень.
Примечание: “глубина” сходно с "beginAtLevel".
20
beginAtLevel
int
Определение начального уровня в дереве страниц, сформирован­ном на основе .value и .depth.

0 по умолчанию, включает стартовый id.
1 начиная с первого уровня подстраниц,
2 начиная со второго уровня подстраниц.

Примечание: “глубина” сходна с этим свойством.
0
maxAge
int (seconds) +calc
Страницы с датами обновления старше текущего времени минус это число секунд не будут отображаться в меню. По умол­чанию "не ис­пользуется". Для вычислений можно использовать +-*/.

limit
int
Максимальное количество элемен­тов в меню. По умолчанию - 10, максимум - 100.
10
excludeNoSearchPages
boolean
Если установлено, страницы, обозначенные "Вне поиска" не вклю­чаются в специальное меню.
0
[tsref:(cObject).HMENU.special.updated]
Пример for special = updated:
The following example will generate a menu of the most recently updated pages from the branches in the tree starting with the uid's (uid=35 and uid=56) listed. Furthermore the field "tstamp" is used (default is SYS_LASTCHANGED) and the tree depth is 2 levels. Also a maximum of 8 pages will be shown and they must have been updated within the last three days (3600*24*3):
20 = HMENU
20.special = updated
20.special.value = 35, 56
20.special {
  mode = tstamp
  depth = 2
  maxAge = 3600*24*3
  limit = 8
}

special.rootline
Меню страниц корневой линии — это меню, показывающее череду выстроенных в иерархическом порядке страниц.
HMENU со свойством special = rootline создает меню корневой линии (также известное как “breadcrumbs menu” - "хлеб­ные крошки") и может выглядеть так:
Страница уровня 1 > Страница уровня 2 > Страница уровня 3 > Текущая страница
Такое визуальное представление местоположения упрощает ориентацию пользователей на сайте и ускоряет переход на различные уровни страниц.
Поддерживаются точки доступа.
Свойство:
Тип данных:
Описание:
По умолчанию:
range
string /stdWrap
[begin-level] | [end-level] ( также, как определялся .entryLevel для HMENU). В следующем примере начальный уровень 1 и не отображается текущая страница:
temp.breadcrumbs = HMENU
temp.breadcrumbs.special = rootline
temp.breadcrumbs.special.range = 1|-2

reverseOrder
boolean
Если установлено, то порядок элементов меню корневой линии будет обратным.
false
targets.[level number]
string
Для набора фреймов. Возможно определить цель по умолчанию и цель для каждого уровня, используя номер уровня в качестве до­полнительного свойства. 

Пример:
Здесь ссылки на страницы уровня 3 в качестве цели используют target=”page”, в то время, как остальные уровни используют цель target=”_top” посредством свой­ства TMENU .target.

page.2 = HMENU
page.2.special = rootline
page.2.special.range = 1|-2
page.2.special.targets.3 = page
page.2.1 = TMENU
page.2.1.target = _top
page.2.1.wrap = <HR> | <HR>
page.2.1.NO {
  linkWrap = | > 
}

[tsref:(cObject).HMENU.special.rootline]
Пример для special = rootline:
Следующий пример формирует доступное меню корневой линии в виде неупорядоченного списка. Первая страница меню — страница уровня 1, то есть уровнем ниже корневой страницы сайта. Последняя страница меню — текущая.
Здесь после каждой ссылки вставляется изображение, в виде небольшой стрелки.
Текущая страница не имеет ссылки, но помещена в теги. К ней не добавляется изображение. 
20 = HMENU
20.wrap = <ul>|</ul>
20.special = rootline
20.special.range = 1|-1

20 {
  1 = TMENU
  1.noBlur = 1

  1.NO.wrapItemAndSub = <li>|</li>
  1.NO.ATagTitle.field = description // subtitle // title
  1.NO.afterImg = fileadmin/arrow.jpg

  1.CUR = 1
  1.CUR < .1.NO
  1.CUR.doNotLinkIt = 1
  1.CUR.wrapItemAndSub = <li><em>|</em></li>
  1.CUR.afterImg >
}
special.browse
Внимание: страницы крепления не поддерживаются!
Это меню состоит из страниц, позволяя пользователю перемещаться на следующую / предыдущую страницу, страницу с содержимым и т.п. Меню строится из элементов, заданных в свойстве ".items". 
Свойство:
Тип данных:
Описание:
По умолчанию:
value
int
/stdWrap
По умол­чанию – id текущей страницы. Конечно возможно пе­резаписать это значение другим uid страницы, которая будет взята за базу для меню и предопределенных элемен­тов.
id текущей страницы
items
список назва­ний элементов, разделенных "|"
Каждый элемент в списке (разделитель "|") - либо зарезерви­рованное название элемента (смотрите список) с предопреде­ленной функцией, либо определенное название, которое мож­но ассоциировать с ссылкой на любую страницу. Помните, что текущая страница не может быть корневой страницей сайта.

Зарезервированных названия элемен­тов:
next / prev: ссылки на следующую / предыдущую страницы. Следующая и предыдущая страницы от того же "pid", что и текущий id страницы (или "value") – то есть следующий эле­мент меню текущей страницы. Также говорят как о текущем уровне. 
Если установлено".prevnextToSection", то next/prev будут свя­заны с первой страницей следующего раздела / последней страницей предыдущего раздела.
nextsection / prevsection: ссылки на следующий / предыду­щий раздел. Раздел определяется как подстраницы страниц того же уровня, что и родительская (pid) страница текущей страницы. Не сработает, если родительская страница текущей страницы — корневая страница сайта.
nextsection_last / prevsection_last: здесь ссылки nextsection/prevsection связаны с первыми страницами разде­лов, а эти — с последними. Если в разделе лишь одна страни­ца, она будет и перовой, и последней. Не сработает, если родительская страница текущей страницы — корневая страница сайта.
first / last: первая / последняя страница текущего уровня.  Если в разделе лишь одна страница, она будет и перовой, и последней.
up: ссылка на родительскую страницу (pid) для текущей страницы. (вверх на 1 уровень) Всегда доступна.
index: ссылки на родительскую страницу для родительской страницы текущей страницы (вверх на 2 уровня). Может быть недоступна, если страница находится вне диапазона корневой линии.

Примеры:

Если id=20 — текущая страница, то:
21= prev и first, 19 = next, 18 = last, 17 = up, 1=index, 10 = nextsection, 11 = nextsection_last

prevsection и prevsection_last не представлены, так как id=3 не имеет подстраниц!

TypoScript (лишь часть "browse", необходимо еще TMENU/GMENU):
xxx = HMENU
xxx.special = browse
xxx.special {
  items = index|up|next|prev
  items.prevnextToSection = 1
  index.target = _blank
  index.fields.title = INDEX
  index.uid = 8
}

items.prevnextToSection
boolean
Если установлено, "prev" и "next" будут перемещать на следую­щий раздел при достижении конечной страницы теку­щего раздела. Таким образом "prev" и "next" будут выступать также ссылкой на первую страницу следующего раздела / последнюю страницу предыдущего раздела.

[itemname].target
string
Опциональная/альтернативная цель для элементов.

[itemname].uid
int
(uid страницы) – опциональная/альтернативная ссылка на uid страницы.

[itemname].fields.[field name]
string
Переопределение поля "fieldname" в записи страницы.

Пример:
так ссылка на предыдущую страницу получает текст "« назад".
prev.fields.title = « назад

[tsref:(cObject).HMENU.special.browse]
special.keywords
Формирование меню страниц, с одним или несколькими ключевыми словами, найденными на текущей странице.
По умол­чанию порядок реверсивный (desc) по полю, определенному в "mode", но установка "alternativeSortingField" для объекта меню (например, для GMENU, смотрите далее) будет иметь преимущество. 
Поддерживаются точки доступа.
Свойство:
Тип данных:
Описание:
По умолчанию:
value
int
/stdWrap
Страница с ключевыми словами для поиска схожих страниц.

Пример:
20 = HMENU
20.special = keywords
20.special {
  value.data = TSFE:id
  entryLevel = 1
  mode = manual
}
20.1 = TMENU
20.1.NO {
  ...
}

mode
string
Поле с таблице страниц используемое для сортировки.

Возмож­ные значения:

 SYS_LASTCHANGED: обновляется на последнее время обновления содержимого страницы.
- manual или lastUpdated: использование поля "lastUpdated", которое в записи страницы можно установить вручную.
- tstamp: используется поле "crdate" из записи страницы, оно автоматически обновляется при сохранении страницы.
- crdate: используется поле "crdate" из записи страницы.
- starttime: использование поля starttime.
SYS_LASTCHANGED
entryLevel
int
Место начала поиска в корневой линии.
Смотрите свойство entryLevel в разделе "HMENU" выше.

depth
int
(также, как в разделе "special.updated")
20
limit
int
(также, как в разделе "special.updated")
10
excludeNoSearchPages
boolean
(также, как в разделе "special.updated")

begin
boolean
(также, как в разделе "special.updated")

setKeywords
string
/stdWrap
Позволяет вручную определит ключевые слова в виде списка слов через запятую. Если определено это свойство, оно переопределя­ет настройки по умолчанию, использующие ключевые слова теку­щей страницы.

keywordsField
string
Определение полей таблицы страниц, в которых будет произво­диться поиск ключевых слов. По умол­чанию поле “keyword”. Про­верка существования поля не производится, поэтому вводите су­ществующее поле. Хорошо?!
keywords
keywordsField.sourceField
string
Определение поля текущей страницы, из которого будут браться ключевые слова. По умол­чанию поле “keyword” (помните, что “.keywordsField” только установка поля записи страницы для по­иска в нем!).
keywords
[tsref:(cObject).HMENU.special.keywords]
special.language
Формирование меню выбора языка. Обычно делается в виде меню с флагами, представляющих языки, на которые переведена текущая страница. При щелчке по любому из элемен­тов текущая страница обновляется, но с измененным параметр­ом “&L” в URL.
Тип “language” формирует элементы меню на основе записи текущей страницы, но с языковой записью для каждого доступного языка. Все элементы ссылаются на текущий id страницы, но с разными параметрами “&L”.
Замечания по состояниям элементов:
Когда “TSFE->sys_language_uid” соответствует sys_language uid для элемента, устанавливается состояние “ACT”, в дру­гих случаях - “NO”. Однако, если страница недоступна ввиду "настроек локализации" для нее (они могут быть отклю­чены переводчиком), или если запись Альтернативного языка страницы не найдена (может быть отключена через “.normalWhenNoLanguage”, см. далее), устанавливается состояние “USERDEF1” для неактивных элементов, и “USERDEF2” для активных. Итого — четыре состояния для разработки дизайна. Рекомендуется отключать ссылки для элемен­тов меню в состояниях “USERDEF1” и “USERDEF2”, при этом они отключаются также, как если бы страница на этих языках не существовала и попытка вывода таких страниц приведет к ошибке (в зависимости от настроек сайта).
Свойство:
Тип данных:
Описание:
По умолчанию:
value
список sys_language uid через запятую
/stdWrap
Количество элементов в этом списке определяет количество элементов меню.

normalWhenNoLanguage
boolean
Если установлена 1, кнопка для языка будет сформирована не как не отключенная, даже если перевода на данный язык не найдено.

[tsref:(cObject).HMENU.special.language]
Пример:
Формирование языкового меню с флагами (помните, что некоторые строки перенесены):
lib.langMenu = HMENU
lib.langMenu.special = language
lib.langMenu.special.value = 0,1,2
lib.langMenu.1 = GMENU
lib.langMenu.1.NO {
  XY = [5.w]+4, [5.h]+4
  backColor = white
  5 = IMAGE
  5.file = typo3/sysext/cms/tslib/media/flags/flag_uk.gif  || typo3/sysext/cms/tslib/media/flags/flag_fr.gif  || typo3/sysext/cms/tslib/media/flags/flag_es.gif
  5.сме­щение = 2,2
}

lib.langMenu.1.ACT < lib.langMenu.1.NO
lib.langMenu.1.ACT = 1
lib.langMenu.1.ACT.backColor = black

lib.langMenu.1.USERDEF1 < lib.langMenu.1.NO
lib.langMenu.1.USERDEF1 = 1
lib.langMenu.1.USERDEF1.5.file = typo3/sysext/cms/tslib/media/flags/flag_uk_d.gif  || typo3/sysext/cms/tslib/media/flags/flag_fr_d.gif  || typo3/sysext/cms/tslib/media/flags/flag_es_d.gif
lib.langMenu.1.USERDEF1.noLink = 1
special.userdefined
Позволяет написать свой маленький сценарий PHP, формирующий массив элементов меню.
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource
Название включаемого php файла (также, как cObject PHP_SCRIPT).

[any other key]

Переменные в вашем сценарии. Все они доступны в массиве $conf вашего сценария.

[tsref:(cObject).HMENU.special.userdefined]
Руководство:
Нужно заполнить массив $menuItemsArray записями страниц для элемен­тов меню.
Это делается так::
$menuItemsArray[] = pageRow1;
$menuItemsArray[] = pageRow2;
$menuItemsArray[] = pageRow3;
...

“pageRow” - запись из таблицы “pages” со всеми выбранными полями (SELECT * FROM...).
Если нужно изменить название страницы, удостоверьтесь, что добавили хотя бы значения из полей “title” и “uid”.
Замечание:
Если вы работаете с точками доступа, возможно установить параметр MP, который должен быть установлен для стра­ницы, посредством внутреннего поля “_MP_PARAM” в записи страницы (xxx-xxx).
Переназначения URL:
Также возможно использовать внутреннее поле "_OVERRIDE_HREF" для установки своего значения href (например "http://www.typo3.org"), которое будет использоваться взамен ссылки на страницу, предоставленную самой страницей. Если используется "_OVERRIDE_HREF", то может использоваться и "_OVERRIDE_TARGET" для переназначения значе­ния цели (смотрите пример ниже).
Другие зарезервированные ключи:
“_ADD_GETVARS” возможно использовать для добавления параметров get к URL, например “&L=xxx”.
“_SAFE” возможно использовать для защиты элемен­тов от возможной фильтрации.
Создание подменю:
Возможно создавать подменю следующего уровня простым добавле­нием массива элемен­тов меню во внутреннее поле "_SUB_MENU" (смотрите пример ниже).
Предустановка состояния элементов
Если нужно, чтобы элемент распознавался в режиме элемента SPC, IFSUB, ACT, CUR или USR, то можно установить одно из этих значений в ключе “ITEM_STATE” записи страницы. Этот параметр переназначает естественное поведение.
special.userfunction
Вызов пользовательской функции/метода в классе, который должен (также, как “userdefined” выше) возвращать массив с записями страниц для меню.
Свойство:
Тип данных:
Описание:
По умолчанию:
userFunc
string
Название функции

[tsref:(cObject).HMENU.special.userfunction]
Пример: создание иерархического меню из определенных ссылок
По умол­чанию, объект HMENU был разработан для создания меню страниц в TYPO3. Такие страницы представлены со­держимым своих записей для страниц. Обычно поле "title" используется для названия, а поле "uid" — для создания ссылки на страницу в меню.
Но объекты HMENU и sub-menu настолько сильны, что их удобно использовать для создания меню со ссылками, не от­носящимися к id страниц в TYPO3. Это может быть меню, отражающее структуру расширения, в котором каждая ссыл­ка может быть той же ссылкой на id страницы в TYPO3, но с установкой различных параметров. 
Это легко осуществить, используя специальный тип "userdefined" (смотрите таблицу выше), в которую можно передать массив элементов меню, созданный собственным сценарием PHP.
Сначала, этот код создает трехуровневое меню, первые два уровня которого — графические элементы:
   0: # ************************
   1: # МЕНЮ СЛЕВА
   2: # ************************
   3: lib.leftmenu.20 = HMENU
   4: lib.leftmenu.20.special = userfunction
   5: lib.leftmenu.20.special.userFunc = user_3dsplm_pi2->makeMenuArray
   6: lib.leftmenu.20.1 = GMENU
   7: lib.leftmenu.20.1.NO {
   8:   wrap = <tr><td>|</td></tr><tr><td class="bckgdgrey1" height="1"></td></tr>
   9:   XY = 163,19
  10:   backColor = white
  11:   10 = TEXT
  12:   10.text.field = title
  13:   10.text.case = upper
  14:   10.fontColor = red
  15:   10.fontFile = fileadmin/fonts/ARIALNB.TTF
  16:   10.niceText = 1
  17:   10.сме­щение = 14,12
  18:   10.fontSize = 10
  19: }
  20: lib.leftmenu.20.2 = GMENU
  21: lib.leftmenu.20.2.wrap = | <tr><td class="bckgdwhite" height="4"></td></tr><tr><td class="bckgdgrey1" height="1"></td></tr>
  22: lib.leftmenu.20.2.NO {
  23:   wrap = <tr><td class="bckgdwhite" height="4"></td></tr><tr><td>|</td></tr>
  24:   XY = 163,16
  25:   backColor = white
  26:   10 = TEXT
  27:   10.text.field = title
  28:   10.text.case = upper
  29:   10.fontColor = #666666
  30:   10.fontFile = fileadmin/fonts/ARIALNB.TTF
  31:   10.niceText = 1
  32:   10.сме­щение = 14,12
  33:   10.fontSize = 11
  34: }
  35: lib.leftmenu.20.2.RO < lib.leftmenu.20.2.NO
  36: lib.leftmenu.20.2.RO = 1
  37: lib.leftmenu.20.2.RO.backColor = #eeeeee
  38: lib.leftmenu.20.2.ACT < lib.leftmenu.20.2.NO
  39: lib.leftmenu.20.2.ACT = 1
  40: lib.leftmenu.20.2.ACT.10.fontColor = red
  41: lib.leftmenu.20.3 = TMENU
  42: lib.leftmenu.20.3.NO {
  43:   allWrap = <tr><td>|</td></tr>
  44:   linkWrap (
  45:    <table border="0" cellpadding="0" cellspacing="0" style="margin: 2px; 0px; 2px; 0px;">
  46:       <tr>
  47:         <td><img src="clear.gif" width="15" height="1" /></td>
  48:         <td><img src="fileadmin/arrow_gray.gif" height="9" width="9" hspace="3" /></td>
  49:         <td>|</td>
  50:       </tr>
  51:    </table>
  52:   )
  53: }

Меню выглядит так, как на этой странице:
Приведенный выше код TypoScript формирует это меню, но элементы элементы не указывают на страницы, как обыч­но, напрямую. Так как все меню формируется из массива, возвращаемого функцией "menuMenuArray" вызываемой в TypoScript в строках 4+5.
   1:     function makeMenuArray($content, $conf) {
   2:         return array(
   3:             array(
   4:                 'title' => 'Contact',
   5:                 '_OVERRIDE_HREF' => 'index.php?id=10',
   6:                 '_SUB_MENU' => array(
   7:                     array(
   8:                         'title' => 'Offices',
   9:                         '_OVERRIDE_HREF' => 'index.php?id=11',
  10:                         '_OVERRIDE_TARGET' => '_top',
  11:                         'ITEM_STATE' => 'ACT',
  12:                         '_SUB_MENU' => array(
  13:                             array(
  14:                                 'title' => 'Copenhagen Office',
  15:                                 '_OVERRIDE_HREF' => 'index.php?id=11&officeId=cph',
  16:                             ),
  17:                             array(
  18:                                 'title' => 'Paris Office',
  19:                                 '_OVERRIDE_HREF' => 'index.php?id=11&officeId=paris',
  20:                             ),
  21:                             array(
  22:                                 'title' => 'New York Office',
  23:                                 '_OVERRIDE_HREF' => 'http://www.newyork-office.com',
  24:                                 '_OVERRIDE_TARGET' => '_blank',
  25:                             )
  26:                         )
  27:                     ),
  28:                     array(
  29:                         'title' => 'Form',
  30:                         '_OVERRIDE_HREF' => 'index.php?id=10&cmd=showform',
  31:                     ),
  32:                     array(
  33:                         'title' => 'Thank you',
  34:                         '_OVERRIDE_HREF' => 'index.php?id=10&cmd=thankyou',
  35:                     ),
  36:                 ),
  37:             ),
  38:             array(
  39:                 'title' => 'Products',
  40:                 '_OVERRIDE_HREF' => 'index.php?id=14',
  41:             )
  42:         );
  43:     }

Обратите внимание, что массив содержит "поддельные" записи страниц, в которых нет поля uid, а имеется лишь поля "title" и "_OVERRIDE_HREF", как необходимые, и несколько полей, как их дополнения. 
Первый уровень с элементами "Contact" и "Products" содержат поля "title" и "_OVERRIDE_HREF", но "Contact" расширен через массив "_SUB_MENU", содержащий схожий массив элементов. 
Первый элемент второго уровня, "Offices", содержит поле "_OVERRIDE_TARGET". Далее, элементу устанавливается состояние "ACT", то есть он будет обрабатываться как "активный" элемент (вы должны будете определить это самостоятельно, до фор­мирования меню для реальных страниц). И наконец, имеется еще один подуровень элемен­тов меню.
CTABLE
Создаются стандартные таблицы, в которых возможно определить содержимое различных ячеек.
CTABLE несколько более функционален, чем простой OTABLE. Функционал касается столбцов содержимого и четырех окружающих столбцов, полезных для внесение в них меню.
Свойство:
Тип данных:
Описание:
По умолчанию:
сме­щение
x,y /stdWrap
Смещение от верхнего левого угла.
0,0
tm
->CARRAY +TDParams /stdWrap
TopMenu
Значение по умолчанию для TDParams: valign="top".
Для свойства TDParams доступно свойство stdWrap.

lm
->CARRAY +TDParams /stdWrap
LeftMenu
Значение по умолчанию для TDParams: valign="top".
Для свойства TDParams доступно свойство stdWrap.

rm
->CARRAY +TDParams /stdWrap
RightMenu
Значение по умолчанию для TDParams: valign="top".
Для свойства TDParams доступно свойство stdWrap.

bm
->CARRAY +TDParams /stdWrap
BottomMenu
Значение по умолчанию для TDParams: valign="top".
Для свойства TDParams доступно свойство stdWrap.

c
->CARRAY +TDParams /stdWrap
Content-cell
Значение по умолчанию для TDParams: valign="top".
Для свойства TDParams доступно свойство stdWrap.

cMargins
margins /stdWrap
Расстояние вокруг содержи­мого ячейки "c".
0,0,0,0
cWidth
pixels /stdWrap
Ширина ячейки содержимого "c".

tableParams
<TABLE>-параметры /stdWrap
Атрибуты тега table.
border="0" cellspacing="0" cellpadding="0"
stdWrap
->stdWrap


[tsref:(cObject).CTABLE]
Пример:
page.10 = CTABLE
page.10 {
  сме­щение = 5, 0
  tableParams = border="0" width="400"
  cWidth = 400
  c.1 = CONTENT
  c.1.table = tt_content
  c.1.select {
    pidInList = this
    orderBy = sorting
  }

  tm.10 < temp.sidemenu
  tm.TDParams = valign=top

  stdWrap.wrap = <div id="mytable">|</div>
}
OTABLE
Создается простая таблица. Можно настроить смещение и несколько других параметров тега table.
Свойство:
Тип данных:
Описание:
По умолчанию:
сме­щение
x,y /stdWrap
Смещение от верхнего левого угла.

Примечание:
Фактически тип данных - “x,y,r,b,w,h”:
x,y — смещение от верхнего левого угла;
r,b — смещение (отступ) вправо и снизу;
w — требуемая ширина поля содержи­мого;
h — требуемая высота поля содержи­мого.

Все измеряется в пикселях.

1,2,3,4...
cObject


tableParams
<TABLE>-параметры /stdWrap
Атрибуты тега table.
border="0" cellspacing="0" cellpadding="0"
stdWrap
->stdWrap


[tsref:(cObject).OTABLE]
Пример:
top.100 = OTABLE
top.100.сме­щение = 310,8
top.100.tableParams = border="1" cellpadding="0" cellspacing="0"
top.100.1 < temp.topmenu
COLUMNS
Вставляет таблицу с несколькими столбцами. Размер и стилизация тега table может быть указана в соответствующих параметрах.
Свойство:
Тип данных:
Описание:
По умолчанию:
tableParams
<TABLE>-параметры /stdWrap
Атрибуты тега table.
border="0" cellspacing="0" cellpadding="0"
TDparams
<TD>-параметры /stdWrap
Атрибуты тегов td.
valign="top"
rows
integer (Диапазон: 2-20) /stdWrap
Количество строк в столбце.
2
totalWidth
integer /stdWrap
Общая ширина колонка+зазоры.

gapWidth
integer /stdWrap
+optionSplit
Ширина зазоров между столбцами. 
0 = без зазоров.

gapBgCol
HTML-цвет /stdWrap
+optionSplit
Цвет фона для зазоров ячеек таблицы.

gapLineThickness
integer /stdWrap
+optionSplit
Толщина разделительных линий между ячейками.
0 = линии отсутствуют.

gapLineCol
HTML-цвет /stdWrap
+optionSplit
Line color of the divider line.
black
[column-number]
1,2,3,4...
cObject
Цвет линий.

after
cObject
Это объект содержимо­го для каждого столбца!!!

if
->if
Это cObject, помещаемый после столбцов таблицы!!!

stdWrap
->stdWrap


[tsref:(cObject).COLUMNS]
HRULER
Объект вставляет тег table, который можно использоваться в качестве горизонтального разделителя.
Свойство:
Тип данных:
Описание:
По умолчанию:
lineThickness
integer /stdWrap
Диапазон: 1-50
1
lineColor
HTML-цвет /stdWrap
Цвет линии.
black
spaceLeft
pixels /stdWrap
Зазор перед линией (слева)

spaceRight
pixels /stdWrap
Зазор после линии (справа)

tableWidth
string /stdWrap
Ширина линии (атрибут “width” в таблице)
99%
stdWrap
->stdWrap


[tsref:(cObject).HRULER]
IMGTEXT
Этот объект разработан для выравнивания изображений и текста. Обычно используется для вывода записей текста/изобржений из таблицы tt_content.
Изображе­ние(я) помещается в таблицу, а таблица помещается перед, за, слева/справа от текста.
Смотрите примеры в коде.
Свойство:
Тип данных:
Описание:
По умолчанию:
text
->CARRAY /stdWrap
Используется для импорта / формирования содержимо­го, обтекаю­щего блок изображения.

textPos
int /stdWrap
Позиционирование текста:
bit[0-2]: 000 = по центру, 001 = справа, 010 =слева
bit[3-5]: 000 = над, 001 = под, 010 в тексте.

0 — По верху: По центру;
1 - По верху: Вправо;
2 - По верху: Влево;
8 - По низу: По центру;
9 - По низу: Вправо;
10 - По низу: Влево;
17 - В тексте: Вправо;
18 - В тексте: Влево;
25 - В тексте: Вправо (без обертки);
26 - В тексте: Влево (без обертки).

textMargin
pixels /stdWrap
Расстояние от изображе­ния до содержи­мого.

textMargin_outOfText
boolean
Если установлено, расстояние textMargin будет добавлено, даже если изображение помещается выше или ниже текста. 
Этот параметр используется лишь для обратной совместимости, так как это было расценено как ошибка, и на данный момент ликвидиро­вана. Поэтому, если у кого-либо проявляется эта "ошибка", ее можно устранить при помощи этого параметра.

imgList
список файлов изображений /stdWrap
Список изображений из ".imgPath".

Пример:
Список изображений импортируется из поля image tt_content.
imgList.field = image

imgPath
path /stdWrap
Путь к изображениям.

Пример:
"uploads/pics/"

imgMax
int /stdWrap
Максимальное количество изображений.

imgStart
int /stdWrap
Начальный номер изображения ".imgStart".

imgObjNum
imgObjNum +optionSplit
Определение объекта IMAGE-cObjects из массива "1,2,3,4..." в объекте current, который должен формировать изображения.
"current" установлен на название файла изображения.

Пример:
"imgObjNum = 1 |*||*| 2":
Будут обработаны первые два изображения с "1. …" и последнее изображение с "2. ...", при условии, что ".imgList" содержит 3 изобра­жения.

1,2,3,4
->IMAGE (cObject)
Формирование изображе­ний.
Регистр "IMAGE_NUM" установлен на количество изображений, обра­батываемых при каждой обработке объекта image. Начинается с нуля.
Объект image не должен быть типа GIFBUILDER!

Важно:
"file.import.current = 1" получает название изображения! 

caption
->CARRAY /stdWrap
Заголовок.

captionAlign
align /stdWrap
Выравнивание заголовка.
default = ".textPos"
captionSplit
boolean
Если установлено, текст заголовка разбивается на символы (или строки) из свойства ".token" , и каждый элемент отображается как блок над изображением.
.token = (string /stdWrap) символ, по которому разбиваются элемен­ты заголовка (по умол­чанию — chr(10))
.cObject = cObject, используется для выбора разбиваемого заголов­ка.
.stdWrap = свойства stdWrap, используемые для обработки заголов­ка.

altText
titleText
string /stdWrap
По умол­чанию, если не имеется альтернативы, altText/titleText берет­ся из ->IMAGE cObjects 

Если не определен alttext, вместо него используется  пустой alttext.

emptyTitleHandling
string /stdWrap
Значение может быть “keepEmpty” для сохранения пустого атрибута title, или “useAlt” для использования содер­жимого атрибута alt.
useAlt
longdescURL
string /stdWrap
По умол­чанию, если не имеется альтернативы, longdescURL берется из ->IMAGE cObjects 

Атрибут "longdesc" (URL, указывающий на документ с дополнитель­ными сведениями об изображении).

border
boolean /stdWrap 
Если истина, вокруг изображения создается рамка.

borderCol
HTML-цвет /stdWrap
Цвет рамки, при установленном свойстве ".border".
black
borderThick
pixels /stdWrap
Ширина рамки вокруг изображения.
1
cols
int /stdWrap 
Столбцы.

rows
int /stdWrap 
Строки (приоритет выше, чем "cols")

noRows
boolean /stdWrap
Если установлено, столбцы не разбиваются столбцами таблицы. При этом изображения, если они сильно различаются по высоте (обычно ширина одинаковая), выглядят лучше.

noCols
boolean /stdWrap
Если установлено, столбцы в таблице не делаются. Все изображе­ния помещаются в один ряд, разделяемые clear giffile файлом.
Если установлен noRows, noCols будет сброшено. Они не могут ис­пользоваться вместе.

colSpace
int /stdWrap
Промежуток между столбцами.

rowSpace
int /stdWrap
Промежуток между строками.

spaceBelowAbove
int /stdWrap
Расстояние в пикселях между содержимым и изображением, если изображение расположено ниже или выше текста (но не в тексте).

tableStdWrap
->stdWrap
Весь окончательный <table> для блока изображений передается в функцию stdWrap.

maxW
int /stdWrap
Максимальная ширина таблицы изображений. 
При этом изображения масштабируются неправильно! Принимается во внимание количество столбцов!

ЗАМЕЧАНИЕ: работает ТОЛЬКО ЕСЛИ объект IMAGE - НЕ GIFBUILDER.

maxWInText
int /stdWrap
Максимальная ширина таблицы изображений, если текст обтекает таблицу изображений (слева или справа).
При этом изображения масштабируются неправильно! Принимается во внимание количество столбцов!

ЗАМЕЧАНИЕ: работает ТОЛЬКО ЕСЛИ объект IMAGE - НЕ GIFBUILDER.
50% от maxW
equalH
int /stdWrap
Если значение больше нуля, то изображения в строке будут иметь одинаковую высоту. Ширина будет вычислена автомати­чески.
Если общая ширина изображений больше значения "maxW" для та­блицы, то высота всех изображений будет уменьшена, так, чтобы все изображения влезали в totalWidth.
Помните, что это значение переопределяет свойства "width", "maxH", "maxW", "minW", "minH" формируемых объектов IMAGE. Кроме того, свойство "noRows" тоже будет переопределено, и будет сформирова­на таблица без столбцов!

colRelations
string /stdWrap
Это значение определяет отношение изображений в столбцах IMGTEXT. Синтаксис - "[int] : [int] : [int] : ..." для каждого столбца. Если столбцов изображений больше, чем цифр в этом значении, оно игнорируется. Если отношения между двумя из этих чисел бо­лее 10, эта функция игнорируется. 
Это работает только если все изображения уменьшены до их опреде­ленных maxW.

Пример:
Если 6 изображений помещены в три колонки, а их ширина каждо­го из них достаточна для масштабирования, то эти значения масштаби­руют изображения, например до 100, 200 и 300  пикселей слева направо:
1 : 2 : 3

image_compression
int /stdWrap
Сжатие изображений:
0= По умол­чанию;
1= Не изменять! (все параметры для объекта image удаляются!!!)
(добавляется расширение gif и команда преобразования цвета)
10= GIF/256
11= GIF/128
12= GIF/64
13= GIF/32
14= GIF/16
15= GIF/8
(добавляется расширение jpg и команда преобразования качества)
20= IM: -quality 100
21= IM: -quality 90 <=> Photoshop 60     (JPG/Very High)
22= IM: -quality 80    (JPG/High)
23= IM: -quality 70
24= IM: -quality 60 <=> Photoshop 30   (JPG/Medium)
25= IM: -quality 50
26= IM: -quality 40  (JPG/Low)
27= IM: -quality 30 <=> Photoshop 10 
28= IM: -quality 20   (JPG/Very Low)
(добавляется расширение png и команда преобразования цвета )
30= PNG/256
31= PNG/128
32= PNG/64
33= PNG/32
34= PNG/16
35= PNG/8
39= PNG

По умол­чанию, качество в ImageMagick установлено на 75, что экви­валентно качеству Photoshop 45. Изображения, сжимаются ImageMagick с тем же визуальным качеством, что и в Photoshop, но больше в размере на 50%!!!

ЗАМЕЧАНИЕ: работает ТОЛЬКО ЕСЛИ объект IMAGE - НЕ GIFBUILDER.

image_effects
int /stdWrap
Добавление параметров к командам масштабирования. Эта функ­ция не работает при "image_compression" равном 1!!!

1 => "-rotate 90",
2 => "-rotate 270",
3 => "-rotate 180",
10 => "-colorspace GRAY",
11 => "-sharpen 70",
20 => "-normalize",
23 => "-contrast",
25 => "-gamma 1.3",
26 => "-gamma 0.8"

ЗАМЕЧАНИЕ: работает ТОЛЬКО ЕСЛИ объект IMAGE - НЕ GIFBUILDER.

image_frames
Array 
+ .key /stdWrap

Фреймы:
.key указывает на используемый фрейм.

".image_frames.x" — это свойства маска imgResource (".m"), переназначающее свойства [imgResource].m для imageObjects. Использу­ется для маскирования изображения во фрейме. Смотрите, как это сде­лать в настройке по умолчанию и IMGTEXT в таблице static_template. 

Пример:
1 {
  mask = media/uploads/darkroom1_mask.jpg
  bgImg = GIFBUILDER
  bgImg {
    XY = 100,100
    backColor = {$bgCol}
  }
  bottomImg = GIFBUILDER
  bottomImg {
    XY = 100,100
    backColor = black
  }
  bottomImg_mask = media/uploads/darkroom1_bottom.jpg
}

ЗАМЕЧАНИЕ:  параметры jpg-качества, посылаемые как обычные ".params" в imgResource отменяются. Кроме того, в результате этой операции всегда получаются файлы jpg или gif!
ЗАМЕЧАНИЕ: работает ТОЛЬКО ЕСЛИ объект IMAGE - НЕ GIFBUILDER.

editIcons
string
( Смотрите stdWrap.editIcons).

noStretchAndMarginCells
boolean /stdWrap
Если установлено (1), ячейки, используемые для добавления левых и правых отступов не будут добавлены. Вы потеряете возможность установки отступов для объектов, если выберите “in text”. Поэтому это не рекомендуется, но может быть полезно по разным причинам.

stdWrap
->stdWrap


[tsref:(cObject).IMGTEXT]
Пример:
tt_content.textpic.default {
  5 = IMGTEXT
  5 {  
    text < tt_content.text.default
    imgList.field = image
    textPos.field = imageorient
    imgPath = uploads/pics/
    imgObjNum = 1
    1 {
       file.import.current = 1
       file.width.field = imagewidth
       imageLinkWrap = 1
       imageLinkWrap {
         bodyTag = <BODY bgColor=black>
         wrap = <A href="javascript:close();"> | </A>
         width = 800m
         height = 600m
         JSwindow = 1
         JSwindow.newWindow = 1
         JSwindow.expand = 17,20
       }
    }
    maxW = 450
    maxWInText = 300
    cols.field = imagecols
    border.field = imageborder
    caption {
      1 = TEXT
      1.field = imagecaption
      1.wrap = <font size="1"> |</font>
      1.wrap2 = {$cBodyTextWrap}
    }
    borderThick = 2
    colSpace = 10
    rowSpace = 10
    textMargin = 10
  }
  30 = HTML
  30.value = <br>
}
CASE
Это очень гибкий объект, результат которого может сильно разниться, в зависимости от заданного ключа. Принцип, сродни конструкции “switch” в PHP.
Свойство “key” должно соответствовать одному из значений, находящемуся в массиве “Array”. Если его там нет, будет использовано свойство “default”. В качестве значений в “Array” можно использовать любые строки, кроме названий других свойств. Поэтому запрещены: “setCurrent”, “key”, “stdWrap” и “if”. И, конечно, “default” имеет специальное значение.
Свойство:
Тип данных:
Описание:
По умолчанию:
setCurrent
string /stdWrap
Установка "текущего" значения.

key
string /stdWrap
Используется для установки значений, которые сравниваются со значениями в “Array”. В общем это может быть не только простая строка, но динамическое значение, получаемое посредством свойств stdWrap из определенных источников, обычно из поля текущей записи (смотрите приведенный пример).
default
default
cObject
Выводимое по умолчанию для всех значений “key”, не соответствующим никакому значению в “Array”.

Array...
cObject
Определение выводимого для разных значений.

stdWrap
->stdWrap
stdWrap для любого объекта, независимо от предоставляемого в значении “key”.

if
->if
Если "if" возвращает ложь, то результат не возвращается.

[tsref:(cObject).CASE]
Пример:
В этом примере выбирается формирование двух вариантов содержимого, в зависимости от содержи­мого поля "layout" — "1" или нет ("default"). Результат в любом случает заключается в "|<BR>". Если поле "header" не установлено ("false") всегда возвращается пустая строка.
stuff = CASE
stuff.key.field = layout
stuff.if.isTrue.field = header
stuff.stdWrap.wrap = |<br />

stuff.default = TEXT
stuff.default {
  ....
}
stuff.1 = TEXT
stuff.1 {
  ....
}
LOAD_REGISTER
Возможность загрузить значения в массив $GLOBALS["TSFE"]->register[]. Ничего не возвращается! Удобно, что некото­рые предопределенные настройки (вроде содержимого страницы) могут использоваться в различных местах, но с разными значениями, определенными как значения регистра, которые возможно изменить при формировании страни­цы.
Свойство:
Тип данных:
Описание:
По умолчанию:
Array...  
[field name]
string /stdWrap
Пример:
(установка "contentWidth", "label" и "head")

page.27 = LOAD_REGISTER
page.27 {
  contentWidth = 500

  label.field = header

  head = some text
  head.wrap = <b> | </b>
}

[tsref:(cObject).LOAD_REGISTER]
RESTORE_REGISTER
Сброс последних изменений в массиве регистра, установленных через LOAD_REGISTER.
Работает наподобие стека, в котором сохраняется оригинальный регистр при вызове LOAD_REGISTER. После чего вы­зов RESTORE_REGISTER cObject восстанавливает значения из стека (оригинальные).
RESTORE_REGISTER не имеет свойств.
FORM
Возможность создания форм.
textarea:	Label | [* = required][field name =] textarea[,cols,rows,"wrap= [eg. "OFF"]"] | [defaultdata] | Special evaluation configuration (see note below)
input:		Label | [* = required][field name =] input[,size,max] | [defaultdata] | Special evaluation configuration (see note below)
password:	Label | [* = required][field name =] input[,size,max] | [defaultdata]
file:		Label | [* = required][field name (*1)=] file[,size] 
check:		Label | [* = required][field name =]check | [checked=1] 
select:		Label | [* = required][field name =]select[,size (int/"auto"), "m"=multiple] | label [=value] , ...
radio:		Label | [* = required][field name =]radio | label [=value] , ...
hidden:		|[field name =]hidden | value
submit:		Label |[field name =]submit | Caption
reset: 		Label |[field name =]reset | Caption
label:		Label | label | Label value
property:		[Internal, see below]
------------------
Предопределенные элементы типа "select" и "radio":
Это  пример, где "Brown" — предопредленный элемент из блока выбора:
	Haircolor: | *haircolor=select| Blue=blue , Red=red , *Brown=brown

Можно ввести несколько предопределенных элемен­тов, вводя звездочку перед каждым из них.
Переназначение свойств:
Это может быть сделано со следующими свойствами из приведенной ниже таблицы:
type, locationData, goodMess, badMess, emailMess
синтаксис:
|[property] =property | value

(*1) (название поля для файлов)
Для файлов, прикрепленных к письмам, нужно использовать следующие названия полей: 
	attachment, attachment1, ... , attachment10
Отображение формы:
Необходимо установить свойство "layout". Если не сделать этого, форма не будет сформирова­на! За информацией обратитесь к примеру и приведенной ниже таблице.
Пример:
temp.mailform = FORM
temp.mailform {

  dataArray {
    10.label = Name:
    10.type = name=input

    20.label = Nachricht:
    20.type = nachricht=textarea,40,10

    100.type = submit=submit
    100.value = Absenden
  }
  recipient = info@example.com
  layout = <div class="some-class">###LABEL### ###FIELD###</div>
}
Правильный ответный email:
Для писем, закрепленных за адресами email людей, подписанных на получение почты, используйте название поля "email", например:
Email: | *email=input | 
Специальные условия
Префиксом “*” перед названием большинства типа полей можно определить обязательные поля. Проверка осуществляется в JavaScript; при этом форма будет отправлена при заполненном поле.
Альтернативно, можно проверять значение поля регулярным выражением или email адресом для некоторых типов (textarea, password, input).
Это делается через определение “Настройку специальных условий” для типов, вроде части 4 в строке настроек (смот­рите приведенный ниже пример).
Типы специальных условий разделяются двоеточием (“:”). 
Первая часть определяет ключевое слово для условия. Текущий параметр — “EREG” (для регулярного выражения) и “EMAIL” (для условия с email адресами).
Если определен ключ “EREG”, вторая и третья части — сообщение об ошибке и регулярное выражение, соответствен­но.
Примеры:
Ваш адрес: | address=textarea,40,10 |  | EREG : Можно вводить лишь символы от A до Z: ^[a-zA-Z]*$
Ваш email: | *email=input |  | EMAIL

Свойство:
Тип данных:
Описание:
По умолчанию:
data
string /stdWrap
Это данные, установленные для формы. Смотрите ниже.
Вместо перехода строки, можно использовать "||".

dataArray
[массив элементов формы]
Альтернативный способ установки полей формы. Вместо синтаксиса с разделителями в виде вертикальных черт, поддерживаемых свой­ством .data, возможно определять элементы в стиле обычных масси­вов TypoScript.
.dataArray добавляется к уже введенным значениям .data.
Каждая запись в dataArray — числовая и имеет три главных свойства: label, type, value, а также свойство required. 'label' и 'value' имеют свойство stdWrap. 
Имеется свойство .valueArray, являющееся альтернативой свойству .value. Это такой же массив, в том же стиле, с нумерованными значе­ниями, имеющими свойства label, value и selected. 'label' имеет свойства stdWrap.

Пример:
dataArray {
  10.label = Имя:
  10.type = name=input
  10.value = [Введите имя]
  10.required = 1
  20.label = Цвет глаз:
  20.type = eyecolor=select
  20.valueArray {
    10.label = голубой
    10.value = 1
    20.label = красный
    20.value = 2
    20.selected = 1
  }
  40.type = submit=submit
  40.value = Отправить
}

Это соответствует строке в свойстве .data:

Имя: | *name=input | [Введите имя]
Цвет глаз: | eyecolor=select | голубой=1, *красный=2
| submit=submit | Отправить

Зачем нужен этот способ? Хороший вопрос, но использование этого способа имеет огромное преимущество в том, что метки отде­лены от кода. Кроме того, значительно легче удалять или добавлять новые элементы в форму.
Вставка поля email после поля имени делается так:
dataArray {
  15.label = Email:
  15.type = input
  15.value = your@email.com
  15.specialEval = EMAIL
}

Или перевод формы на датский (настройка config.language на 'dk'):

dataArray {
  10.label.lang.dk = Navn:
  10.value.lang.dk = [Indtast dit navn]
  20.label.lang.dk = Øjenfarve
  20.valueArray {
    10.label.lang.dk = Blå
    20.label.lang.dk = Rød
  }
  40.value.lang.dk = Send
}


radioWrap
->stdWrap
Обертка меток для радиокнопок.

radioWrap.accessibilityWrap
wrap /stdWrap
Определяет обертку радио кнопок при включении режима accessibility (см. далее свойство “accessibility”).
<fieldset###RADIO_FIELD_ID###><legend>###RADIO_GROUP_LABEL###</legend>|</fieldset>
radioInputWrap
->stdWrap
Обертки элемента ввода и метки радиокнопки.

type
integer, string
Тип (action="" of the form):

Integer: расценивается, как страница в TYPO3.
String: расценивается как обычный URL (например "formmail.php" или "fe_tce_db.php").
Empty: выбирается текущая страница.

ЗАМЕЧАНИЕ: если тип – integer/empty форма будет отправлена на странице в TYPO3 и, если эта страница имеет значение для target/no_cache, то оно будет использовано вместо target/no_cache по умол­чанию ниже.

ЗАМЕЧАНИЕ: если установлено значение перенаправления, то цель для перенаправления переназначает цель, установ­ленную в action-url.

ЗАМЕЧАНИЕ: может быть переназначена функцией переназначе­ния свойств данных формы (смотрите выше).

target
target /stdWrap
Цель для формы по умолчанию. 

method
form-method /stdWrap
Пример: 
GET
POST
no_cache
string /stdWrap
Параметр no_cache по умол­чанию.

noValueInsert
boolean /stdWrap
Значения по умол­чанию, которые передаются той же странице (и той же форме, например форме поиска), заново вставляются в форму вместо любых данных по умол­чанию, которые могут быть установле­ны. 
Это применяется ТОЛЬКО если установлено "no_cache=1"! (страница, взятая из кеша, конечно, может не включать определенные пользо­вателем значения в форме..) 
Если этот параметр установлен, содержимое всегда будет содержи­мым по умолчанию.

compensateFieldWidth
double /stdWrap
Параметр переназначения для значения настройки с тем же названи­ем. Смотрите "CONFIG" выше.

locationData
boolean / string /stdWrap
Если это значение истина, к форме добавляется скрытое поле с на­званием "locationData". В это поле загружается значение вроде этого:
[id страницы]:[таблица текущей записи]:[id текущей записи]
Например, если поле формы вставлено на страницу с uid = "100", как элемент содержимого страницы из таблицы "tt_content" с id "120", то значение должно быть "100:tt_content:120".
Значение использует, например cObject SEARCHRESULT. Если здесь обнаружено значение $GLOBALS["HTTP_POST_VARS"]["locationData"], поиск осуществляется, как будто он выполнялся на этой странице! Это очень полезно, если нужно применить функционал поиска для страницы с полем "stype" установленным на "L1", это значит, что по­иск осуществляется на первом уровне корневой линии. 
Предположим, что имеется специализированная страница поиска. Этой странице известно, из  locationData, что поиск выполнялся с другого места сайта.
Если "locationData" не только истинно, но также установлено на "HTTP_POST_VARS", то значение будет содержать содержимое $GLOBALS["HTTP_POST_VARS"]["locationData"] вместо истинных дан­ных о местоположении страницы. Это нужно делать для полей поис­ка, так как здесь содержится начальная точка поиска.
ЗАМЕЧАНИЕ: может быть переназначена функцией переназначения свойств данных формы (смотрите выше).

redirect
string /stdWrap
URL для перенаправления (генерирует скрытое поле "redirect")

Integer: расценивается, как страница в TYPO3.
String: расценивается как обычный URL.
Empty: выбирается текущая страница.

ЗАМЕЧАНИЕ: если установлено это значение, то его цель перена­значает цель свойства "type".

recipient
(список строк /stdWrap
Email получателя содержимого письма из формы (генерирует скрытое поле "recipient")
No email
goodMess
string /stdWrap
Сообщение для функции событий формы, прри правильно заполнен­ной форме.

ЗАМЕЧАНИЕ: может быть переназначена функцией переназначения свойств данных формы (смотрите выше)
No message
badMess
string /stdWrap
Сообщение при отсутствующем обязательном поле.
Это сообщение появляется над списком полей.

ЗАМЕЧАНИЕ: может быть переназначена функцией переназначения свойств данных формы (смотрите выше).
No message
emailMess
string /stdWrap
Сообщение при неверном значении поля email адреса.

ЗАМЕЧАНИЕ: может быть переназначена функцией переназначения свойств данных формы (смотрите выше).

image
->IMAGE (cObject)
Если это изображение правильное, то кнопка отправки формы фор­мируется в виде этого изображения!!!

ЗАМЕЧАНИЕ: CurrentValue устанавливается для метки заголовка перед формированием изображе­ния.

layout
string
Определяется, как будут расположены друг относительно друга мет­ка и поле.

Свойство обязательное, необходимо его устанавливать! Иначе форма не будет сформирована.

Пример:
Вместо "###FIELD###" подставляются данные поля, а вместо "###LABEL###' - метка. 

layout = <tr><td>###FIELD###</td><td> ###LABEL###</td></tr>

Также можно использовать маркер ###COMMENT###, который ТАК­ЖЕ является значением метки, но вставляется в .commentWrap свой­ства stdWrap (см. далее).

fieldWrap
->stdWrap
Поле: обертки для поля.

labelWrap
->stdWrap
Метки: обертки для метки.

commentWrap
->stdWrap
Комментарии: обертки для комментариев, ЕСЛИ используются ###COMMENT###.

REQ
boolean /stdWrap
Определяет, должно ли требуемые поля быть проверены и отмечены.

REQ.fieldWrap
->stdWrap
Поле: обертки для требуемых полей
свойство "fieldWrap"
REQ.labelWrap
->stdWrap
Метки: обертки для меток требуемых полей
свойство "labelWrap"
REQ.layout
string /stdWrap
То же, что и "layout" выше, но для требуемых полей
свойство "layout"
COMMENT.layout
string /stdWrap
Альтернативный шаблон для комментариев.
свойство "layout"
CHECK.layout
string /stdWrap
Альтернативный шаблон для флажков.
свойство "layout"
RADIO.layout
string /stdWrap
Альтернативный шаблон для радиокнопок.
свойство "layout"
LABEL.layout
string /stdWrap
Альтернативный шаблон для типов меток.
свойство "layout"
stdWrap
->stdWrap
Обертка для формы (перед добавле­нием тега form).

hiddenFields
[массив cObject]
Используется для установки hiddenFields из TS.

Пример:
hiddenFields.pid = TEXT
hiddenFields.pid.value = 2

Формирование скрытых полей с названием “pid” и значением “2”.

Доступно дополнительное свойство:
stdWrap, see ->stdWrap.

params
параметры тега элемента формы /stdWrap
Дополнительные параметры для элемен­тов формы.

Пример:
params = style="width:200px;"
params.textarea = style="width:300px;"
params.check = 

Устанавливается ширина в 200 пикселей по умолчанию, за исключе­нием блока выбора и текстовых областей, шириной в 300 пикселей.

stdWrap доступны для вторичных свойств, например params.tagname.

wrapFieldName
wrap /stdWrap
Это обертка названий полей, перед тем, как они будут заключены в теги поля формы.

Пример:
Если установлено значение tx_myextension[input][  |  ] , то поле с на­званием "email" будет заключено в это: tx_myextension[input][email].

noWrapAttr
boolean /stdWrap
Если это значение истинно, то все атрибуты обертки элементов тек­стовой области удаляются. Это необходимо для совместимости с XHTML.

Атрибуты обертки могут быть отменены для конкретных полей, ис­пользованием специального ключевого слова "disabled" в качестве значения атрибута wrap.

arrayReturnMode
boolean /stdWrap
Если установлено, теги <form> и содержимое формы будут возвра­щены как отдельные элементы, включая другие практические значе­ния. Этот режим предназначен для использования в расширениях, где значение, возвращаемое как массив, может быть полезнее.

accessibility
boolean /stdWrap
Если установлено, то форма будет совместима с рекомендациями до­ступности (XHTML совместимость). Это включает:

строки меток будут заключены в <label for="formname[fieldname-hash]"> ... </label>
Все элементы формы будут иметь атрибут id, в зависимости от названия формы, с добавление md5-хешированного названия поля.

Замечание: в TYPO3 4.0 и позже, CSS Styled Content настроен на формирование доступных форм по умолчанию.

formName
string /stdWrap
Альтернативное название для данной формы. По умол­чанию должно быть уникальным (случайным) хешем.

<form name="...">

fieldPrefix
string /stdWrap
Альтернативный префикс названия полей в данной форме. Другими словами, ко всем полям приписывается название формы (либо уни­кальный хеш, либо название, установленное в свойстве “formName”). Если установлен “0”, префикс не используется вообще.

dontMd5FieldNames
boolean /stdWrap
ID для всех элемен­тов формы используют md5 хеши из названий по­лей. Установка этого свойства истинным, отменяет это. При этом ис­пользуются просто названия полей, с префиксом в виде названия формы в качестве ID.
Это может быть полезно для стилизации специально названных по­лей через CSS.

[tsref:(cObject).FORM]
Пример:  авторизация
В случае создания формы регистрации, поддерживаются следующие поля:
"username" = имя пользователя;
"userident" = пароль;
"login_status" = "logout" при выходе, "login" для авторизации.
Если вставить "<!--###USERNAME###-->" где-нибудь в документе, то это будет заменено на имя пользователя, если пользователь зарегистрирован!
Если нужно, чтобы форма регистрации преобразовывалась в форму выход, нужно использовать условия. Смотрите этот пример TS (из static_template "styles.content (default)"):
  # форма авторизации
styles.content.loginform {
  data = Пользователь:|*username=input || Пароль:|*userident=password 
}
[usergroup = *]
styles.content.loginform.data = Пользователь: <!--###USERNAME###-->  || |submit=submit| Выход
[global]
Пример:  почтовая форма
Создается простая почтовая форма (это не TypoScript, а установочный код, который следует вставить непосредствен­но в поле "основной текст" записи содержи­мого страницы типа "FORMMAIL":
Name: | *replyto_name= input | Enter your name here
Имя: | *replyto_name= input | Введите свое имя
Email: | *replyto_email=input | 
Like TV: | tv=check | 
|formtype_mail = submit | Отослать!

|html_enabled=hidden | 1
|subject=hidden| Это тема
|recipient_copy=hidden | copy@email.com
|auto_respond_msg=hidden|  Здравствуйте / Это — автоматическое уведомление. //Мы получили Ваше сообще­ние.
| from_name=hidden | Website XY 
| from_email=hidden | noreply@website.com
| organisation=hidden | организация XY
| redirect=hidden | 16
| priority=hidden | 5
| tv=hidden | 0
|tv=hidden | 0

"replyto_name": если поле называется вроде этого, то его значение используется в почтовой программе в качестве имени адресата и не будет показано в содержимом письма. Выберете другое название для поля, вроде the_name, для использования его значения в качестве обычного поля. Помните, что звездочка (*) обозначает обязательное поле. Установлено значение по умолча­нию ("Введите свое имя")
"replyto_email": если поле называется вроде этого, то его значение используется в качестве email адреса для ответа и не будет показано в содержимом письма. Для получения значения в качестве адреса отправителя для почтовой программы, используйте в качестве названия поля "email".
"Like TV" переключатель. По умол­чанию "выключен".
"formtype_mail" – название кнопки подтверждения. И она должна присутствовать, если нужна встроенная почто­вая форма TYPO3. Эта переменная заставляет TYPO3 среагировать на ввод значений и расценивать их как содержимое почтовой формы!
"html_enabled" — формирует почтовое сообщение в виде HTML.
"use_base64" — вместо обычного текста, сообщение посылается в зашифрованном через base64 виде.
"subject": введите тему своего письма.
"recipient_copy" : копия письма отсылается по этому адресу. Можно ввести несколько адресов через запятую (,). Письмо, отсылаемое recicipent_copy то же самое, но посылается отдельным письмом, кроме того, письмо-копия посы­лается только при посылке письма для "recipient".
"auto_respond_msg": автоматическое уведомление. Отсылается, если известен email адрес "submitter" (поле: "email"). Его значение — сообщение, разбиваемое на строки слешем "/". Каждый слеш — новая строка в письме. Первая строка используется в качестве темы письма.
"from_name": в этом параметре можно установить название в заголовке письма from, которое будет видно в почтовой программе.
"from_email": в этом параметре можно установить email в заголовке письма from, который будет виден в почтовой программе.
"organisation": в этом параметре можно установить параметры для организации в почтовом заголовке, они не будут показаны в письме, а только в его заголовке.
"redirect": через этот параметр, можно определить страницу TYPO3 (id страницы) или внешний URL (www.example.com), на которую будет перенаправлен пользователь после подтверждения формы. Если этот параметр не установлен, он будет возвращен снова на форму.
"priority": через этот параметр, можно установить приоритет письма, от 1 (не важно) до 5 (очень важно). По умол­чанию – 3.
"tv" (снова, но скрыто). Повторение поля — разумный ход, так как значение "tv" обычно НЕ представляется значе­нием "ложь", если оно не выбрано. Добавление этой строки сохраняет значение по умол­чанию для "tv".
SEARCHRESULT
Объект может использоваться для отображения результатов поиска.
Искомые слова загружаются в регистр формы, связанной со страницами:
Пример:
register:SWORD_PARAMS = '&sword_list[]=word1&sword_list[]=word2 .....'
За деталями обратитесь к информации по typolink!
SEARCHRESULT возвращает результаты лишь со страниц типа "Обычные" (1), "Дополнительные" (2) и "Не в меню" (5)
Свойство:
Тип данных:
Описание:
По умолчанию:
allowedCols
string
Список (разделяемый ":") позволенных столбцов таблицы.

Пример:
pages.title:tt_content.bodytext

layout
string
Определяет, как отображается содер­жимое поиска.

Пример:
Заменяет следующие поля:
###RANGELOW###: низший диапазон результаов, напр. "1";
###RANGEHIGH###: высший диапазон результатов, напр. "10";
###TOTAL###:	всего результатов;
###RESULT###:	сам результат;
###NEXT###:		кнопка "следую­щий";
###PREV###:		кнопка "предыдущий".

next
cObject
Этот cObject будет помещен в ссылку на следую­щий результат поиска. Этот код замещает метку "###NEXT###".

prev
cObject
Этот cObject будет помещен в ссылку на предыдущий результат поис­ка. Этот код замещает метку "###PREV###".

target
target /stdWrap
Цель для ссылок следующий/предыдущий!

range
integer /stdWrap
Количество одновременно выводимых результатов!
20
renderObj
cObject
cObject для предоставления результатов поиска.
$cObj->массив данных установлен на запись результатов поиска.
Помните, что все поля именуются [tablename]_[fieldnam]. Так, назва­ние страницы — это поле "pages_title".
Кроме того, также присутствует следующее поле из таблицы страниц:
	uid

renderWrap
wrap /stdWrap


resultObj
cObject
cObject предваряющий строки в результате поиска.

noResultObj
cObject
cObject, используемый, если в результате поиска нет строк.

noOrderBy
boolean /stdWrap
Если установлено, результат НЕ сортируется после lastUpdated, tstamp для таблицы страниц.

wrap
wrap /stdWrap
Контейнер для всего содер­жимого...

stdWrap
->stdWrap
Контейнер для всего содер­жимого...

addExtUrlsAndShortCuts
boolean
Если установлено, то типы страниц 3 и 4 (внешняя ссылка и ссылка) добавляются к типам документов для поиска.
Но, на данный момент страницы не будут выбраны, если на них нет хотя бы одной записи tt_content! Это происходит из-за того, что стра­ницы и таблица tt_content (или другая) объединены. Поэтому, должна быть хотя бы одна запись в tt_content для страниц внешней ссылки / ссылки, чтобы они были отображены.

languageField.[2nd table]
string
Установка названия поля для включения фильтрации по языку. Рабо­тает подобно настройке “languageField” в ->select.

Пример:

languageField.tt_content = sys_language_uid

[tsref:(cObject).SEARCHRESULT]
ЗАМЕЧАНИЕ: "sword" и "scols" ДОЛЖНЫ быть установлены для участия в поиске.
переменная "sword" = поиск слов(а);
переменная "scols" = поиск в столбцах, разделитель ":". Например: pages.title:pages.keywords:tt_content.bodytext
переменная "stype" = начальна точка поиска: false = текущая страница, L-2 = страница перед текущей, L-1 = текущая страница, L0 = корневой уровень, L1 = с первого уровня, L2 = со второго уровня;
переменная $GLOBALS["HTTP_POST_VARS"]["locationData"]: если установлено, поиск произво­дится как бы от другой страницы сайта, заданной здесь в значении "locationData". Смотрите описание cObject "FORMS".
Поиск примет это во внимание, только если locationData указывает во вне фактической корневой линии сайта.
внутреннее:
переменная "scount": если установлено, то используется как searchCount – общее количество столбцов поиска. Этим способом не нужно восстанавливать число!
переменная "spointer": указатель на начальную запись для поиска.
LATER:
переменная "alldomains" : boolean: если установлено, поиск будет осуществляться в других доменах;
переменная "allsites" : boolean: если установлено, поиск будет осуществляться в других сайтах (определяется установ­кой "root" активного шаблона);
переменная "depth": глубина.
Синтаксис при поиске
При поиске можно использовать три типа операторов:
AND: "+", "and" (UK), "og" (DK)  
OR: "or" (UK), "eller" (DK)  
NOT: "-", "not" (UK), "uden" (DK) 
По умолчан­ию используется оператор AND. Если заключить фразу в кавычки "", то будет осуществляться поиск целой строки. Поиск не чувствителен к регистру, части слова также ищутся.
Примеры: 
1. menu backend – поиск страниц со словами и "menu", и "backend".  
2. "menu backend" – поиск целой фразы "menu backend".  
3. menu or backend – поиск страниц, либо со словом "menu", либо с "backend".
4. menu or backend not content - поиск страниц, либо со словом "menu", либо с "backend", но не с "content".
Примеры запросов
В этом случае "pagecontent" выбран в качестве полей для поиска. Он включает  tt_content.header, tt_content.bodytext и  tt_content.imagecaption. 
Это предваряет такие запросы:
SELECT pages.title AS pages_title, pages.subtitle AS pages_subtitle, pages.keywords AS pages_keywords, pages.description AS pages_description, pages.uid, tt_content.header AS tt_content_header, tt_content.bodytext AS tt_content_bodytext, tt_content.imagecaption AS tt_content_imagecaption
FROM pages, tt_content
WHERE(tt_content.pid=pages.uid) AND (pages.uid IN (2,5,6,20,21,22,29,30,31,3,4,8,9,16,1) AND pages.doktype in (1,2,5) AND pages.no_search=0 AND NOT tt_content.deleted AND NOT tt_content.hidden AND (tt_content.starttime<=985792797) AND (tt_content.endtime=0 OR tt_content.endtime>985792797) AND tt_content.fe_group IN (0,-1) AND NOT pages.deleted AND NOT pages.hidden AND (pages.starttime<=985792797) AND (pages.endtime=0 OR pages.endtime>985792797) AND pages.fe_group IN (0,-1)) ...

Часть "... pages.uid IN (2,5,6,20,21,22,29,30,31,3,4,8,9,16,1)... " - это список uid страниц, по которым осуществляется поиск. Этот список берется из ветви дерева страниц и ограничивает поиск этой ветвью, вместо всей таблицы страниц.
1. ... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') AND (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%')) GROUP BY pages.uid
2. ... AND ((tt_content.header LIKE '%menu backend%' OR tt_content.bodytext LIKE '%menu backend%' OR tt_content.imagecaption LIKE '%menu backend%')) GROUP BY pages.uid
3. ... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') OR (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%')) GROUP BY pages.uid
4. ... AND ((tt_content.header LIKE '%menu%' OR tt_content.bodytext LIKE '%menu%' OR tt_content.imagecaption LIKE '%menu%') OR (tt_content.header LIKE '%backend%' OR tt_content.bodytext LIKE '%backend%' OR tt_content.imagecaption LIKE '%backend%') AND NOT (tt_content.header LIKE '%content%' OR tt_content.bodytext LIKE '%content%' OR tt_content.imagecaption LIKE '%content%')) GROUP BY pages.uid

Помните, что регистр здесь не важен. Так по запросу"menu" будет найдено "menu", "menus", "menuitems" и т.д.
USER и USER_INT
Вызывается либо функция PHP, либо метод в классе. Полезно для включения собственной обработки данных или со­держимого. 
В основном, это определяемый пользо­вателем cObject, так как это просто вызов функции или метода, которым Вы управляете!
Важно знать, что если вызывается метод в классе (который, конечно, является объектом), внутренняя переменная "cObj" этого класса устанавливается с ссылкой на родительский cObj. Смотрите файл typo3/sysext/cms/tslib/media/scripts/example_callfunction.php, он мо­жет быть полезен в качестве примера. В основном это API для функций, более или менее понятны для вас. Просмот­рите раздел “Включение PHP сценариев” в конце этого документа.
Если этот объект создается как USER_INT, он будет выполняться без кеширования, вне обработки основной страницы.
Свойство:
Тип данных:
Описание:
По умолчанию:
userFunc
название функции
Название функции. Если определить название через "->", это будет расцене­но как вызов метода в классе.
Посылаются два параметр­а: переменная содержи­мого (в этом случае пустая, но не при использовании из функций stdWrap .postUserFunc и .preUserFunc) и второй параметр — массив со свойствами этого cObject, если они есть.

Пример:
Этот TypoScript отображает все заголовки элемен­тов содержимо­го на страни­це в обратном порядке. Обратите внимание на typo3/sysext/cms/tslib/media/scripts/example_callfunction.php!

page = PAGE
page.typeNum=0
includeLibs.something = typo3/sysext/cms/tslib/media/scripts/example_callfunction.php

page.30 = USER
page.30 {
  userFunc = user_various->listContentRecordsOnPage
  reverseOrder = 1
}

ЗАМЕЧАНИЕ: при использовании функции, ее название должно начинаться с “user_”. При использовании класса, его название должно начинаться с “user_” (при этом нет ограничений на название методов).

includeLibs
список ресурсов /stdWrap
Это свойство применимо только если объект создан как USER_INT.

Это список ресурсов через запятую, включаемых как сценарии PHP (посред­ством функции include_once()), при включении этого сценария.
Это возможно сделать, так как все включаемые файлы должны быть определены до включе­ния сценариев.

[tsref:(cObject).USER/(cObject).USER_INT]
TEMPLATE
При помощи этого cObject можно определить шаблон (например, файл HTML), используемый в качестве основы всего сайта. Внутри файла шаблона можно определить маркеры, которые впоследствии будут заменены динамическим содержимым TYPO3.
Свойство:
Тип данных:
Описание:
По умолчанию:
template
cObject
Должен загружаться с кодом шаблона. Если это не так, объект ни­чего не возвращает.

Пример:
page.10 {
  template = FILE
  template.file = fileadmin/template.html
}
в качестве шаблона для сайта используется файл fileadmin/template.html.

subparts
Массив...
cObject
Массив меток подразделов (чувствителен к регистру).
Подчасть в шаблоне определяется двумя маркерами. Метки долж­ны быть заключены в "###" с обоих сторон. Метки нужно встав­лять внутрь тегов-комментариев!!!

Пример: 
Подраздел "HELLO" в шаблоне:
<!-- start of subpart ###HELLO### -->
This is the HTML-code, that will be loaded in the register and will be replaced with the result...
<!-- end ###HELLO### -->

Теперь следующий код TypoScript заменяет подраздел "HELLO" текстом, заданным в "value":
page.10.subparts {
  HELLO = TEXT
  HELLO.value = En subpart er blevet erstattet!!
}

ЗАМЕЧАНИЕ:
Перед формированием объекта содержи­мого, все подразделы извле­каются из массива и загружаются в регистр, поэтому возможно позже загрузить из оттуда. 
Ключ регистра для кода каждой подразделы  "SUBPART_[theSubpartkey]".
Кроме того,  текущее значение загружается с содержимым каждой подразделы как раз перед анализом cObject для подразделы. Поэтому очень просто становиться загрузить подраздел из cObject (напри­мер: ".current=1")
Например, подраздел выше имеет ключ регистра "SUBPART_HELLO".
Это справедливо только ЕСЛИ не установлено свойство .nonCachedSubst! (см. далее).

relPathPrefix
string / properties
Поиск относительных ссылок (например к изображениям или та­блицам стилей) и установка префикса к ним.
При определении свойства (в верхнем регистре), оно будет соот­ветствовать тегам HTML и определять для них альтернативные пути. Смотрите пример ниже.
Если свойство называется "style", оно устанавливает альтернатив­ный путь для оболочки "url()", которая может быть в разделах <style>.

Пример:
page.10 = TEMPLATE
page.10 {
  template = FILE
  template.file = fileadmin/template.html
  relPathPrefix = fileadmin/
  relPathPrefix.IMG = fileadmin/img/
}

В этом примере ко всем найденным альтернативным путям припи­сывается "fileadmin/", если же это атрибут тега img, приписывается "fileadmin/img/".

marks
Массив...
cObject
Это массив маркеров-меток (чувствителен к регистру).
Метки определяются одним маркером в шаблоне. Маркер заключа­ется в "###" с обоих сторон. В противоположность подразделам, можно НЕ вставлять маркеры подразделов в теги-комментарии HTML! (Они не будут удаляться).

Пример: 
В шаблоне:
<div id="copyright">
  &copy; ###DATE###
</div>

Следующий код TypoScript теперь динамически подставляет вместо маркера "DATE" текущий год:
page.10.marks {
  DATE = TEXT
  DATE {
    data = date : U
    strftime = %Y
}

Маркеры заменяются функцией str_replace. Подчасти загружаются в регистр и также доступны в cObject маркеров (только если не установлено .nonCachedSubst!).

wraps
Массив...
cObject
Это массив маркеров-оберток (чувствителен к регистру).
Лучше продемонстрировать на примере:
Пример: 
В шаблоне имеется подраздел "MYLINK":
This is <!--###MYLINK###-->a link to my<!--###MYLINK###--> page!

При помощи следующего кода TypoScript подраздел будут заменен оберткой, в которую вставляется содержимое, возвращаемое MYLINK cObject.
page.10.wraps {
  MYLINK = TEXT
  MYLINK.value = <a href="#"> | </a>
}

workOnSubpart
string /stdWrap
Это не обязательное определение подраздела, над которым произво­дится работа. Другими словами, если это значение определено, этот подраздел извлекается из шаблона и становится основой целого объекта шаблона.

markerWrap
wrap /stdWrap
Это обертка, в которую помещаются маркеры. Значение по умолча­нию ### | ###, в результате чего маркеры представляются как ###[ключ_маркера]###.
Любые пробелы убираются перед установкой вокруг ключа_марке­ра.
### | ###
substMarksSeparately
boolean /stdWrap
Если установлено, то маркеры подставляются в содер­жимое ПОСЛЕ подстановки подразделов и оберток. 
Обычно маркеры не подставляются внутрь подразделов и заключают­ся в обертки при использовании обычного режима кеширования в TEMPLATE cObject. Но возникает проблема при использовании мар­керов внутри подразделов! Установка этого режима не помещает в кеш подстановочные маркеры, процесс выполняется последова­тельно.
Другое решение — отключение кеширования, см. далее.

nonCachedSubst
boolean /stdWrap
Если включено, то это в корне меняет режим подстановки этого cObject. Обычно, необработанный шаблон читается и разделяется на разделы, определяемые маркерами, подразделы и ключи-обертки. Плюс — хорошая скорость, так как "предварительно проанализиро­ванный" шаблон помещается в кеш. Минус — то, что шаблоны, за­висящие от порядка подстановки, не очень хорошо работают.
В этом режиме, сначала в шаблоне подставляются маркеры через str_replace, один за одним. Затем, одна за одной, подставляются подразделы. И наконец — последовательно подставляются обертки.
Очевидно, что теряется возможность ссылаться на другие части шаблона через ключи регистра, как описано выше. 

stdWrap
->stdWrap


[tsref:(cObject).TEMPLATE]
Пример: 
page.10 = TEMPLATE
page.10 {
  template = FILE
  template.file = fileadmin/test.tmpl
  subparts {
    HELLO = TEXT
    HELLO.value = This is the replaced subpart-code.
  }
  marks {
    Testmark = TEXT
    Testmark.value = This is replacing a simple marker in the HTML-code.
  }
  workOnSubpart = DOCUMENT
}

В этом примере загружается и используется шаблон под названи­ем test.tmpl.

FLUIDTEMPLATE
Объект TypoScript FLUIDTEMPLATE работает схожим с обычным объектом на основе "маркеров" TEMPLATE образом. Но здесь не используются маркеры или подразделы, а разрешены переменные в стиле Fluid с фигурными скобками.
Замечание
для работы всего этого необходима установка расширений "fluid" и "extbase".
Свойство:
Тип данных:
Описание:
По умолчанию:
file
string /stdWrap
Файл шаблона fluid.

layoutRootPath
filepath /stdWrap
Установка специфичных путей шаблона. Обычно это подлежащие файлы шаблона в Layouts/.

partialRootPath
filepath /stdWrap
Специфичный путь частей. Обычно это подлежащие файлы шаблона в Partials/.

format
keyword /stdWrap
Формат текущего запроса.
html
extbase.pluginName
string /stdWrap
Переменные для инициализации extbase.

extbase.controllerExtensionName
string /stdWrap
Название расширения диспетчера (controller).

extbase.controllerName
string /stdWrap
Название диспетчера (controller).

extbase.controllerActionName
string /stdWrap
Название действия.

variables
Массив...
cObjects
Набор переменных, которые должны быть доступны в шаблоне fluid. Ключами являются названия переменных во Fluid.
Зарезервированными переменными являются "data" и "current", они заполняются автомати­чески из текущего набора данных.

stdWrap
->stdWrap


[tsref:(cObject).FLUIDTEMPLATE]
Пример:
Шаблон Fluid (в fileadmin/templates/MyTemplate.html) может быть таким:
<h1>{data.title}<f:if condition="{data.subtitle}">, {data.subtitle}</f:if></h1>
<h3>{mylabel}</h3>
<f:format.html>{data.bodytext}</f:format.html>
Можно использовать его совместно с таким кодом TypoScript:
page = PAGE
page.10 = FLUIDTEMPLATE
page.10 {
  file = fileadmin/templates/MyTemplate.html
  partialRootPath = fileadmin/templates/partial/
  variables {
    mylabel = TEXT
    mylabel.value = Label coming from TypoScript!
  }
}
В результате заголовок страницы и метка из TypoScript будут вставлены в названии.
MULTIMEDIA
Этот элемент вставляет файл мультимедиа. Текстовые файлы выводятся непосредствен­но. Java, Flash, аудио и видео файлы используют тег embed.
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource /stdWrap
Файл мультимедиа. Возможные типы:
txt, html, htm: вставляются непосредствен­но, можно использовать лишь свойства ".stdWrap".
class: Java-приложение.
swf: анимация Flash.
swa, dcr: анимация ShockWave.
au, wav, mp3: звук.
avi, mov, asf, mpg, wmv: клипы (AVI, QuickTime, MPEG4).

params
string /stdWrap
Параметры для объектов мультимедиа. Используются для определения autostart, type, width, height и т.п. Каждый тип файлов имеет свой набор параметров. Неполный список приведен за текущей таблицей.

Пример:
params (
  type = application/x-shockwave-flash
  width = 200
  height = 300
)
Сформирует подобный тег
<embed .... type="application/x-shockwave-flash" width="200" height="300">

Для параметров устанавливаемых по умолчанию (таблица ниже) пустая строка удалит параметры из тега embed.
Пример:
params (
  height =
)

Замечание: если здесь установить width или height, то width или height, установленные через ".width" и ".height", будут переназначены.

width
integer /stdWrap
Атрибут width тега embed.
Не используется для файлов txt, html, htm и звуковых.
200
height
integer /stdWrap
Атрибут height тега embed.
Не используется для файлов txt, html, htm и звуковых.
200
stdWrap
->stdWrap


[tsref:(cObject).MULTIMEDIA]
Значимые параметры для .params
Для разных типов файлов могут быть установлено множество разных параметров. Здесь приведен неполный список некоторых из этих параметров:
au, wav, mp3:
Параметр:
Описание:
По умолчанию:
width
Width of the controls. If not set, the browser defaults to 200.

height
Высота элемента. Если не установлено, по умолчанию в браузерах используется 16.

loop
Повторение звука по окончании воспроизведения. true или false.

autostart
Автоматическое начало воспроизведения звука. true или false.


avi, mov, asf, mpg, wmv:
Parameter:
Описание:
По умолчанию:
width
Ширина клипа.
200
height
Высота клипа.
200
autostart
Автоматическое начало проигрывания видео. true или false.

Замечание: не для "mov", здесь параметр называется "autostart". Смотрите пример ниже.


swf, swa, dcr:
Parameter:
Описание:
По умолчанию:
width
Ширина элемента. Если не установлено, по умолчанию в браузерах используется примерно 200.
200
height
Высота элемента. Если не установлено, по умолчанию в браузерах используется примерно 200.
200
quality
Качество видео.
high

class:
Parameter:
Описание:
По умолчанию:
width
Ширина объекта.
200
height
Высота объекта.
200

Пример для QuickTime (mov):
params (
  width = 256
  height = 208
  autoplay = true
  controller = true
  loop = false
  pluginspage = http://www.apple.com/quicktime/
)
SVG
Так можно вставить SVG. Можно воспользоваться непосредствен­но данными XML или ссылкой на файл. Flash зарезервирован для использования в браузерах, не имеющих встроенной поддержки SVG, так что это будет работать и в, например, IE 6/7/8.
Свойство:
Тип данных:
Описание:
По умолчанию:
width
integer /stdWrap
Ширина SVG.
600
height
integer /stdWrap
Высота SVG.
400
src
file resource /stdWrap
Файл ресурс SVG.

Пример:
src = fileadmin/svg/tiger.svg

value
XML /stdWrap
Непосредственные данные XML для SVG.
Игнорируются, если определен "src".

noscript
string /stdWrap
Выводится, если невозможно вывести SVG.

stdWrap
->stdWrap


[tsref:(cObject).SVG]
Пример:
10 = SVG
10 {
  width = 600
  height = 600
  value (
    <rect x="100" y="100" width="500" height="200" fill="white" stroke="black" stroke-width="5px"/>
    <line x1="0" y1="200" x2="700" y2="200" stroke="red" stroke-width="20px"/>
    <polygon points="185 0 125 25 185 100" transform="rotate(135 125 25)" />
    <circle cx="190" cy="150" r="40" stroke="black" stroke-width="2" fill="yellow"/>
  )
  noscript.cObject = TEXT
  noscript.cObject.value = No SVG rendering possible, please use a browser.
}
Этот пример покажет несколько геометрических фигур.
EDITPANEL
Это объект содер­жимого вставляется только если пользователь внутреннего интерфейса авторизован на сайте, а также установлено и загружено расширение редактирования во внешнем интерфейсе. Приведенная ниже справка относится к системному расширению "feedit". При этом EDITPANEL также требует отображения Панели администрирования (config.admPanel = 1) и включения параметр­а "Отобразить значки редактирования". При вставке панели редактирования, кеширование страницы отключается.
Панель редактирования вставляет значки для перемещения, удаления, сокрытия и создания записей.
В связке с css_styled_content, EDITPANEL выводится для каждого элемента содержи­мого на странице. Также можно вставить EDITPANEL в шаблон, используя TypoScript.
Пример
page = PAGE
page.10 = EDITPANEL
page.10 {
	...
}

При этом нечего будет редактировать во внешнем интерфейсе, но можно воспользоваться панелью для, например, создания новых записей.
Замечание
для работы требуется установка расширения "feedit".
Свойство:
Тип данных:
Описание:
По умолчанию:
label
string /stdWrap
Заголовок панели. Возможно вставить заголовок записи посред­ством %s.

Пример:
label = Раздел <b>%s</b>

allow
string
Определение доступных функций. Кроме того, этот список может уменьшиться, если BE_USER не имеет прав на совершение каких-либо действий.
Значения перечисляются через запятую. Здесь можно выбирать из следующих параметров:
toolbar,edit,new,delete,move,hide 
(панель инструментов — общий список значков на странице, поэтому используйте ее лишь для записей страниц).

newRecordFromTable
string
Отображение панели для создания новых элемен­тов (вверху списка) на странице из этой таблицы.

newRecordInPid
int
Определение ID страницы, на которой создаются новые записи (за исключе­нием новых страниц).

line
boolean / int
Если установлено, то после панели будет помещена черная ли­ния. Это значение определяет расстояние от черной линии до па­нели.

edit.displayRecord
boolean
Если установлено, то редактируемая запись отображается над формой редактирования.

onlyCurrentPid
boolean
Если установлено, то с панелью будут отображены лишь записи с pid, соответствующие текущему id (TSFE->id).

innerWrap
wrap /stdWrap
Обертки панели редактирования.

outerWrap
wrap /stdWrap
Обертка всей панели редактирования, включая черную линию (если установлена).

printBeforeContent
boolean
Обычно панель редактирования отображается под соответствующим ей элементом. Если установлен этот параметр, панель выводиться перед редактируемым элементом.

Пример:
tt_content.stdWrap.editPanel.
printBeforeContent = 1

так панель редактирования выводится перед редактируемыми элементами при использовании css_styled_content.
0
previewBorder
boolean / int
Если установлено, то элементы скрытые, со временем начала/окончания, будут предварительно видны с рамкой.
Целое значение определяет толщину рамки.

previewBorder.innerWrap
previewBorder.outerWrap
previewBorder.color
wrap / HTML color
innerWrap обертки элемен­тов содер­жимого (включая значки) внутри рамки предварительного просмотра (таблица HTML). 

outerWrap обертки всего элемента содержи­мого, включая рам­ку. 

color обозначает цвет рамки.

stdWrap
->stdWrap


[tsref:(cObject).EDITPANEL]

GIFBUILDER
GIFBUILDER
GIFBUILDER это объект, использующийся во многих ситуациях для создания файлов gif. Везде, где подразумевается ->GIFBUILDER объект, имеются ввиду применяемые свойства.
Используя TypoScript можно определить "числовой массив" "ОБЪЕКТОВ GIFBUILDER" (вроде "TEXT", "IMAGE" и т.п.), которые будут преобразованы в изображения друг за другом.
Название "GIFBUILDER" пришло из тех времен, когда поддерживался только лишь формат файлов GIF. PNG и JPG тогда только создавались (настраивается через $TYPO3_CONF_VARS['GFX']).
ЗАМЕЧАНИЕ (+calc)
Всегда, когда функция "+calc" добавляется к значению в типе данных для приведенных ниже свойств, можно исполь­зовать размерности объектов TEXT и IMAGE из массива GifBuilderObj. Это осуществляется посредством тега вроде: "[10.w]" или "[10.h]", где "10" номер в массиве GifBuilderObj, а "w"/"h" обозначает ширину или высоту объекта.
Специальное свойство "lineHeight" (напр. "[10.lineHeight]") использует высоту одной строки текста.
Используя специальную функцию max(), можно определить максимальное из нескольких значений. Пример:
XY: [10.w]+[20.w], max([10.h], [20.h])

Вот полный пример (взят из "styles.content (default)"):
styles.header.gfx1 = IMAGE
styles.header.gfx1 {
  wrap = {$styles.header.gfx1.wrap}
  file = GIFBUILDER
  file {
    XY = [10.w]+10 ,{$styles.header.gfx1.itemH}
    backColor = {$styles.header.gfx1.bgCol}
    reduceColors = {$styles.header.gfx1.reduceColors}
    10 = TEXT
    10 {
      text.current = 1
      text.crop = {$styles.header.gfx1.maxChars}
      fontSize = {$styles.header.gfx1.fontSize}
      fontFile = {$styles.header.gfx1.file.fontFile}
      fontColor = {$styles.header.gfx1.fontColor}
      сме­щение = {$styles.header.gfx1.fontOffset}
    }
  }
}

Как видите, изображе­ние gif имеет ширину, определяемую как ширина выводимого на нем текста + 10 пикселей. Вы­сота — фиксированное значение константы {$styles.header.gfx1.itemH}.
Основной объект (Top Level Object) "_GIFBUILDER" 
Для GIFBUILDER возможно определить глобальные настройки через объект основного уровня “_GIFBUILDER”. Одно из доступных свойств глобальной настройки GIFBUILDER — это “charRangeMap”.
.charRangeMap
Через это свойство можно глобально определить шрифтовые файлы для определенных диапазонов символов. Напри­мер, GIFBUILDER для фор­мирования gif файлов для латинских симво­лов может понадобиться определенный шрифт, а из другого шрифта true type могут быть взяты японские глифы. При этом нужно определить использование шрифтовых файлов для различных диапазонов Unicode кодов символов.
В объекте GIFBUILDER это можно сделать через параметр "splitRendering", но если на сайте имеются сотни объектов GIFBUILDER, то не очень удобно добавлять по 5-10 строк настроек для формирования каждого текста. Вместо этого воз­можно использование этой глобальной настройки для определения соответствия символов и базовых шрифтов.
Свойство:
Тип данных:
Описание:
По умолчанию:
[array] 
string
Название основного шрифта, соответствующего данной конфи­гурации. Помните, что используется лишь название файла шрифта — путь удаляется. Это сделано для облегчения  на­стройки и решения проблем при перемещении файла шрифта в другое место внутри расширения.

Например, при использовании файлов шрифтов “EXT:myext/fonts/arial.ttf” или “t3lib/fonts/arial.ttf”, оба они бу­дут соответствовать одной и той же конфигурации.

Ключ:
Значение ключа массива используется при вызове настройки в конфигурации “splitRendering” индивидуальных объектов GIFBUILDER. В приведенном примере ключ – “123”. 
Примечание: если ключ уже находится в локальной настройке GIFBUILDER, то ее содержание сохраняется и не заменяется. Поэтому возможно создать локальную настройку, замещающую глобальную.

Пример:
_GIFBUILDER.charRangeMap {
  123 = arial.ttf
....

[array].charMapConfig
TEXT / splitRendering.[array] configuration
Установка настройки splitRendering. За деталями обратитесь к объекту GIFBUILDER TEXT.

Пример:

_GIFBUILDER.charRangeMap {
  123 = arial.ttf
  123 {
    charMapConfig {
      fontFile = t3lib/fonts/vera.ttf
      value = -65
      fontSize = 45
    }
    fontSizeMultiplicator = 2.3
  }
}

В этом примере объект GIFBUILDER TEXT со шрифтом “arial.ttf” имеет splitConfiguration, использующую “t3lib/fonts/vera.ttf” для всех символов в кодировке Unicode ниже/равных 65 в value.

[array].fontSizeMultiplicator
double
Если установлено, будет взят размер шрифта объекта TEXT GIFBUILDER и умножен на это значение, что переопределит свойство “fontSize” внутри “charMapConfig”.

[array].pixelSpaceFontSizeRef
double
Если установлено, то это служит множителем для четырех свойств  [x/y]Space[Before/After] разбиения для формирования, для связи размера шрифта с этим значением. 
Другими словами, так как размер пробела в пикселях может изменяться в зависимости от используемого размера шрифта, можно про­сто определить это через данное значение: какому размеру шрифта оптимально подходят размеры пробелов, а значения для остальных размеров будут выставлены автомати­чески.

Пример:
_GIFBUILDER.charRangeMap {
  123 = arial.ttf
  123 {
    charMapConfig {
      fontFile = t3lib/fonts/vera.ttf
      value = 48-57
      color = green
      xSpaceBefore = 3
      xSpaceAfter = 3
    }
    pixelSpaceFontSizeRef = 24
  }
}

Здесь xSpaceBefore и xSpaceAfter будут “3”, при размере шриф­та 24. Если эту настройку использовать в объекте GIFBUILDER TEXT, с размером шрифта 16, то значение пробела будет “16/24”, соответствен­но равно “2”.

[tsref:_GIFBUILDER.charRangeMap]
Названия объектов в этом разделе
Как только в этом разделе встречается что-либо с названием "объект", подразумевается объект "GifBuilderObj", а не на "cObjects" из предыдущего раздела. Иначе может получиться путаница, так как объекты "IMAGE" и "TEXT" встречаются в обоих разделах.
Свойство:
Тип данных:
Описание:
По умолчанию:
1,2,3,4...
GifBuilderObj
+ .if (->if)
.if (->if) свойство всех объектов gifbuilder. Если свойство присутству­ет, но НЕ установлено, объект НЕ формируется! Это соответствует функциональности ".if" функции stdWrap.

XY
x,y +calc /stdWrap
Размер файла gif. 
100,20
format
"gif" / "jpg"
Выводимый тип. 
"jpg"/"jpeg" = изображ­ение jpg.
gif
reduceColors
posint (1-255) /stdWrap
Уменьшение количества цветов (для файла gif).

transparentBackground
boolean /stdWrap
Установка этого значения делает фон прозрачным. TYPO3 делает прозрачным цвет, находящийся в позиции 0,0 в изображении (верх­ний левый угол).
При обработке текста, нужно ВЫКЛЮЧИТЬ параметр niceText, так как результат без этого параметра будет более приемлемым.

transparentColor
HTMLColor /stdWrap
Определение прозрачного цвета.

Пример значений:
#ffffcc 
red 
255,255,127

Параметры:
transparentColor.closest = 1
Это включает близкие цвета в этот параметр. Это нужно, если изоб­ражение плохо "очищено" или "замылено".

ЗАМЕЧАНИЕ: это может не работать, при использовании парамет­ров reduceColors или niceText.

quality
posint (10-100)
Качество JPG (если“.format” = jpg/jpeg)

backColor
GraphicColor 
/stdWrap
Фоновый цвет для gif.
white
сме­щение
x,y +calc /stdWrap
Смещение всех объектов в gif.
0,0
workArea
x,y,w,h + calc /stdWrap
Определение рабочей области в файле gif. Все GifBuilderObj рассмат­ривают это как размерности файла gif в зависимости от размещения, перекрывающих изображений и т.п. Лишь текстовые TEXT, превышаю­щие границы рабочей области будут выводиться вне этой области.

maxWidth
pixels /stdWrap
Максимальная ширина файла gif.

maxHeight
pixels /stdWrap
Максимальная высота файла gif.

[tsref:->GIFBUILDER]
TEXT
Свойство:
Тип данных:
Описание:
По умолчанию:
text
->stdWrap
Это текстовая строка для файла gif. Элемент формируется, только если строка не пустая.
Массив cObj->data загружается вместе с записью страницы, если, например, объект GIFBUILDER используется в GMENU или IMGMENU

breakWidth
integer /stdWrap
Определяет максимальную ширину для объекта, наложение на элементы приведет к автоматическому переносу строки.

breakSpace
float
Определяет фактор кратный высоте строки текущего элемента.
1.0
textMaxLength
int
Максимальная длина текста. Это просто обычный разрыв, исключающий неприятности при обработке очень длинных текстов!
100
maxWidth
pixels /stdWrap
Установка максимальной ширины в пикселях для текста. Уменьшите  fontSize, если текст не вмещается в эту ширину.

Не поддерживается установка альтернатив­ных fontSize в параметрах splitRendering.

(Автор Rene Fritz <r.fritz@colorcube.de>)

doNotStripHTML
boolean
Если установлено, теги HTML во вставленной строке НЕ удаляются. Во всех других случаях, код HTML по умолчанию удаляется!
0
fontSize
posint
Размер шрифта.
12
fontColor
GraphicColor /stdWrap
Цвет шрифта.
black
fontFile
resource
Шрифт (вы можете загрузить шрифт truetype!).
Nimbus (Arial-clone)
angle
degree
Угол вращения текста. 

Замечание: не доступно, если установлено spacing/wordSpacing.
0
Диапазон: -90 til 90
align
align
Выравнивание текста.
left
сме­щение
x,y +calc /stdWrap
Смещение текста.
0,0
antiAlias
boolean
Сглаживание FreeType. Помните, что по умолчанию "включено"!

Замечание: параметр­ не доступен, если включен .niceText.
1
iterations
posint
Сколько раз текст должен быть "распечатан" сам в себя. Появляется эффект жирного текста.

Замечание: параметр­ не доступен, если включен .niceText.
1
spacing
posint
Если истина, текст НЕ печатается. 
Эта возможность используется, если необходим объект-тень от тек­ста, но сам текст не нужен.
0
wordSpacing
posint
Если установлен этот параметр, текст не обрабатывается. Тень и объем также, так что не применяйте их!!! Но это возможность фор­мирования imageMap на основе размеров текста без его обработки.
= ".spacing"*2
hide
boolean
Если истина, текст НЕ печатается. 
Эта возможность используется, если необходим объект-тень от тек­ста, но сам текст не нужен.
0
hideButCreateMap
boolean
Если установлен этот параметр, текст не обрабатывается. Тень и объем также, так что не применяйте их!!! Но это дает возможность фор­мирования imageMap на основе размеров текста без его обработки.

emboss
GifBuilderObj->EMBOSS


shadow
GifBuilderObj->SHADOW


outline
GifBuilderObj->OUTLINE


imgMap
->IMGMAP

->stdWrap properties for "altText" and "titleText" in this case


niceText
boolean
Это очень востребованная возможность, помогающая фор­мировать маленькие символы гораздо лучше, чем обычно это делает библио­тека freetype. Но это сильно загружает систему!
Принцип — создание черно-белого файла gif размера в два и более раз большего, чем требуемый файл, затем увеличенный текст рас­печатывается в этот файл. После чего ImageMagick (IM) уменьшает маску и маскирует текст для оригинального файла gif посредством временной маски. 
Фактически формируется шрифт двойного размера и уменьшается, добавляя более плавную форму для символов. Некоторые шрифты лучше подходят для этого, чем другие. Если качество не требуется, не используйте эту функцию.

Некоторые свойства:
.before = параметры IM перед масштабированием;
.after = параметры IM после масштабирования;
.sharpen = значение резкости для маски (после масштабирования), целое 0-99 (дает возможность сделать размытый текст более чет­ким!!!);
.scaleFactor = фактор масштабирования, целое 2-5.

splitRendering.compX
splitRendering.compY
splitRendering.[array]


Split the rendering of a string into separate processes with individual configurations. By this method a certain range Разбивает формирование строки на отдельные процессы с индиви­дуальными настройками. Посредством этого, некоторые наборы сим­волов могут формироваться другим шрифтом или размером шрифта. Полез­но, если нужно использовать разные шрифты на одной строке, где могут быть латинские символы вместе, например, с японскими и ис­пользуются разные файлы шрифтов.
Так можно сформировать ключевые слова другим шрифтом/разме­ром/цветом.

Свойства:
splitRendering.compX = дополнительное расстояние в пикселях меж­ду частями в направлении x;
splitRendering.compY = дополнительное расстояние в пикселях меж­ду частями в направлении y;
splitRendering.[array] = ключевые слова  [charRange, highlightWord]
splitRendering.[array] {
  fontFile = альтернатив­ный файл шрифта для формирования этих символов;
  fontSize = альтернатив­ный размер шрифта для формирования этих символов;
  color = альтернатив­ный цвет для формирования этих символов, работает ТОЛЬКО без “niceText”;
  xSpaceBefore = x-расстояние перед этой частью;
  xSpaceAfter = x-расстояние после этой части;
  ySpaceBefore = y-расстояние перед этой частью;
  ySpaceAfter =  y-расстояние после этой части;
}

Ключ: charRange
splitRendering.[array].value = список диапазонов символов через за­пятую (напр. “100-200”) в виде Unicode кодов. Список воспринимает начальную и конечную точки, например “ - 200” или “ 200 -” и еди­ничные значения, например “65, 66, 67”

Ключ: highlightWord
splitRendering.[array].value = выделяемые слова, для этого прово­диться регистро-зависимый поиск.

Ограничения:
Значения компенсации в пикселях не корректируются для фак­тора масштабирования, используемого в niceText. В основном это означает, что при использовании niceText, эти значения бу­дут вполовину уменьшены.
При использовании изменения расстояния между словами, не работает режим “highlightWord”.
Переопределение цвета не работает вместе с “niceText”.

Пример:
10.splitRendering.compX = 2
10.splitRendering.compY = -2
10.splitRendering.10 = charRange
10.splitRendering.10 {
  value = 200-380 , 65, 66
  fontSize = 50
  fontFile =  t3lib/fonts/nimbus.ttf
  xSpaceBefore = 30
}
10.splitRendering.20 = highlightWord
10.splitRendering.20 {
  value = TheWord
  color = red
}

[tsref:->GIFBUILDER.(GBObj).TEXT]
SHADOW
Свойство:
Тип данных:
Описание:
По умолчанию:
textObjNum
pos-int
Должно указывать на объект TEXT, если это свойство shadow не яв­ляется непосредствен­ным свойством объекта TEXT ("отдельная тень"). При этом shadow должна знать, тенью какого объекта TEXT она долж­на быть!
С другой стороны, если тень является свойством объекта text, это свойство не нужно.

сме­щение
x,y
Смещение тени.

color
GraphicColor
Цвет тени.

blur
posint (1-99)
Размытие тени. Значащими являются значения выше 40, вроде 40,50,60,70,80,90.

Замечание: к сожалению, возможности размытия ImageMagick не слишком сильны в версии 4.2.9. Это относится к версиям выше 5.2.0, в которые добавлена функция размытия по Гауссу. НО на деле по­следняя разработка ImageMagick еще плохо сочетается с TYPO3.

opacity
posint (1-100)
Непрозрачность (прозрачность^-1) 
100% непрозрачность = 0% прозрачности. Применяется лишь для размытия.

intensity
posint(0-100)
"Размер" тени. Это значение, если оно большое, комбинируется с раз­мытием тени — создается что-то вроде размытых контуров.

[tsref:->GIFBUILDER.(GBObj).SHADOW]
EMBOSS
Объем — фактически две тени, смещенные в разных направлениях и с разными цветами, создающие эффект блика на объемном тексте.
Свойство:
Тип данных:
Описание:
По умолчанию:
textObjNum
pos-int
Должно указывать на объект TEXT, если свойство shadow не является свойством самого объекта TEXT ("отдельная тень"). При этом shadow нужно указать, тенью какого объекта TEXT она должна быть!
С другой стороны, если тень является свойством объекта text, это свойство не нужно.

сме­щение
x,y
Смещение объема.

highColor
GraphicColor
Цвет верхней кромки.

lowColor
GraphicColor
Цвет нижней кромки.

blur
posint (1-99)
Размытие тени. Значащими являются значения выше 40, вроде 40,50,60,70,80,90.

opacity
posint (1-100)
Непрозрачность (прозрачность -1) 
100% непрозрачность = 0% прозрачности. Применяется лишь для размытия.

intensity
posint(0-100)
"Размер" объема. Большое значение комбинируется с размытием — создаются размытые контуры.

[tsref:->GIFBUILDER.(GBObj).EMBOSS]

OUTLINE
Контуры обычно плохо выглядят, так как они делаются через наложение текста 4-8 раз. Лучше попытайтесь использо­вать тень с высокой интенсивностью. Это лучше работает!
Свойство:
Тип данных:
Описание:
По умолчанию:
textObjNum
pos-int
Должно указывать на объект TEXT, если это свойство shadow не является не­посредственным свойством объекта TEXT ("отдельная тень"). При этом shadow должна знать, тенью какого объекта TEXT она должна быть!
С другой стороны, если тень является свойством объекта text, это свойство не нужно.

thickness
x,y
Толщина по каждому из измерений, диапазон 1-2

color
GraphicColor
Цвет контура

[tsref:->GIFBUILDER.(GBObj).OUTLINE]
BOX
Свойство:
Тип данных:
Описание:
По умолчанию:
dimensions
x,y,w,h +calc /stdWrap
Размерность блока. 
x,y    смещение. 
w,h   размерность. При размерности 1, получим линию, шириной в 1 пиксель!

color
GraphicColor
Цвет заливки.
black
opacity
pos-int (1-100)
Непрозрачность (прозрачность -1) 
100% непрозрачность = 0% прозрачности.
100
align
VHalign
Пара значений, определяющих горизонтальное и вертикальное выравнивания.

Значения:
Горизонтальное выравнивание: r/c/l соответственно по правому краю, по центру, по левому краю.
Вертикальное выравнивание: t/c/b соответственно по верху, по центру, по низу.

Пример:
Центрирование по горизонтали, и по низу по вертикали:
align = c, b
l, t
[tsref:->GIFBUILDER.(GBObj).BOX]
ELLIPSE
Свойство:
Тип данных:
Описание:
По умолчанию:
dimensions
x,y,w,h +calc /stdWrap
Размерности заполненного элипса. 
x,y    - смещение. 
w,h    - размерности. Размерности 1 соответствует ширина в 1 пиксель!

color
GraphicColor
Цвет заливки.

Пример:
file = GIFBUILDER
file {
  XY = 200,200
  format = jpg
  quality = 100
  10 = ELLIPSE
  10.dimensions = 100,100,50,50
  10.color = red
}
black
[tsref:->GIFBUILDER.(GBObj).ELLIPSE]

IMAGE
Свойство:
Тип данных:
Описание:
По умолчанию:
file
imgResource
Файл изображения.

сме­щение
x,y +calc /stdWrap
Смещение.
0,0
tile
x,y
Мозаичное x,y изображение. 
Максимум - 20 в каждом направлении. Если нужно больше — используйте большее изображение.

align
VHalign
Смотрите в "Справочнике по типам данных" в начале этого документа или в таблице "BOX".

mask
imgResource
Не обязательный файл-маска для изображения.

[tsref:->GIFBUILDER.(GBObj).IMAGE]
EFFECT
Синтаксис:
.value = [Property] = [value] | [Property] = [value]
Пример:
lib.image = IMAGE
lib.image {
  file = GIFBUILDER
  file {
    XY = 1024,768
    format = jpg
    10 = IMAGE
    10.file = fileadmin/image.jpg

    20 = EFFECT
    20.value = gamma=1.3 | flip | rotate=180
  }
}

Свойство:
Тип данных:
Описание:
По умолчанию:
gamma
0.5 - 3.0
Значение гаммы.
1.0
blur
1-99
Размытие краев внутрь изображ­ения.
0
sharpen
1-99
Резкость края внутрь изображения.
0
solarize
0-99
Уменьшение количества цветов.

swirl
0-100
Изображение закручивается или раскручивается от центра.
0
wave
амплитуда, длина
Все горизонтальные края преобразуются в волну заданной амплитуды и длины.
Максимальное значение амплитуды и длины равно 100.

Пример:
20 = EFFECT
20.value = wave=1,20

charcoal
0-100
Эффект рисунка углем и его интенсивность.

gray
-
Преобразование изображения оттенки серого.

Пример:
Придание изображению легкой волнистости и преобразование его в оттенки серого.
20 = EFFECT
20.value = wave=1,20 | gray

edge
0-99
Скругление углов.

emboss
-
Эффект рельефа: подсветка или затенение, заменяющие светлые и темные границы изображ­ения.

flip
-
Переворот по вертикали.

flop
-
Переворот по горизонтали.

rotate
0-360
Угол вращения по часовой стрелки в градусах.
Размерность изображения будет при необходимости увеличена, так что ничего не обрежется в оригинале.
0
colors
2-255
Количество разных цветов, используемых в изображении.

shear
-90 - 90
Сдвиг по горизонтали.

invert
-
Инвертирование цветов.

[tsref:->GIFBUILDER.(GBObj).EFFECT]
WORKAREA
Установки другой рабочей области.
Свойство:
Тип данных:
Описание:
По умолчанию:
set
x,y,w,h + calc /stdWrap
Настройка размеров рабочей области. 
x,y — смещение. 
w,h — размеры. 
При использовании "calc" ознакомьтесь с соответствующими замечаниями по разделу "GIFBUILDER". 

clear
(isset)
Установка текущих значений по умолчанию.
Проверка для использования isset().

[tsref:->GIFBUILDER.(GBObj).WORKAREA]
CROP
Замечание: этот объект устанавливает размеры workArea соответственно новым размерам изображе­ния!
Свойство:
Тип данных:
Описание:
По умолчанию:
backColor
GraphicColor
Смотрите "Справочник по типам данных".
backColor оригинала
align
VHalign
Горизонтальное и вертикальное выравнивание рамки обрезки.
Смотрите "Справочник по типам данных".
l, t
crop
x,y,w,h + calc /stdWrap
x,y – смещение рамки обрезки от позиции, определяемой в "align".
w,h — размеры рамки.
При использовании "calc" ознакомьтесь с соответствующими замечаниями по разделу "GIFBUILDER". 

[tsref:->GIFBUILDER.(GBObj).CROP]
SCALE
Замечание: этот объект устанавливает размеры workArea соответственно новым размерам изображе­ния!
Свойство:
Тип данных:
Описание:
По умолчанию:
width
pixels + calc /stdWrap
Ширина масштабируемого изображения.

height
pixels + calc /stdWrap
Высота масштабируемого изображения.

params
ImageMagickParams
Параметры для обработки.

[tsref:->GIFBUILDER.(GBObj).SCALE]
ADJUST
Позволяет выставлять тональный диапазон, наподобие диалога "уровни" в Photoshop.  Можно установить входные и выходные уровни, таким образом, переопределить тональный диапазон изображения. Если нужно скорректировать гамму, взгляните на объект EFFECT.
Пример:
20 = ADJUST
20.value = inputLevels = 13, 230

Свойство:
Тип данных:
Описание:
По умолчанию:
inputLevels
low, high
Этот параметр позволяет переопределить тоновый диапазон, сделать тени темнее, света светлее и увеличить контраст.
Диапазон значений для "low" и "high" — целые числа от 0 до 255, где "high" должно быть больше "low".
Значение "low" при этом будет переназначено в тон 0, а значение "high" — в 255.

Пример:
В этом примере тоновый диапазон изображения начнется с 50 для оригинала (что станет 0 в итоговом изображении) и закончится на 190 для оригинала (что станет 255 в новом изображении).
20 = ADJUST
20.value = inputLevels = 50, 190

outputLevels
low, high
Этот параметр позволяет переопределить тоновый диапазон, сделать тени светлее, света темнее и уменьшить контраст.
Диапазон значений для "low" и "high" — целые числа от 0 до 255, где "high" должно быть больше "low".
Начало тонового диапазона, то есть 0, будет переназначено в "low", а конечное значение, то есть 255, — в "high".

Пример:
В этом примере тоновый диапазон изображения станет таким, что исчезнут пиксели с тоном ниже 50 и выше 190 для оригинала (что станет 0 и 255, соответственно, в новом изображении).
20 = ADJUST
20.value = outputLevels = 50, 190

autoLevels
-
Автоматическая установка уровней.

[tsref:->GIFBUILDER.(GBObj).ADJUST]
Не GifBuilderObj
IMGMAP
Используется в GifBuilderObj "TEXT" для создания карты изображений для файла gif. Особенно востребовано с объекте меню IMGMENU..
Свойство:
Тип данных:
Описание:
По умолчанию:
url
url
url для ссылки.
Автоматически предоставляется для объектов меню IMGMENU
target
target
Цель для ссылки.
Автоматически предоставляется для объектов меню IMGMENU
noBlur
Boolean
Обычно, при исполь­зовании браузера MSIE, графические ссылки "размывают­ся". При этом убирается некрасивая окантовка вокруг ссылок. 
Если установлено это свойство, ссылки НЕ размываются при "onFocus".
Автоматически предоставляется для объектов меню IMGMENU
explode
x,y
Так можно "расширить" и "сжать" карту изображений. Полезно для увеличения области реакции на ссылку, чем символы текста.

altText
string
Значение атрибута alt.

(Используется из объектов TEXT Gifbuilding, имеющих свойства stdWrap. В других случаях таких свойств нет).

titleText
string
Значение атрибута title.

(Используется из объектов TEXT Gifbuilding, имеющих свойства stdWrap. В других случаях таких свойств нет).

[tsref:->IMGMAP]
Объекты MENU
Общие свойства
Здесь приведены общие для всех объектов меню свойства, если не установлены другие! 
Свойство:
Тип данных:
Описание:
По умолчанию:
sectionIndex

(см. далее).

alternativeSortingField

Обычно элементы меню упорядочиваются по полям "sorting" таблиц pages и tt_content. Здесь возможно ввести список полей, которые будут использоваться в операторе SQL "ORDER BY" вместо этого.

Примеры (для таблицы "pages"):
alternativeSortingField = title desc
(формирование меню в обратном алфавитном порядке)

ОГРАНИЧЕНИЯ: 
Это свойство работает с обычными меню, меню sectionsIndex и спе­циальными меню, типа "directory".

minItems
int
Минимальное количество элемен­тов в меню. Если количество стра­ниц меньше этого числа, вставляются фиктивные меню с заголов­ком "..." и uid=[currentpage_id].

Имеет приоритет над HMENU.minItems

maxItems
int
Максимальное количество элемен­тов в меню. Элементы сверх этого игнорируются.

Имеет приоритет над HMENU.maxItems

begin
int +calc
Первый элемент меню. 

Пример:
формирование меню, в котором пропускаются первые два элемен­та, меню начинается с элемента 3:
  begin = 3  

Имеет приоритет над HMENU.begin

JSWindow
boolean
Если установлено, ссылки элемен­тов меню будут открываться через  JavaScript во всплывающем окне. 

.newWindow булева переменная, позволяющая каждому элементу меню открываться в собственном всплывающем окне, вместо открытия их в одном и том же окне.

.params  – список параметров, посылаемых в функцию открытия окна JavaScript, например: 
width=200,height=300,status=0,menubar=0

ПРИМЕЧАНИЕ: не работает с JSMENU.

imgNamePrefix
string
Перфикс для названий изображений. Этот префикс добавляется с  uid страницы.
"img"
imgNameNotRandom
boolean
Если установлено, названия изображений не назначаются случай­ным образом. Полезно при работе с этими изображениями во внешнем JavaScript.

ПРИМЕЧАНИЕ: не устанавливайте, если работаете с меню вместе с sectionIndex! При этом требуются уникальные названия элемен­тов, на основе чего-либо еще, кроме uid родительской страницы!

debugItemConf

Вывод (через функцию debug()) массив настроек для каждого эле­мента меню. Полезно для отладки optionSplit и т.д....
Применимо к GMENU, TMENU, IMGMENU

overrideId
integer (id страницы)
Если установлено, все ссылки в меню будут указывать на страницу с этим id. Вместо фактического uid страницы, отсылается параметр "&real_uid=[uid]".
Это интеллектуальная функция, применяющаяся при вставке меню из другого места, возможно общего меню, так, чтобы элементы меню вели на одни и те же страницы, формирующиеся должным образом по real_uid.
Применимо к  GMENU, TMENU, IMGMENU

addParams
string
Дополнительные параметры для ссылок меню. 

Пример:
"&some_var=some%20value"
Должно быть не обработанным url.
Применимо к  GMENU, TMENU, IMGMENU

showAccessRestrictedPages
integer (id страницы) / keyword "NONE"
Если уста­новлено, в меню будут включены страницы, разрешенные для доступа группе внешних пользователей. Конечно же страницы не будут доступны, поэтому ссылка будет вести на страницу с уста­новленным значением ID. На этой странице можно разместить фор­му регистрации или какое-либо сообще­ние.
Если используется значение “NONE”, ссылка не будет изменена, и при щелчке сайт сформирует событие "страница не найдена" (что, разумеется, может быть использовано для захвата события и со­вершения соответствующего действия).

Свойства:
.addParam = дополнительный параметр­ для URL, который может содержать два маркера; ###RETURN_URL###, замещаемый ссыл­кой, как если бы страница доступна, и ###PAGE_ID###, замещае­мый id исходящей страницы (может использоваться для поиска fe_group, требуемой для доступа).

Пример:
showAccessRestrictedPages = 22
showAccessRestrictedPages.addParams = &return_url=###RETURN_URL###&pageId=###PAGE_ID###

В примере, ссылки из меню на запрещенные для доступа страницы ведут на страницу с id 22, на которой указаны возвращаемый URL, через переменную GET “return_url”, и id страницы в переменной GET “pageId”.

itemArrayProcFunc
название функции
Первая переменная, передаваемая в эту функцию — это массив “menuArr” с элементами меню, собранными на основе типа меню.
Этим массивом можно свободно управлять или дополнять его. Только не забудьте снова возвратить его!

Замечание:
свойство .parentObj жестко связано с ссылкой на вызов объекта tslib_menu. Здесь, например ->id – uid элемента меню, генерирую­щего подменю и т.п.

Предварительная установка состояния элемен­та
Состояния элемен­тов, вроде SPC, IFSUB, ACT, CUR и USR, можно переназначить через установку ключа ITEM_STATE в записи стра­ницы. За дополнительной информацией обратитесь к cObject HMENU/special=userdefined.

submenuObjSuffixes
string
+optionSplit
Определение суффикса для альтернатив­ных объектов подменю. Полезно для создания специальных подменю, в зависимости от ро­дительских элемен­тов меню. смотрите пример ниже.

Пример:
В этом примере формируется меню, в котором объекты меню вто­рого уровня зависят от номера элемента меню первого уровня, для которого формируются подменю. Для второго уровня используются  “2” (по умолчанию), “2a” и “2b” (альтернативы). Что из этого ис­пользуется, определяется через “1.submenuObjSuffixes”, с настрой­ками “a |*| |*| b”. Это значит, что первый элемент меню использу­ет настройку “2a”, последний – “2b”, а промежуточные – “2” (суф­фикс не устанавливается).

page.200 = HMENU
page.200 {
  1 = TMENU
  1.wrap = <div style="width:200px; border: 1px solid;">|</div>
  1.expAll = 1
  1.submenuObjSuffixes = a |*|  |*| b
  1.NO.allWrap = <b>|</b><br/>

  2 = TMENU
  2.NO.allWrap = <div style="background:red;">|</div>

  2a = TMENU
  2a.NO.allWrap = <div style="background:yellow;">|</div>

  2b = TMENU
  2b.NO.allWrap = <div style="background:green;">|</div>
}

Результат приведен на следующем рисунке (применимо к тестово­му сайту):


Применимо к  GMENU, TMENU, GMENU_LAYERS, TMENU_LAYERS и GMENU_FOLDOUT при >= 2ого уровня меню.

[tsref:(cObject).HMENU.(mObj)]
Общие состояния элементов для TMENU, GMENU и IMGMENU:
Это общие свойства для TMENU, GMENU и IMGMENU. То есть, они не используются в, например, JSMENU.
Свойство:
Тип данных:
Описание:
По умолчанию:
NO
Boolean / (config)
По умолчанию "обычное" состояние формирования элементов меню. Необхо­димо для всех меню.
Определяя свойства для “NO”, не нужно устанавливать для него “1”. То есть, без установки свойства “NO=1”, меню в любом случае будет сформировано (для TMENU это имеет смысл).

Простейшее меню в TYPO3 можно создать так:

page.20 = HMENU
page.20.1 = TMENU
page.20.1.NO = 1

Это простые теги <a>, в которые помещены заголовки страниц.
1
IFSUB
IFSUBRO
Boolean / (config)
Включение/настройка для элементов меню с подстраницами.
0
ACT
ACTRO
Boolean / (config)
Включение/настройка для элементов меню из корневой линии.
0
ACTIFSUB
ACTIFSUBRO
Boolean / (config)
Включение/настройка для элементов меню из корневой линии, имеющих подстраницы.
0
CUR
CURRO
Boolean / (config)
Включение/настройка для элемен­та меню, представляющего текущую стра­ницу.
0
CURIFSUB
CURIFSUBRO
Boolean / (config)
Включение/настройка для элемен­та меню, представляющего текущую стра­ницу и имеющего подстраницы.
0
USR
USRRO
Boolean / (config)
Включение/настройка для элементов меню с ограниченным доступом, к кото­рым имеется доступ у данного пользователя.
0
SPC
Boolean / (config)
Включение/настройка для страниц "распорок".
Распорки – это страницы типа "распорка". Это не просматриваемые страни­цы, но скорее "контейнеры" для разделения меню.

Замечание: при использовании GMENU, роловеры не работают!
0
USERDEF1
USERDEF1RO
Boolean / (config)
Определенные пользователем, за детальной информацией по использован­ию обратитесь к .itemArrayProcFunc.
Можно назначить значения USERDEF1 и USERDEF2 (+...RO) для ITEM_STATE посредством сценария/пользовательской функции для обработки массива элементов меню. Смотрите HMENU/special=userdefined или свойство .itemArrayProcFunc объектов меню.

USERDEF2
USERDEF2RO
Boolean / (config)
(смотрите выше)

[tsref:(cObject).HMENU.(mObj_itemStates)]
Приоритет: USERDEF2, USERDEF1, SPC, USR, CURIFSUB, CUR, ACTIFSUB, ACT, IFSUB
Все состояния *RO требуют установки настроек “RO” по умолчанию.
[menuObj].sectionIndex
Это разделяемое для всех menuObj свойство. Если оно установлено, то меню не будет состоять из ссылок на страницы "следующего уровня", а будет связано с родительскими страницами, но дополнены "#"-ссылками на cObject, формирую­щиеся на страницах. То есть элементы меню будут связаны с элементами содержимого (на colPos=0!) на странице. Индекс раздела.
.sectionIndex = [boolean]
Если установлено, то выбираются все элементы содер­жимого (из таблицы tt_content) из "Column" = "обычная" и вклю­ченным флагом "Включить в меню". Это соответствует элемен­ту "Карта сайта" типа "Меню секций".
.sectionIndex.type = "all" / "header"
Если дополнительное свойство установлено на "all", то включение флажка "Включить в меню" не оказывает влияния, и выбираются все элементы из colPos=0. 
Если это свойство установлено в "header", то выбираются лишь элементы с видимым заголовком (и заполненным по­лем "заголовок"!). То есть, если установлен "Скрытый" заголовок элемента, страница не появится в меню.
Записи данных /за сценой
При выборе записей меню происходит следующее: запись родительской страницы используется в качестве базовой для записи меню. Это значит, что для всего меню используются любые свойства "no_cache" или "target" родительской страницы. 
Но, конечно, передаются некоторые поля из записей tt_content: вот их соответствия:
$temp[$row[uid]]=$basePageRow;
$temp[$row[uid]]['title']=$row['header'];
$temp[$row[uid]]['subtitle']=$row['subheader'];
$temp[$row[uid]]['starttime']=$row['starttime'];
$temp[$row[uid]]['endtime']=$row['endtime'];
$temp[$row[uid]]['fe_group']=$row['fe_group'];
$temp[$row[uid]]['media']=$row['media'];
$temp[$row[uid]]['header_layout']=$row['header_layout'];
$temp[$row[uid]]['bodytext']=$row['bodytext'];
$temp[$row[uid]]['image']=$row['image'];
$temp[$row[uid]]['sectionIndex_uid']=$row['uid'];

Отсюда видно, что
- поля "header" и "subheader" из tt_content отображаются как "title" и "subtitle" в записях страниц. Поэтому не нужно изменять стандартные объекты меню в соответствии с ними...
- поля "starttime", "endtime", "fe_group", "media" из tt_content отображаются на те же поля в записях страниц.
- поля "header_layout", "bodytext" и "image" отображаются на несуществующие поля в записях страниц.
- новое поле "sectionIndex_uid" вводиться в запись страницы, обнаруженную функцией t3lib_tstemplate->linkData(). Если это поле при­сутствует в записи страницы, функция linkData() вставляет знак диез (#) и номер поля.
Замечание: 
Невозможно создать подменю для меню с sectionIndex. Это не имеет смысла, поскольку эти элементы не являются страницами, а, значит, не имею "дочерних" страниц.
GMENU
GMENU работает как объект под cObject "HMENU" и формирует графическую навигацию, в которой каждая ссылка яв­ляется отдельным файлом gif.
Свойство:
Тип данных:
Описание:
По умолчанию:
RO
Boolean
Включение / отклю­чение настройки RollOver. 
Если это истинно, RO становится объектом GIFBUILDER, определяю­щим шаблон элемента меню, когда указатель мышки находится над ним.
0
expAll
Boolean
Если это истинно, то всегда будет показано меню на уровне под эле­ментом меню. Это соответствует разворачиванию следую­щего уровня меню при щелчке на элементе. Можно включить это, как поведение по умолчанию для всех элемен­тов меню.

collapse
Boolean
Если установлено, "активные" элементы меню, с развернутым следую­щим уровнем элементов, будут снова сворачиваться.

accessKey
Boolean
Если включено, кнопки доступа будут установлены для ссылки в меню.

noBlur
Boolean
Обычно, при исполь­зовании браузера MSIE, графические ссылки "размываются". При этом убирается некрасивая окантовка вокруг ссылок.
Если установлено это свойство, ссылки НЕ размываются при "onFocus".

target
target
Цель для ссылок из меню.
self
forceTypeValue
int
Если установлено, параметр &type ссылки принудительно устанавли­вается в это значение независимо от цели. Переназначается глобаль­ный эквивалент "config", если установлен.

stdWrap
->stdWrap
Обертка всего элемента посредством stdWrap.

Пример:
2 = TMENU
2 {
  stdWrap.dataWrap = <ul class="{register :
     parentProperty}"> | </ul>
  NO {
    ...
  }
}

wrap
wrap
Обертка только если в меню имеются элементы!

applyTotalH
objNumsList (сме­щение)
Полная высота ранее сформированного элемента меню добавляется к смещению GifBuilderObj в этом списке.

Пример:
полезно при создание меню с индивидуальными элементами, но об­щим фоновым изображ­ением, растянутым на все поле, занимаемое меню. При этом нужно установить фоновое изображ­ение для каждого объекта GIFBUILDER и включить номер объекта в этот список. 
Взгляните на реализацию в static_template "styles.gmenu.bug".

applyTotalW
objNumsList (сме­щение)
Полная ширина ранее сформированного элемента меню добавляется к смещению GifBuilderObj в этом списке.

min
x,y (calcInt)
Устанавливает минимальный размер для всего меню.

max
x,y (calcInt)
Устанавливает максимальный размер для всего меню.

useLargestItemX
boolean
Если установлено, то ширина всех элемен­тов меню будет равна большему из них.

useLargestItemY
boolean
Если установлено, то высота всех элемен­тов меню будет равна большему из них.

distributeX
int+
Если установлено, то общая ширина всех элемен­тов меню будет соот­ветствовать этому числу пикселей, путем добавления/удаления одина­кового количества пикселей от ширины каждого элемента.
Переназначает любые установки для ".useLargestItemX"

distributeY
int+
Если установлено, то общая высота всех элемен­тов меню будет соот­ветствовать этому числу пикселей, путем добавления/удаления одина­кового количества пикселей от высоты каждого элемента.
Переназначает любые установки для ".useLargestItemY"

removeObjectsOfDummy
objNumsList
Если для меню принудительно установлено использование опреде­ленного минимального размера, то это — список объектов в объекте gifbuilder, которые удаляются из этого последнего элемента. Это важ­но, если среди элементов меню есть такие, которые применимы лишь в качестве фактических элементов меню!!!

disableAltText
boolean
Если включено, то параметр alt не устанавливается для изображений. Его возможно назначить вручную через “imgParams” (см. далее)

IProcFunc
название функции
В функцию передается внутренний массив “I”, ожидается, что он же будет возвращен. Последующий за вызовом этой функции элемент меню формируется посред­ством интеграции implode() массива $I[parts] в переданный массив. Поэтому можно изменить его в соб­ственных целях.
Смотрите пример в typo3/sysext/cms/tslib/media/scripts/example_itemArrayProcFunc.php

[Common Item States, see above]
+ rollover version for all, except SPC
->GIFBUILDER
+ дополнительные свойства! Смотри­те таблицу ниже.
Это параметр­ы GIFBUILDER для каждой категории элементов меню которые могут быть сформированы.

Замечание: для набора GMENU также возможно определить на­стройку RollOver для состояний элементов. То есть для "Активного" состояния объект GIFBUILDER определяется через ACT, а объекта RollOver GIFBUILDER – через ACTRO.
Этот шаблон применяется для ВСЕХ состояний, за исключением SPC.

ОСОБЕННОСТИ:
Функция ->OptionSplit обрабатывает всю настройку GIFBUILDER перед формированием элементов.

[tsref:(cObject).HMENU.(mObj).GMENU
Дополнительные свойства для состояний элемен­тов меню
Для состояний элемента GMENU доступны дополнительные свойства, несмотря на то, что основной объект объявлен как GIFBUILDER. 
Конечно, представление этих свойств на одном уровне с объектом GIFBUILDER довольно грязное решение, но в данной ситуации применимо. Так как это необратимо, то в таком состоянии и находится уже долгое время.
Свойство:
Тип данных:
Описание:
По умолчанию:
noLink
boolean
Если установлено, элемент НЕ имеет ссылки!

imgParams
params
Параметры для тега <img>

altTarget
string
Альтернативная цель, переназначающая цель для GMENU

altImgResource
imgResouce
Определение использования альтернатив­ного изображ­ения. Если сюда возвращено изображение, оно переназначает все настройки GIFBUILDER.

ATagParams
string /stdWrap
Дополнительные параметр­ы.

ATagTitle
string /stdWrap
Определение атрибута title тега a (также смотрите TMENUITEM).

additionalParams
string /stdWrap
Определение параметров, добавляемых к концу URL. Это должен быть подготовленный код для вставки в качестве последнего параметр­а.

Детально смотрите typolink->additionalParams

wrap
wrap
Обертка элемен­та меню.

allWrap
wrap /stdWrap
Обертка всего элемента.

wrapItemAndSub
wrap /stdWrap
Если установлено, вместе с uid элемента подставляется "{elementUid}".

subst_elementUid
boolean
stdWrap для всего элемента.

allStdWrap
->stdWrap
Если установлено, элемент НЕ имеет ссылки!

[tsref:(cObject).HMENU.(mObj).GMENU.(itemState)]
GMENU_LAYERS / TMENU_LAYERS
GMENU_LAYERS / TMENU_LAYERS работают как расширения к GMENU/TMENU, это значит, что свойства, представлен­ные ниже являются дополнительными к представленным выше. 
xMENU_LAYERS используются для создания двух- (и более!) уровневых меню, в которых уровни 2 и выше отображают­ся на слоях DHTML. Большинство функций работает в современных браузерах, включая Netscape, Microsoft Internet Explorer, Mozilla, Konqueror и Opera. Можно делать всевозможные каскадные меню.
Замечание: необходимо включить библиотеку "typo3/sysext/cms/tslib/media/scripts/gmenu_layers.php" (для GMENU_LAYERS) и/или "typo3/sysext/cms/tslib/media/scripts/tmenu_layers.php" (для TMENU_LAYERS) , также нужно раз­вернуть xMENU_LAYERS, чтобы в этом был смысл (используйте флаг expAll).
Совместимость: MSIE 4+, Netscape 4+ и 6+, Opera 5+, Konqueror.
Замечания: 
Netscape 4 не поддерживает перекрытие слоев указателем мышки. 
В Opera, по всей видимости, имеются проблемы с событием mouseout, при перемещении с элемента на слой. Поэтому событие может не сформироваться перед выводом слоя. Это случается только если слой расположен очень близко расположен к переключающему элементу. При этом могут появиться проблемы, когда rollover состоя­ние элемен­тов не сбрасывается.
Возможные ошибки; было замечено, что Opera с каскадными уровнями может внезапно отказаться взаимодейство­вать со страницей, даже с обычными ссылками. Это может быть ошибкой JavaScript, но в этом нет уверенности, по­скольку не работают даже обычные ссылки. С одоуровневыми меню проблем не наблюдалось.
Свойство:
Тип данных:
Описание:
По умолчанию:
layerStyle
<DIV>-tag params
Параметры для тегов слоев <DIV> документа HTML. Возможно не по­надобиться их изменять.

Пример:
position: absolute; VISIBILITY: hidden;
position:absolute; visibility: hidden; 
lockPosition
"x" / "y" / ""
Если установлены "x" или "y", меню блокируется на слое и не следу­ет за курсором мыши (что происходит без этой установки).
"x" или "y", соответствен­но определяют общую ширину (x) или высо­ту (y), добавляемую к смещению x или y для меню. То есть, нужно установить значение "x" для горизонтального GMENU_LAYERS, а "y" – для вертикального.

dontFollowMouse
boolean
Если установлено, и lockPosition пустое (то есть слои меню следуют за мышью), меню НЕ будет следовать за курсором мыши, но появить­ся в месте, где курсор мыши щелкнет по переключающему элементу. Полезно, если точные позиции элемен­тов неизвестны. 

Внимание: нельзя устанавливать displayActiveOnLoad для элементов меню, у которых включен этот параметр (так как неиз­вестна абсолютная позиция слоя).

lockPosition_adjust
int
Число, добавляемое к ширине/высоте элемен­тов меню, для компен­сации, например вертикальный отступ или другие расстояния между изображениями в GMENU_LAYERS

lockPosition_addSelf
boolean
Обычно ширина и высота элемен­тов (+lockPosition_adjust) прибав­ляется после фор­мирования элемента. Это хорошо, когда слои меню формируются слева направо или вниз.
Но при исполь­зовании directionLeft/directionUp, может понадобиться добавить ширину элемен­тов перед ними.
Если это так, установите этот параметр.

xPosOffset
int
Смещение меню от точки "активации" (если не установлено lockPosition) / от верхнего левого угла страницы (если установлено lockPosition)

yPosOffset
int
То же, что и выше, но для направления  y.

topOffset
int
Смещение элемен­тов меню сверху браузера. Должно отличаться от значения свойства .layerStyle. Должно быть установлено при исполь­зовании directionUp.
Используется вместе с определением lockPosition=x или xPosOffset.

leftOffset
int
Смещение элемен­тов меню от левой границы браузера. Должно от­личаться от значения свойства .layerStyle. Должно быть установлено при исполь­зовании directionLeft.
Используется вместе с определением lockPosition=x или xPosOffset.

blankStrEqFalse
boolean
Если установлено, свойства topOffset,leftOffset, xPosOffset, yPosOffset должны работать с “blank”, если это действительно пустые строки, а не с просто “zero”. Нужно включить, если нужно работать с нулевыми смещениями. Это типичная установка при выборе относительного по­зиционирования.

directionLeft
boolean
Установите для право-ориентированных элементов (выплывающих влево).
Пока не работает с Opera, так как неизвестно, как Opera читает ши­рину каждого слоя.
Это может работать при установке ширины слоев меню в .layerStyles непонятно почему.

directionUp
boolean
Установите для по низу ориентированных меню (выплывающих снизу вверх).

setFixedWidth
int
Ширины и высота элементов GMENU_LAYERS обычно берется из гра­фических элемен­тов. Для TMENU_LAYERS этот способ не подходит. Поэтому вы можете использовать .setFixedWidth и .setFixedHeight для установки желаемой величины. Конечно это может быть обработано браузерами не так, как хотелось бы.
Альтернативно, можно использовать свойство “relativeToTriggerItem”, позиционирующее слои меню относительно элемента, над которым располагается указатель мыши. Но и здесь есть недостатки. Золотая середина — использовать меню с пустым lockPosition и включить dontFollowMouse. При этом всего лишь нужно определить координаты следования x или y, и меню появиться в месте щелчка по элемен­ту.
Замечание: активно, если значение НЕ пустая строка. Установка этого значения в ноль, означает, что для элемен­тов в GMENU_LAYERS ширина вычисляться не будет.

setFixedHeight
int
Смотрите “setFixedWidth”. То же, но для высоты.

bordersWithin
l,t,r,b,l,t
Оставляет края слоя в этих пределах пикселей. Ноль — "не установ­лено".
(Синтаксис: список целых чисел, по часовой стрелке: лево, верх, пра­во, низ, лево, верх)

displayActiveOnLoad
boolean
Если уста­новлено, слой подменю открывается при загрузке страни­цы. Если для элемен­тов основного меню еще установлено .freezeMouseover и определено RO, также отображаются элементы, принадлежащие элементам подменю.

Свойства:
.onlyOnLoad (boolean)
If set, then the display of the active item will happen only when the page is loaded. The display will not be restored on mouseout of other items.

Внимание: если объект GMENU_LAYER каскадный, убеди­тесь, что у всех элемен­тов перед ним (у которого установлен этот атрибут) этот атрибут также установлен!

freezeMouseover
boolean
Если уста­новлено, то любые эффекты перемещения мыши для основ­ного меню удаляются, не уходе с меню, а при переходе на другой элемент (или при восстановлении скрытого или слоя по умол­чанию).

Свойства:
.alwaysKeep (boolean)
если установлено, скрытые элементы останутся, даже если подменю закрыто.

hideMenuWhenNotOver
int+
Если установлено (> 1), меню будет скрываться, как только курсор мыши покинет меню. Значение этого параметра определяет ширину (в пикселях) зоны вокруг элемента, при нахождении курсора на кото­рой, слой не будет скрыт.

hideMenuTimer
int+
Количество милисекунд, через которые скроется меню, при установ­ке hideMenuWhenNotOver.

dontHideOnMouseUp
boolean
Если уста­новлено, слои в меню не скрываются после щелчка по нему мышкой. Полезно, когда элементы меню загружают страницу в дру­гой фрейм.

layer_menu_id
string
Если нужно определить название меню на странице. Обычно это не нужно!

Внимание:  не используйте подчеркива­ния и специальные символы в этой строке. Придерживайтесь alpha-numeric.
[случайная 6 сим­вольная хеш-стро­ка]
relativeToTriggerItem
boolean
Появляется возможность позиционирования слоев меню относитель­но переключающего их элемента. При этом нужно учитывать:
Не работает с Netscape 4 – позиция переключающего слоя вычис­ляется нулевой, поэтому смещение для всех меню будет 0,0 + ваше значение. 
Эта функция заключает элемент меню в некие <div> теги, прямо перед тем, как все меню обертывается посред­ством кода .wrap (для GMENU_LAYERS) или .allWrap (для TMENU_LAYERS). Оборот­ная сторона этого в том, что 1) для горизонтального меню, все­гда помещайте свои элементы меню в таблицу, так как переходы строки не сработают из-за <div>-тегов и 2) убедитесь, что ячей­ки таблицы обернуты посред­ством свойств .wrap/.allWrap соот­ветственно.
Эффективно работают лишь на первом xMENU_LAYER в каскаде. Для последующих элемен­тов xMENU_LAYERS используйте “relativeToParentLayer”.
Если установлено, свойства xPosOffset, yPosOffset и lockPosition* не функционируют (свойства directionLeft, directionUp, topOffset и leftOffset продолжают работать)

Дополнительные свойства:
.addWidth = добавление ширины элемента-переключателя;
.addHeight =  добавление высоты элемента-переключателя.

relativeToParentLayer
boolean
Если установлено, слой позиционируется относительно предыдущего слоя (родительского) в серии каскадных xMENU_LAYERS. В основном к смещению текущего меню просто добавляется относительная пози­ция родительского слоя. 

Внимание: это свойство имеет смысл, только если имеется фактический предыдущей слой GMENU_LAYER, позицию которого можно получить! Поэтому это должно быть каскадное меню!

Дополнительные свойства:
.addWidth = добавляется ширина родительского слоя;
.addHeight =  добавляется высота родительского слоя.

[tsref:(cObject).HMENU.(mObj).GMENU_LAYERS, (cObject).HMENU.(mObj).TMENU_LAYERS]
Пример:
page.includeLibs.gmenu_layers = media/scripts/gmenu_layers.php
page.10 = HMENU
page.10.1 = GMENU_LAYERS
page.10.1 {
  layerStyle = position: absolute; VISIBILITY: hidden;
  xPosOffset = -30
  lockPosition = x
  expAll=1
  leftOffset = 15
  topOffset = 30
}
page.10.1.NO {
  backColor = #cccccc
  XY = [10.w]+10, 14
  10 = TEXT
  10.text.field = title
  10.сме­щение = 5,10
}
page.10.2 = GMENU
page.10.2.wrap = <nobr>|</nobr>
page.10.2.NO {
  backColor = #99cccc
  XY = [10.w]+10, 14
  10 = TEXT
  10.text.field = title
  10.сме­щение = 5,10
}
GMENU_FOLDOUT
GMENU_FOLDOUT работает как расширение GMENU, это значит, что свойства, представленные ниже являются допол­нительными к представленным выше. 
GMENU_FOLDOUT используется для создания динамически сворачивающихся двухуровневых меню.
Работает в Netscape, Mozilla, Microsoft internet Explorer и Opera. Меню первого уровня – GMENU, так как за это отвечает GMENU_FOLDOUT, следующий уровень (о котором говорится, как о втором уровне) может быть и TMENU, и GMENU.
ЗАМЕЧАНИЕ: необходимо включить библиотеку  "typo3/sysext/cms/tslib/media/scripts/gmenu_foldout.php".
Сценарий реализации взят из http://www9.ewebcity.com/skripts/foldoutmenu_move.htm
Совместимость: MSIE 4+, Netscape 4+ и 6+, Opera 5+
Свойство:
Тип данных:
Описание:
По умолчанию:
dontLinkIfSubmenu
boolean
Если установлено, элементы с подменю не имеют связей. Элементы без подменю всегда связаны.

foldTimer
int
Время анимации, милисекунды.
40
foldSpeed
int, range 1-100
Количество шагов анимации. Для выключения анимации установите 1.
1
stayFolded
boolean
Не закрываться при щелчке по новому элементу (уровня 1).

bottomHeight
int, pixels
Высота нижнего слоя. Важно, когда на нижнем слое находиться содер­жимое или фоновый цвет, иначе слой обрежется.
100
menuWidth
int, pixels
Ширина основного слоя целого меню. Важная настройка, особенно для нижнего слоя, который может подрезаться. Всегда старайтесь устанав­ливать ширину меню в пикселях.
170
menuHeight
int
Высота всего слоя меню. Не столь важна.
400
subMenuOffset
x,y
Смещение подменю для каждого элемента меню. Важно, так как если не установить это значение, элементы появятся поверху "родителя".

menuOffset
x,y
Смещение основного слоя меню на странице. От левого верхнего угла.

menuBackColor
HTML-цвет
Фон меню. Если не установлен, прозрачный (что не очень хорошо ра­ботает в случае установки .foldSpeed отличной от 1. По усмотрению).

dontWrapInTable
boolean
По умол­чанию, каждый элемент меню первого уровня заключается в таблицу:
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0><TR><TD>
[здесь HTML для элемента меню...]
</TD></TR></TABLE>
При этом уровни одинаково формируются во всех браузерах. Но можно отключить это, установив этот параметр.
Замечание: использование <TBODY> ограничено для Netscape 4+.
0
bottomContent
cObject
Содержимое нижнего слоя, находящегося внизу меню. 

adjustItemsH
int
Настройка вычисления высоты слоев меню первого уровня (называемо­го верхним).

Пример:
-10

Будет вычтено 10 пикселей от высоты слоя при вычислениях.

adjustSubItemsH
int
Настройка вычисления высоты слоев меню второго уровня (подэлемен­тов, называемых подменю).
Смотрите выше.

arrowNO
arrowACT
imgResource
При определении arrowNO и arrowACT, и правильном imgResources, эти изображения используются как "традиционный указатель", показываю­щие развернут ли элемент (активен) или нет. 
NO — обычный, ACT — активный.
Изображение вставляется сразу перед элементом меню. Для изменения позиции, вставьте маркер ###ARROW_IMAGE### в обертку для эле­мента, вместо него будет вставлено изображение.

arrowImgParams
<img> params
Параметры изображения-стрелки.

Пример:
hspace=5 vspace=7

displayActiveOnLoad
boolean
Если установлено, то активные пункты меню свернутся при “onLoad”.

[tsref:(cObject).HMENU.(mObj).GMENU_FOLDOUT]
Пример:
## GMENU_FOLDOUT
includeLibs.gmenu_foldout = typo3/sysext/cms/tslib/media/scripts/gmenu_foldout.php

temp.foldoutMenu = HMENU
temp.foldoutMenu.1 = GMENU_FOLDOUT
temp.foldoutMenu.1.expAll = 1
temp.foldoutMenu.1.NO {
  wrap = | <br>
  XY = 150,20
  backColor = silver

  10 = TEXT
  10.text.field = title
  10.fontSize = 12
  10.fontColor = Blue
  10.сме­щение = 2,10
}
temp.foldoutMenu.1.RO < temp.foldoutMenu.1.NO
temp.foldoutMenu.1.RO = 1
temp.foldoutMenu.1.RO {
  10.fontColor = red
}
temp.foldoutMenu.2 = TMENU
temp.foldoutMenu.2.NO {
  linkWrap = <nobr><font face=verdana size=1 color=black><b>|</b></font></nobr><br>
  stdWrap.case = upper
}
temp.foldoutMenu.1 {
  dontLinkIfSubmenu = 1
  stayFolded=1
  foldSpeed = 6
  subMenuOffset = 10,18
  menuOffset = 100,20
  menuBackColor = silver
  bottomBackColor = silver
  menuWidth = 170
  
  arrowNO = typo3/sysext/cms/tslib/media/bullets/arrow_no.gif
  arrowACT = typo3/sysext/cms/tslib/media/bullets/arrow_act.gif
  arrowImgParams = hspace=4 align=top

  bottomContent = TEXT
  bottomContent.value = Hello World! Here is some content!
}


Создается меню, вроде приведенного выше. Одна важная строка:
temp.foldoutMenu.1.expAll = 1

Если не установить ее (также, как GMENU_LAYERS) то второй уровень не сформируется!

TMENU
Свойство:
Тип данных:
Описание:
По умолчанию:
expAll
Boolean /stdWrap
Если это истинно, то всегда будет показано меню на уровне под элементом меню. Это соответствует ситуации, когда пользователь щелкает по элементу меню и оно открывается на следующий уровень. Это дает возможность сде­лать такое поведение, поведением по умолча­нию для всех элементов меню.

collapse
boolean
Если установлено, то "активные" элементы меню, развернутые на следую­щий уровень, будут снова сворачиваться.

accessKey
boolean
Если установлено, на ссылки меню устанавливаются кнопки доступа.

noBlur
boolean
Обычно, при исполь­зовании браузера MSIE, графические ссылки "размываются". При этом убирается некрасивая окантовка вокруг ссылок. 
Если установлено это свойство, ссылки НЕ размываются при "onFocus".

target
target
Цель для ссылок из меню.
self
forceTypeValue
int
Если установлено, параметр &type ссылки принудительно устанавливается в это значение независимо от цели.

stdWrap
->stdWrap
Обертка всего элемента посредством stdWrap.

Пример: смотрите GMENU.stdWrap.

wrap
wrap
Обертка, если в меню имеются элементы!

IProcFunc
название функции
В функцию передается внутренний массив “I”, ожидается, что он же будет возвращен. Последующий за вызовом этой функции элемент меню формируется посред­ством интеграции implode() массива $I[parts] в переданный массив. Поэтому можно изменить его в собственных целях.
Смотрите пример в typo3/sysext/cms/tslib/media/scripts/example_itemArrayProcFunc.php

[Common Item States, see above]
->TMENUITEM
Параметры TMENUITEM для каждой категории элементов меню, которые мо­гут быть сформированы.

ОСОБЕННОСТИ:
функция ->OptionSplit обрабатывает все настройку GIFBUILDER перед фор­мированием элементов меню.

[tsref:(cObject).HMENU.(mObj).TMENU]
TMENUITEM
Это запись для страницы элемента меню — то же самое, что было в GMENU/gifbuilder. При этом, если нужно получить данные из текущей записи страницы, используйте stdWrap.data = page : [field name]
Свойство:
Тип данных:
Описание:
По умолчанию:
allWrap
wrap /stdWrap
Обертка всего элемента.

wrapItemAndSub 
wrap /stdWrap
Обертка для всего элемента и содержащихся в нем подэлементов.

subst_elementUid
boolean
Если установлено, все вхождения строки "{elementUid}" в общем html коде элемента (после заключения в .allWrap} заменяются на uid эле­мента меню. 
Полезно при вставке идентификационного кода в HTML для управле­ния свойствами через JavaScript.

RO_chBgColor
string
При установленном свойстве RO (см. далее), можно установить это свойство на определенный набор параметров, позволяющих изменять фоновый цвет, например ячейки таблицы, когда указатель мыши бу­дет находиться над текстовой ссылкой.

Синтаксис:
[over-color] | [out-color] | [id-prefix]

Пример:
page = PAGE
page.typeNum = 0
page.10 = HMENU
page.10.wrap = <table border=1>|</table>
page.10.1 = TMENU
page.10.1.NO {
  allWrap = <tr><td valign=top id="1tmenu{elementUid}" style="background:#eeeeee;">|</td></tr>
  subst_elementUid = 1
  RO_chBgColor = #cccccc | #eeeeee | 1tmenu
  RO = 1
}

В этом примере задается цвет ячеек таблицы #eeeeee и он меняется на #cccccc (и обратно), когда указатель мыши находиться над ней. Строка “1tmenu” - уникальный id для элемен­тов меню. Он может не понадобиться (если одни и те же пункты меню не повторяются на странице), но важно то, что id ячейки таблицы имеет тот же префикс перед {elementUid} в метке (помечено красным). Другая важная де­таль — УСТАНОВИТЬ цвет фона для ячейки по умолча­нию черз атри­бут style (помечено синим). Если это не сделать, браузеры Mozilla бу­дут вести себя странно, не захватывая событие mouseout при первом переключении. 

before
HTML /stdWrap


beforeImg
imgResource


beforeImgTagParams
<img>-параметры


beforeImgLink
boolean
Если установлено, то это изображение будет связано с тем же тегом <A>, что и текст.

beforeROImg
imgResource
Если установлено, ".beforeImg" и ".beforeROImg" должны создать пару для rollOver. 

beforeWrap
wrap
обертка для кода ".before".

linkWrap
wrap


stdWrap
->stdWrap
stdWrap для текста ссылки! 

ATagBeforeWrap
boolean


ATagParams
параметры <A> /stdWrap
Дополнительные параметры.

Пример:
class="board"

ATagTitle
string /stdWrap
Позволяют определить атрибут "title" для тега <a> пункта меню.

Пример:
ATagTitle.field = abstract // description

При этом будут использоваться поля abstract или description для атри­бута <a title="">.

additionalParams
string /stdWrap
Параметры, добавляемые в конец URL. Это должен быть готовый код, для вставки после последнего параметра.

Детали смотрите в typolink->additionalParams

doNotLinkIt
boolean /stdWrap
Если установлено, текст ссылки вообще не связан!

doNotShowLink
boolean /stdWrap
Если установлено, текст совсем не отображается (учитывая распорки)

stdWrap2
wrap /stdWrap
StdWrap для всего текста ссылки и тега A.  (Помните, что по умолча­нию в функцию stdWrap передается простое значение “|“).
 | 
RO
boolean
Если установлено, rollOver включен для ссылок.

after...
[mixed]
Набор свойств “before...” дублируется свойствами “after...”. Разница в том, что сформированное свойством .after... помещается после ссыл­ки, а не до нее.

altTarget
target
Если установлено, альтернативная цель переназначает свойство target для TMENU.

allStdWrap
->stdWrap
stdWrap для всего элемента.

[tsref:(cObject).HMENU.(mObj).TMENUITEM]
IMGMENU
Изображения для меню создаются из одного большого объекта GIFBUILDER, на основе объекта GIFBUILDER ".main" с добавлением свойств объектов GIFBUILDER для каждого элемента (NO, ACT, SPC... и т.д.).
Свойство:
Тип данных:
Описание:
По умолчанию:
target
target
Цель для ссылок из меню.
self
forceTypeValue
int
Если установлено, параметр &type ссылки принудительно устанавливается в это значение независимо от цели.

noBlur
Boolean
Обычно, при исполь­зовании браузера MSIE, графические ссылки "размываются". При этом убирается некрасивая окантовка вокруг ссылок.
Если установлено это свойство, ссылки НЕ размываются при "onFocus".

wrap
wrap


params
<img>-параметры


main
->GIFBUILDER
Базовая настройка карты изображений! Определяет "основу"!

dWorkArea
сме­щение + calc
Базовое смещение элемен­тов GIFBUILDER (так называемое "распре­деление").

[Common Item States, see above]
->IMGMENUITEM
+ .distrib
Это параметры TMENUITEM для каждой категории элементов меню, которые могут быть сформированы.

ОСОБЕННОСТИ:
функция ->OptionSplit обрабатывает все настройку GIFBUILDER перед формированием элементов меню.

.distrib — это (x,y,v,h +calc) распределение элементов меню. Это возмож­ность отделения элементов друг от друга. Для размерностей ширины (X)  и высоты (Y) каждой из ссылок можно использовать коды "textX" и "textY".
Это работает путем добавления WORKAREA-GifBuilderObj между каж­дым IMGMENUITEM ("подстановка" объекта GIFBUILDER), а рабочая область определяет размещение текста. Так "x,y" определяет сме­щение, которое будет имет следующий элемент (в основном — это ширина предыдущего элемента!), а  "v,h" опредеяет размеры текущего элемента. 
Согласно этому примеру, взятому из static_template "template: MM":
    NO.distrib = textX+10, 0, textX+10, textY+5
В будущем TypoScript сможет обеспечить лучшие возможности для позиционирования объектов GIFBUILDER на карте изображений!

ImgMap автоматически используется в ссылках! (это свойство ".imgMap" текстовых объектов в объектах GIFBUILDER, автоматиче­ски устанавливае­тся, независимо от текущих настроек).

imgMapExtras
теги <area...>
Дополнительные теги <area...> для карты изображений.

debugRenumberedObject
boolean
Если установлено, итоговая конфигурация объекта GIFBUILDER вы­водится для отладки сделанных настроек.

[tsref:(cObject).HMENU.(mObj).IMGMENU]
IMGMENUITEM
Свойство:
Тип данных:
Описание:
По умолчанию:
1,2,3,4...
->GifBuilderObj
ЗАМЕЧАНИЕ:
Это возможность создания карты изображений; все IMGMENUITEMS включают­ся в один большой Gifbuilderobj (и перенумеруются!!). Из-за этого Gifbuilderobjects следую­щего уровня не могут получить данные для каждого элемента меню.
Также использование [##.w] и [##.h] с +calc в данный момент не поддержи­вается в IMGMENUITEM.
При этом все объекты IMAGE первого уровня проверяются; если "file" или "mask" для любых объектов IMAGE установлены на "GIFBUILDER", объект Gifbuilder анализируется на присутствие каких-либо объектов TEXT, и если они  обнаружены, то "отмечаются", это значит, что функция stdWrap вызывается во время установки $cObj->data-array на элемент меню.
В данном примере, предоставляется текст каждого элемента меню, формируя заголовок в маске, а не непосред­ственно в изображении. Заметьте, что объект "NO.10" представлен для формирования координат карты изображений!!!

NO.6 = IMAGE
NO.6.file = masked_pencolor*.gif
NO.6.mask = GIFBUILDER
NO.6.mask {
  XY = 500, 200
  backColor = black
  10 = TEXT
  10 {
    text.field = title
    fontFile = fileadmin/fonts/caflisch.ttf
    fontSize = 34
    fontColor = white
    angle = 15
    сме­щение = 48,110
  }
  20 = EFFECT
  20.value = blur=80
} 
NO.10 = TEXT
NO.10 {
  text.field = title
  fontFile = fileadmin/fonts/caflisch.ttf
  fontSize = 34
  angle = 15
  сме­щение = 48,110
  hideButCreateMap = 1
}

[tsref:(cObject).HMENU.(mObj).IMGMENUITEM]
JSMENU
Свойство:
Тип данных:
Описание:
По умолчанию:
levels
int, 1-5
Количество уровней
1
menuName
string
Название меню JavaScript. 
Если на странице имеется более одного JSMENU, нужно установить это зна­чение для каждого.

target
target
Цель для элемен­тов меню.

forceTypeValue
int
Если установлено, параметр &type ссылки принудительно устанавливается в это значение независимо от цели.

1,2,3,4...
JSMENUITEM
Настройки для уровней.

wrap
wrap
Обертка для полей выбора.

wrapAfterTags
wrap
Обертка вокруг полей выбора с их обертками и тегов form, например в коде JS.

firstLabelGeneral
string
Базовая первая метка. Может быть переназначена установками в каждом из JSMENUITEM

SPC
boolean
Если установлено, распорки будут присутствовать в меню, иначе нет будут.

[tsref:(cObject).HMENU.(mObj).JSMENU]
JSMENUITEM
Свойство:
Тип данных:
Описание:
По умолчанию:
noLink
boolean
Обычно, при выборе пункта меню в блоке выбора, обновляется блок выбо­ра следую­щего уровня (если он есть), и если в нем нет элемен­тов (из-за отсутствия подстраниц), ссылки ведут на текущую страницу. 
Если установлен этот параметр, то элементы меню в блоке выбора ни с чем не будут связаны. Лишь будет обновляться содержи­мое блока выбора для следую­щего уровня.

alwaysLink
boolean
Если установлено, элементы в блоке выбора всегда будут иметь ссылки. Имеет приоритет над "noLink".

showFi rst
boolean
Если установлено, будет показана первая ссылка при обновлении меню.

showActive
boolean
Если установлено, будет выбран активный уровень, если он присутствует.

wrap
wrap
Обертка блока выбора.

width
int+
Начальная ширина блоков устанавливается количеством _ (подчеркива­ние).
14
elements
int+
Начальный номер элемен­тов в меню. Конечно переопределяется фактиче­ским текстом из элементов меню.
5
additionalParams
string
Дополнительные параметры блока <select>. Например, можно установить ширину через параметр style, примерно так:
style="width: 200px;"

firstLabel
string
Первая метка в меню (по умолчанию – пустая).

[tsref:(cObject).HMENU.(mObj).JSMENUITEM]
Пример:
# Менюu:
temp.jsmenu = HMENU
temp.jsmenu.1 = JSMENU
temp.jsmenu.1 {
  levels = 2
  1.wrap = |<br>
  2.wrap = |<hr>
}

# Вставка на страницу.
page = PAGE
page.typeNum =0
page.5 = TEXT
page.5.field = title
page.10 < temp.jsmenu

Отобразиться меню с двумя блоками выбора.

Приложение A – дополнения media/scripts/  
media/scripts/ в общем
В директории typo3/sysext/cms/tslib/media/scripts (в старых версиях просто media/scripts) по большей части содержатся сценарии php, называемыемые "внешние модули", в пику функциям, включенным в библиотеки typo3/sysext/cms/tslib/. Несмотря на то, что они распространяются вместе с  TYPO3, как и tslib/, это основа для разработки функциональности для внешнего интерфейса. Большинство из этих сценариев могут рассматриваться, как примеры для вашего собственного кода. Обратите внимание на слово "большинство", так как некоторые из них написаны давно и не актуальны на текущий момент.
Сведения об 'example templates'
Для каждого сценария расширения даются один или несколько шаблонов-примеров. Эти шаблоны являются частью документации по возможностям расширений, так как они описывают возможности маркеров и подразделов, и являются учебным примером. Поэтому шаблоны примеров могут меняться при появлении новых возможностей или по другим причинам.
Поэтому, используя шаблоны, нельзя полагаться на значения по умол­чанию, так как в будущем они могут измениться! Сделайте копию, измените ее в соответствие с собственными целями, и создайте настройку TypoScript для расширения в которой прописано использование собственного файла шаблона!
fe_adminLib.inc
Файлы:
Файл:
Описание:
fe_adminLib.inc
Основной класс, использующийся для отображения форм администрирования внешнего интерфейса.
Вызывайте из из USER_INT cObject с "userFunc = user_feAdmin->init". За примерами обратитесь к static_templates.
Замечание: исполь­зование USER_INT cObject позволяет сценарию работать независимо от кеша страниц, что необходимо!!!
fe_admin_dmailsubscrip.tmpl
Пример файла шаблона для подписки на информационные бюллетени пользователей в таблице tt_address. Этот шаблон используется в static_template "plugin.feadmin.dmailsubscription".
fe_admin_fe_users.tmpl
Пример файла шаблона для создания новых внешних пользователей (fe_users). Этот шаблон используется в static_template "plugin.feadmin.fe_users".

Описание
Этот класс использу­ется для создания форм для управле­ния базой данных из внешнего интерфейса, независимо от внутреннего (TBE). Если внешним пользователям нужно редактировать содер­жимое базы данных, можно исполь­зовать этот класс. 
Аутентификация производиться через регистрацию fe_user, при этом можно отметить записи с fe_user_uid, чтобы запись принадлежала определенному fe_user. Другая возможность аутентификации — по электронной почте. В этом случае доступ к записи открывается, если адрес email имеется в определенном поле. При аутентификации через fe_user, можно получить меню эле­ментов для редактирования. При аутентификации по email, запрос отправляется на почтовый адрес. В письме содержится список доступных записей.
Все это создано на основе файлов HTML шаблонов, которые нужно разработать самостоятельно. С другой стороны, вы получаете полную свободу для разработки собственных форм.
Пример:
За примерами обратитесь к static_templates 'plugin.feadmin.*'. Опробуйте их на тестовом сайте TYPO3.
Статический шаблон
plugin.feadmin.*
Привнесенные GET или POST переменные:
Название:
Описание:
cmd
Команда.
preview
Флаг предварительного просмотра.
backURL
Обратный URL.
rU
UID записи.
aC
Код аутентификации.
fD
Установленные данные (массив полей).
FE
Массив данных для внешнего редактирования, синтаксис: FE[таблица][поле] = значение.

fe_adminLib.inc properties
Свойство:
Тип данных:
Описание:
По умолчанию:
templateFile
resource
Файл шаблона, примеры в typo3/sysext/cms/tslib/media/scripts/fe_user_admin.tmpl

templateContent
string
Также можно установить эти свойства, как значения, непосред­ственно  в шаблоне.

table
tablename
Таблица для редактирования. 
Замечание: полный список полей, доступных для редактирования для каждой рассматриваемой таблицы, определен в TCA с ключом ["feInterface"]["fe_admin_fieldList"]. Как отличный пример, смотрите определение таблицы для  fe_users.

defaultCmd
string
Определение действия по умолча­нию (если &cmd= не установлено при вызове страницы).

clearCacheOfPages
[список целых чисел]
Список id страниц, для которых очищается кеш при каждой удачной операции РЕДАКТИРОВАНИЯ, СОЗДАНИЯ или УДАЛЕНИЯ.

debug
boolean
Если установлено, будет выводиться служебная информация из fe_adminLib, по которой можно отслеживать ошибки.

Действия:
edit 
boolean /actionObject
Если установлено, редактирование в основном разрешено.
Но нужно определить:

.fields (список полей) доступные для редактирования. Каждое из полей должно находиться в["feInterface"]["fe_admin_fieldList"] из массива TCA, определяющего полный список полей, доступных для редактирования для fe_adminLib.

.overrideValues.[fieldname] (строковое значение) определяет значения для определенных полей, переопределяющие ЛЮБЫЕ введенные значения из формы. Переопределение происходит после анализа введенных значений свойством .parseValues из fe_adminLib, но перед оценкой через .required и .evalValues ниже. Например, это может быть полезно, если нужно скрыть редактируемую запись, так как сначала их нужно просмотреть.

.required (список полей из .fields), определяет, какие поля обязательные. Правильное введенное здесь поле будет подчастью ###SUB_REQUIRED_FIELD_[fieldname]###, удаляемой из шаблонов, если они истинны, и, поэтому, в порядке. Ниже смотрите информацию об этой подчасти.

.evalValues.[fieldname] (список кодов оценки) определяют оценки форм по конкретным полям. Смотрите ниже.

.preview (булево) включает предварительный просмотр отправляемой формы. Требуется шаблон для предварительного просмотра в файле шаблона. Смотрите ниже о названиях маркеров подчастей.

.menuLockPid (булево, принудительно блокирует меню редактируемых элементов на .pid (только редактирование)

.userFunc_afterSave (название функции) вызывается после сохранения записи. Отдаваемое содержимое — это массив с текущей (и предыдущей) записью.

create 
boolean /actionObject
То же, что и .edit выше, за исключением другого состояния.
Плюс три дополнительных свойства:

.noSpecialLoginForm (булево) – при установке, fe_adminLib НЕ ищет маркер TEMPLATE_CREATE_LOGIN, а всегда ищет TEMPLATE_CREATE

.defaultValues.[fieldname] (строковое значение); то же .overrideValues, но устанавливает значения по умолчанию при начальном отображении формы.

delete
boolean
Могут или нет удаляться записи. По прежнему требуется аутентификация (владелец или по email). Установка переменной “preview” позволяет предварительный просмотр перед фактическим удалением записи.

infomail
boolean
Информационные бюллетени — это обычные текстовые письма, создаваемые на основе шаблонов из файла шаблона. Они могут использоваться, например, для пересылки забытого пароля для пользователей, но полное содержание бюллетеней определяет содержи­мое шаблона.
Обычно используется лишь бюллетени по умолчанию (infomail.default), например для пересылки паролей. Конечно, можно использовать и другие ключи. Смотрите ниже.

infomail.[key]
(настройка свойств для infomail)
Для того, чтобы fe_adminLib отсылал информационные бюллетени, нужно определить эти переменные в переменных GET или формах HTML.

Fetch – если целое число, то ищется uid, как значение "fetch". Если нет, ищется поле email (определенное в свойстве fe_adminLib, см. далее). 

key – указатель на используемую настройку infomail.[key].

Свойства:
.dontLockPid (булева) –- выборка записей, только из .pid для fe_adminLib.
.label (строка) – суффикс маркеров, смотрите "Маркеры email" ниже.

setfixed
boolean /properties
Позволен установленный фиксированный ввод, возможно из ссылки в информационном бюллетене, или письме-уведомлении.
Синтаксис: 

.[fixkey].[fieldname] = fieldvalue – используется для настройки в информационном бюллетене ссылки на фиксированный ввод в таблице через маркеры SYS_SETFIXED_*. Смотрите ниже (свойство setfixed из fe_adminLib).
Специальный ключ "DELETE" — просто булева переменная.

.userFunc_afterSave (название функции) вызывается после сохранения записи. Отдаваемое содержиое — это массив с текущей (и предыдущей) записью.

Понятие:
Понятие "setfixed" лучше всего объясняется типичным сценарием — фактически, наиболее частой ситуацией ее использования:
Представьте, что имеются несколько пользователей, работающих с информацией на сайте. Но перед вводом информации в базу данных, ее нужно проверить — просто просмотреть и, либо удалить, либо утвердить. В настройке "create" для fe_adminLib, устанавливается поле "hidden" (скрыть) для записи, перезаписываемое на 1. Таким образом запись по умолчанию скрыта. Затем настраивается setfixed-fixkey, устанавливающее поле "hidden" (скрыть) на 0. Эта установка формирует список параметров для URL, которые, наконец, вставляются вместо соответствующих маркеров в шаблон письма. Ссылки содержат все необходимые для аутентификации и изменения значений полей данные, так, чтобы изменения вносились одним щелчком по ссылке. Таким образом, администратор, щелкнув по ссылке в информационном письме, сможет изменить запись! Или, конечно же, щелкнув по другой ссылке с cmd=delete link, сможет удалить ее...
Имеется специальный ключ “fieldname”, который используется для указания определенного '_FIELDLIST”, определяя список полей в записи, содержащих код аутентификации. Если ничего не определено, используется md5-хеширование для всей записи, то есть, любые изменения ссылки setfixed, приведут к невозможности ее использования. Если же, с другой стороны, установить _FIELDLIST = uid,pid, запись будет доступна для редактирования, пока актуальны значения uid и pid.
Пример:
Это общая настройка свойств email, с простой настройкой setfixed:
email.from = kasper@typo3.com
email.fromName = Kasper Skårhøj
email.admin = kasper@typo3.com
setfixed.approve {
  hidden = 0
  _FIELDLIST = uid,pid
}
setfixed.DELETE = 1
setfixed.DELETE._FIELDLIST = uid

Теперь, если вставить следующий маркер в шаблон email:

###SYS_SETFIXED_approve###

будут подставлены примерно следующие параметры:

&cmd=setfixed&rU=9&fD[hidden]=0&aC=5c403d90 

Все, что нужно для ссылки — правильный url (для вызова fe_adminLib!), например:

###THIS_URL######FORM_URL######SYS_SETFIXED_approve###

и для удаления:

...###SYS_SETFIXED_DELETE###

Другие
authcodeFields 
[список полей]
Список полей через запятую, на основе которого формируется  authCode. В основном, этот список должен включать “uid” только в некоторых случаях. Если список включает несколько полей, нужно удостовериться, что authCode меняется, при изменении этих полей. При этом должно быть заново выслано письмо с новым кодом аутентификации.

.addKey (строка) строка, добавляемая к md5-хешу для authCode. Введите любую комбинацию символов. Имеется ввиду то, что сторонние люди, не зная этого кода, не смогут восстановить md5-хеш, исключительно по uid.

.addDate (настройка даты) используется для создания временного кода. Скажем, если ввести здесь значение “d-m-Y”, код будет работать до полуночи, а затем должен использоваться другой код.

.codeLength (целое) определяет длину кода аутентификации. По умолчанию — 8 символов.
В любом случае, предшествует TYPO3_CONF_VARS[SYS][encryptionKey].

Совет:
Если нужно формировать authCodes по стандартам authCodes (используется в direct mailer из t3lib_div::stdAuthCode()), установите TYPO3_CONF_VARS[SYS][encryptionKey] на уникальное значение (это необходимо в любом случае) и добавьте ТОЛЬКО “uid” как authcodeField. Это достаточно безопасно.

email

.from (строка, email) email адрес отправителя отсылаемых писем.

.fromName (строка) имя отправителя. Если установлено, будет использоваться в форме NAME <EMAIL>

.admin  email адрес администратора, уведомляемого об изменениях.

.field (строка/целое) поле записи, в котором находиться адрес email для отправления писем. Если содержимое поля — целое число, подразумевается uid fe_user, владельца записи и email адрес этого пользователя.

pid
int+
Pid в котором хранятся/получаются записи.
Текущая страница
fe_userOwnSelf
boolean
Если установлено, для fe_user, созданные этим модулем, поле fe_cruser_id устанавливается на их собственный uid, что означает, что они "владеют" своей записью и, поэтому, могут редактировать данные в ней. 
Все другие таблицы, имеющие поле fe_cruser_id, в разделе"ctrl" настроек $TCA, автоматиче­ски устанавливают его на id текущего fe_user.

fe_userEditSelf
boolean
Если установлено, fe_users, независимо, владеют ли они собственной записью или нет, могут редактировать свою запись.

allowedGroups
[список целых чисел]
Список uid  fe_group, которым позволено редактировать записи через эту форму. Обычно это делать позволено лишь fe_user владельцу.

evalFunc
название функции
Функция, посредством которой можно манипулировать dataArray перед его сохранением. 
DataArray передается в функцию как $content и ДОЛЖЕН быть возвращен из этой функции.
Свойство “parentObj” – жесткая ссылка на объект fe_adminLib.

formurl
->typolink
Содержит свойства typolink для URL (action tag) формы.

parseValues.[field]
[список parseCodes]
ParseCodes:
int – возвращает целое значение из введенного;
lower – возвращает версию введенного в нижнем регистре;
upper – возвращает версию введенного в верхнем регистре;
nospace – удаляет все пробелы;
alpha, num, alphanum, alphanum_x  - возвращает из введенного лишь символы алфавита (a-z) и/или цифры, alphanum_x также разрешает _ и -;
trim – удаляет пробелы в конце строки;
setEmptyIfAbsent – проверяет, пустое ли поле, если значение не передано. Нужно для сброса поля с флажками.
random[x] – случайное значение от 0 до x;
files[semicolon-list(!) of extensions, none=all][maxsize in kb, none=no limit] – поле, содержащее файлы. Детали смотрите ниже!
multiple – установите, если вводится из блока с множественным выбором (не забудьте добавить ...[] к названию поля, так как его значение будем массивом!);
checkArray – установите, если нужно, чтобы несколько флажков делали установку бит в одно поле. В этом случае, каждый флажок должен начинаться с [x], где x — это номер бита, начиная с нуля. Начальные значения флажков на форме должны быть ложью.
uniqueHashInt[semicolon-list(!) of other fields] – формируется уникальный хеш (32 битовое целое) содер­жимого определенных полей. Значения этих полей сначала преобразуются в нижний регистр, а затем сохраняются лишь символы алфавита и цифры. 

userFunc_updateArray
название функции
Указатель на пользовательскую функцию, в которую передается массив значений, перед тем, как он будет использован для обновления формы через JavaScript.

evalErrors.[field].[evalCode]

Определение сообщений об ошибках, вставляемых в маркеры ###EVAL_ERROR_FIELD_[fieldname]### при ошибке сравнения.
Смотрите ниже описание сравнения.

cObjects.[marker_name]
cObject
Это – cObject, которые можно вставить на место маркеров в шаблон.

Пример:
Скажем, cObject определен так:

cObject.myHeader = TEXT
cObject.myHeader.value = This is my header

при этом можно включить этот cObject в большинство шаблонов черз маркер с названием ###CE_myHeader### или ###PCE_myHeader### (см. далее о разнице).

wrap1
->stdWrap
Глобальная обертка 1. Будет разбито на маркеры ###GW1B### и ###GW1E###. Не изменяет введенное значение через настройки, а просто помещает его во что-нибудь.

Пример:
wrap1.wrap = <b> |</b>

wrap2
->stdWrap
Глобальная обертка 2 (смотрите выше).

color1
string /stdWrap
Значение для ###GC1### маркера (Global color 1)

color2
string /stdWrap
Значение для ###GC2### маркера (Global color 2)

color3
string /stdWrap
Значение для ###GC3### маркера (Global color 3)

[tsref:(script).fe_adminLib]
Основные подразделы
Существует определенная система в наименовании основных подразделов в файле шаблона. Приведенные ниже маркеры используются в результате действия "сохранение". Код [action] может быть DELETE, EDIT или CREATE, в зависимости от значения cmd.
Маркер подраздела:
Описание:
###TEMPLATE_[action]_SAVED###
Используется для вывода HTML.
###TEMPLATE_SETFIXED_OK### (general)
###TEMPLATE_SETFIXED_OK_[fixkey]###
Используется для успешной ссылки setfixed. 
###TEMPLATE_SETFIXED_FAILED###
Используется для не успешной ссылки setfixed. Помните, что если дважды щелкнуть по setfixed ссылке, второй переход будет ошибочным. Это происходит потому, что ссылка setfixed связана с оригинальной записью, и, при ее изменении, код аутентификации будет неверным!
###EMAIL_TEMPLATE_[action]_SAVED###
Используется для сообщения email, отсылаемого пользователю сайта.
###EMAIL_TEMPLATE_[action]_SAVED-ADMIN###
Используется для сообщения email, отсылаемого администратору.
###EMAIL_TEMPLATE_SETFIXED_[fixkey]###
Используется для уведомлений по email об удачных setfixed операциях.
###EMAIL_TEMPLATE_SETFIXED_[fixkey]-ADMIN###
Также для email администратора.

Аналогичная система применяется для маркеров подразделов при действиях EDIT и CREATE при инициализации и отображении форм:
###TEMPLATE_[action]###	или, при авторизованном fe_user (только CREATE):  ###TEMPLATE_[action]_LOGIN###

... и, если флаг &preview отсылается (включая DELETE)
###TEMPLATE_[action]_PREVIEW###

Подразделы, которые должны существовать:
Эти подразделы должны быть определены в любом шаблоне.
Subpart marker:
Описание:
###TEMPLATE_AUTH###
Отображается, если авторизация, либо fe_user, либо по email коду, прошла неудачно. Нужно разработать корректное отображение, соответствен­но проблеме!
###TEMPLATE_NO_PERMISSIONS###
Это сообще­ние об ошибке, возникшей при успешной авторизации, но не позволяющей редактировать или удалять запись по другим причинам (неверный владелец fe_user/group).

Подразделы 'infomail' Email
Все подразделы email могут отсылаться как HTML. Это происходит, если первое и последнее слова в шаблоне, соответствен­но, <html> и </html>. Кроме того, должен быть загружен класс t3lib_htmlmail.
Subpart:
Описание:
###EMAIL_TEMPLATE_NORECORD###

###EMAIL_TEMPLATE_[infomail_key]###

###SUB_RECORD###


'infomail' Email markers
Marker:
Описание:
###SYS_AUTHCODE###

###SYS_SETFIXED_[fixkey]###


Соглашения относительно FORM
Название формы для fe_adminLib должны находиться после названий таблиц, которые предполагается редактировать. Например, если нужно отредактировать записи в таблице "fe_users", нужно использовать тег FORM, вроде этого:
<FORM name="fe_users_form" method="POST" action="....">

Поля, изменяющие данные записей имеют следующий синтаксис, FE[таблица][поле]. То есть, если нужно редактировать поле "city" в записе tt_address, нужно использовать элемент, вроде этого:
<INPUT name="FE[tt_address][city]">

Кнопка сохранения может иметь любое название, за исключением “doNotSave”, что предотвратит сохранение. Если необходима кнопка "Отмена", используйте JavaScript в событии onClick, для изменения document.location.

Общие маркеры
Marker:
Описание:
###GW1B### / ###GW1E###
Global wrap 1, начало и конец (заголовки).
###GW2B### / ###GW2E###
Global wrap 2, начало и конец (основной текст).
###GC1### / ###GC2### / ###GC3###
Global color от 1 до 3.
###FORM_URL###
URL, используемый в формах:
index.php?id=page-id&type=page-type
###FORM_URL_ENC###
То же, что и выше, но rawurlencoded.
###BACK_URL###
значение backUrl. Установка на значение переменной приходящего“backURL”.
###BACK_URL_ENC###
То же, что и выше, но rawurlencoded.
###REC_UID###
UID редактируемой записи. Установка на значение приходящей переменной “rU”.
###AUTH_CODE###
Приходящая переменная “aC”.
###THE_PID###
Значение “thePid” - место сохранения записи.
###THIS_ID###
id текущей страницы.
###THIS_URL###
URL текущего сценария, как он получен из t3lib_div::getThisUrl().
###HIDDENFIELDS###
Набор скрытых полей, требуемых для вставки в формы. По умолчанию они включают  "cmd", "aC" и "backURL".

В большинстве случаев, можно использовать маркеры, вроде такого:
###FIELD_[field name]###

где [field name] — это название поля из записи. Используются все поля в записе.
И наконец, можно вставить cObject, определенные в TypoScript, посред­ством этого набора маркеров (смотрите свойство .cObject в приведенной ниже таблице):
###CE_[cObjectName]###
###PCE_[cObjectName]###

###PCE_* отличается от ###CE_* cObject, тем, что они формируются со вновь созданным cObj (в отличие от родительского cObj для fe_adminLib), когда массив данных загружается значениями из ->dataArr, массива отданного в сценарий. Поэтому эти маркеры полезны для вывода данных предварительного просмотра. И наконец, как PCE_ , так и CE_ типы cObject маркеров, могут использоваться с любым элементом в меню редактирования (список доступных записей), если использовать префикс маркера "ITEM_", например ###ITEM_PCE_[cObjectName]###.
Проверка полей формы
Вывод сообщения об ошибке для REQUIRED (требуемых) полей
Когда шаблон формы отображает все подразделы, маркеры
###SUB_REQUIRED_FIELDS_WARNING###
и 
###SUB_REQUIRED_FIELD_[field name]###

удаляются. При обычной ошибке “required” (поле не заполнено), поле  SUB_REQUIRED_FIELDS_WARNING остается, и отображается содержащееся в нем сообщение об ошибке.
Для определенности, скажем, что поле "email" не заполнено. Тогда можно вставить в подраздел маркер
###SUB_REQUIRED_FIELD_email###
Обычно он удаляется, но он остается, если поле email содержит ошибку, при этом нужно дать специальное предупреждение, относящееся к этому полю.

Вывод других сообщений об ошибках
Можно использовать и другие формы оценки, кроме простой проверки “required”. Это относится к режимам “create” и“edit”, через свойства “.evalValues.[поле] = [список кодов]”. Для того, чтобы сказать пользователям, что конкретно неправильно, можно определить сообщения об ошибках посред­ством свойства .evalErrors, значения которого будут замещать маркер ###EVAL_ERROR_FIELD_[field name]###.
Например, среди списка кодов оценки поля email определен код "uniqueLocal". Это сделано для того, чтобы убедиться, что адрес email не используется повторно. Это можно определить так:
create.evalValues {
  email = uniqueLocal, email
}

И устанавливается сообщение об ошибке, вроде этого:
evalErrors.email {
  uniqueLocal = Возможно Вы уже регистрировались с этим адресом email!
  email = Неверный адрес email!
}

Если адрес email уже имеется в базе данных, происходит ошибка, и поле ###EVAL_ERROR_FIELD_email### замещается сообще­нием об ошибке “Возможно Вы уже регистрировались с этим адресом email!”.

Заполнение формы значениями по умол­чанию
Значения по умолчанию в форму можно передать, используя тот же синтаксис, что и в форме. Например, так назначаются значения по умолчанию для name и email:
...?FE[tt_address][name]=Mike%20Tyson&FE[tt_address][email]=mike@trex.us&doNotSave=1&noWarnings=1

Обратите внимание, голубым цветом отмечены значения полей (должны быть rawurlencoded. В javascript эта функция вызывается через escape()), а красным — необходимые значения, если НЕ нужно сохранять запись при этом действии и НЕ нужно выводить сообщение об ошибке, если в некоторые требуемые поля не введены значения.
Список кодов-проверок
Проверочные коды:
Описание:
uniqueGlobal
Требуется, чтобы значение поля было уникальным в глобальном масштабе, что это значение не должно встречаться в тех же полях для любых других записей из этой таблицы.
uniqueLocal
Подобно uniqueGlobal, но требуется, чтобы значение было уникальным лишь для записей с текущим PID. Так, если записи имеют разные значения pid, у них может быть одно и то же значение этого поля.
twice
Требуется, чтобы значение этого поля соответствовало значению вторичного поля [fieldname]_again посылаемого в форму. Полезно для ввода паролей. Например, если название поля для пароля – “user_pass”, то просто добавьте второе поле, с названием “user_pass_again” и установите код-оценку "twice". 
email
Требуется, чтобы значением поля был адрес email, хотя бы в форме [name]@*[domain].[tld]
required
Просто требуемое поле (обрезаемое значение). 0 (ноль) не соответствует требованиям!
atLeast
atMost
Определение минимум / максимум символов, введенных в поле.
Пример, требуется хотя бы 5 символов:  atleast [5]  
inBranch
inBranch требует, чтобы значение (обычно поле pid) входили в список id страниц (pid), определенных в параметрах inBranch. Параметры задаются следующим образом [root_pid; depth; beginAt]
Пример, список pid, глубиной в один уровень, начиная со страницы 4 (включительно): inBranch [4;1]
unsetEmpty
Никакой ошибки не выводиться. Просто сбрасывает поля, если значения в поле нет. То есть текущие значения не перезаписываются, если в поле нет значения.
[tsref:(script).fe_adminLib.evalErrors.(field).(evalCode)]

Загрузка файлов
fe_adminLib может получать файлы через формы. Но на данный момент имеются существенные ограничения. В идеале, процесс должен обрабатываться классом t3lib_tcemain, использующимся во внутреннем интерфейсе. Фактически это возможно и будет так, но не на данном этапе. Замечательно то, что tcemain.php отлично справляется с копированием/удалением фалов в определенном поле, и даже обрабатывает это независимо от метода сохранения списка файлов или использования отношений MM к записям (смотрите раздел tables.php в "Inside TYPO3").
Так файлы обрабатываются в fe_adminLib и текущие ограничения:
Загружать файлы можно ТОЛЬКО через режим "создания" записи. В любом случае, нельзя отредактировать прикрепленный файл (это может измениться в будущем). В любом случае, можно использовать режим "удаления".
Можно использовать режим ПРЕДВАРИТЕЛЬНОГО ПРОСМОТРА вместе с "созданием". Работает примерно так: если используется режим предварительного просмотра, временно загруженный файл копируется с уникальным именем (с приставкой названия таблицы) в папку typo3temp/. Затем значение поля устанавливается на название файлов в списке. При одобрении предварительно просматриваемых записей пользователем, временные файлы копируются в папку uploads/*(или другую, определенную в TCA). Ограничения в том, что временные файлы в typo3temp/ НЕ удаляются при копировании в папку для загрузок (может быть исправлено) и конечно не удаляется при ошибках (не может быть исправлено, так как пользователь может вернуться). Если предварительный просмотр не утвержден по причине изменения каких-либо значений, файлы нужно загружать снова (может быть исправлено).
Расширения TCA позволяют игнорировать поля! Но можно определить список расширений, которые могут загружать файлы, через свойство .parseValues из fe_adminLib
Ограничения на размер файлов из TCA игнорируются! Но можно определить максимальный размер файла в килобайтах посред­ством свойства .parseValues из fe_adminLib
Работает лишь с полями, настроенными на список названий файлов через запятую (не MM, смотрите документ “Inside TYPO3”, относительно MM отношений для файлов).
Рекомендуется использовать отдельную папку для файлов, получаемых через fe_adminLib. В TYPO3 testsite используется папка uploads/photomarathon/ для изображений. Это упрощает очистку при ошибках в файлах и неверных ссылках в записях.
Названия полей для файлов
Представим, что имеется поле “picture” в таблице “user_cars”, элемент формы выглядит примерно так:
<input type="file" name="FE[user_cars][picture][]">

Если нужно загрузить несколько файлов в это поле, элементы формы будут выглядеть примерно так:
<input type="file" name="FE[user_cars][picture][]">
<input type="file" name="FE[user_cars][picture][]">
<input type="file" name="FE[user_cars][picture][]">

Для полей с названиями файлов используйте тип blob и зарезервируйте для них по крайней мере 32 символа.
Замечание: убедитесь, что всегда в конце названия поля добавляете квадратные скобки ('...[]')! Иначе это не сработает!


tipafriendLib.inc


Файлы:
Файл:
Описание:
tipafriendLib.inc
Основной класс для отображения формы Tip-a-Friend
Вызовите его из объекта USER cObject через 'userFunc = user_tipafriend->main_tipafriend'
tipafriend_template.tmpl
Пример файла шаблона. 
Пример:
Рабочую настройку смотрите в  static_template 'plugin.tipafriend'.
Статический шаблон
plugin.tipafriend
tipafriendLib.inc properties
Свойство:
Тип данных:
Описание:
По умолчанию:
templateFile
resource
Файл шаблона. 
Смотрите пример в 'media/scripts/tipafriend_template.tmpl'

code
string /stdWrap
Код для определения того,что делает сценарий. Чувствительно к регистру.

defaultCode
string
Код по умолчанию (смотрите выше) при пустом значении. По умолчанию ничего не установлено и появляется попощь.

wrap1
->stdWrap
Глобальная обертка 1. Разбивается в маркерах ###GW1B### и ###GW1E###. Не изменяет введенное значение, а только лишь помещает его во что-то.

Пример:
wrap1.wrap = <B> |</B>

wrap2
->stdWrap
Глобальная обертка 2 (смотрите выше).

color1
string /stdWrap
Значение для маркера ###GC1### (Глобальный цвет 1)

color2
string /stdWrap
Значение для маркера ###GC2### (Глобальный цвет 2)

color3
string /stdWrap
Значение для маркера ###GC3### ( Глобальный цвет 3)

typolink
->typolink
Настройка TypoLink для TIPLINK на страницу TIPFORM. .additionalParams добавляет параметр “&tipUrl=”

htmlmail
boolean
Если установлено, создается и отсылается в виде HTML (обычная текстовая версия также отсылается).

[tsref:(script).tipafriend]

plaintextLib.inc
Файлы:
Файл:
Описание:
plaintextLib.inc
Основной класс, используемый для отображения содер­жимого с простым текстом.
Вызывается из USER cObject через "userFunc = user_plaintext->main_plaintext".
plaintext_content.tmpl
Пример файла-шаблона. 
Пример:
Рабочую настройку смотрите в 'plugin.alt.plaintext'.
Статический шаблон
plugin.alt.plaintext
plaintextLib.inc properties
Свойство:
Тип данных:
Описание:
По умолчанию:
siteUrl
url
Url сайта.

defaultOutput
untrimmed string
Вывод по умолча­нию, если CType не сформирован.

uploads.header
untrimmed string
Заголовок для загрузок

images.header
untrimmed string
Заголовок для изображений

images.captionHeader
untrimmed string
Заголовок для графических заголовков

images.linkPrefix
untrimmed string
Префикс для ссылок на изображения

.header
defaultType
int
Тип, используемый по умолча­нию

date
date-config
Для даты заголовка

datePrefix
untrimmed string
Префикс для даты заголовка

linkPrefix
untrimmed string
Префикс для ссылок заголовка

[1-5].preLineLen
int
Длина строки перед заголовком

[1-5].postLineLen
int
Длина строки после заголовка

[1-5].preBlanks
int
Количество пустых строк перед заголовком

[1-5].postBlanks
int
Количество пустых строк после заголовка

[1-5].stdWrap
->stdWrap
Для текста заголовка

[1-5].preLineChar
string
Символ в pre-line

[1-5].postLineChar
string
Символ в post-line

[1-5].preLineBlanks
int
Количество пустых строк между заголовком и pre-line

[1-5].postLineBlanks
int
Количество пустых строк между заголовком и post-line

[1-5].autonumber
boolean
Если установлено, номер, предваряющий каждый заголовок. Номер относиться к количеству элемен­тов содер­жимого в выборке.

[1-5].prefix
untrimmed string
Префикс строки заголовка

bulletlist.[0-3].bullet
untrimmed string
Маркер для маркированного списка, шаблон [0-3]

bulletlist.[0-3].secondRow
untrimmed string
Если установлено, используется для строк во второго уровня маркированных списков.

menu
cObject
cObject для формирования меню. Выводимое освобождается от тегов и ссылок. Далее, все <BR> преобразуются в символ chr(10)

shortcut
cObject
cObject для формирования других элементов. Смотрите настройки ниже, просто использующие этот объект для формирования  других tt_content элементов в виде простого текста.

bodytext.stdWrap
->stdWrap
stdWrap для основного текста. Смотрите примерную настройку ниже.
 
userProc
название функции
Позволяет обработать каждый элемент содержимого перед выводом. Свойство “parentObj” массива настроек, содержит ссылки на объекты  plainText, вызывая функцию.

[tsref:(script).plaintextLib]

Тип данных "untrimmed string" значит, что можно вводить строку как обычно, но при вводе значения в двух вертикальных линиях, оно НЕ будет очищаться. Обычные значения очищаются от пустых знаков в начале и конце строки.
Пример:
lib.renderObj = USER
lib.renderObj.userFunc = user_plaintext->main_plaintext
lib.renderObj {
  header.defaultType = 1
  header.date = D-m-Y
  header.datePrefix = |Date: |
  header.linkPrefix = | - Headerlink: |
  header.1.preLineLen = 76
  header.1.postLineLen = 76
  header.1.preBlanks = 1
  header.1.stdWrap.case = upper

  header.2 < .header.1
  header.2.preLineChar = *
  header.2.postLineChar = *

  header.3.preBlanks = 2
  header.3.postBlanks = 1
  header.3.stdWrap.case = upper
  
  header.4 < .header.1
  header.4.preLineChar= =
  header.4.postLineChar= =
  header.4.preLineBlanks= 1
  header.4.postLineBlanks = 1

  header.5.preBlanks = 1
  header.5.autonumber = 1
  header.5.prefix = |: >> |


  siteUrl = {$plugin.alt.plaintext.siteUrl}
  defaultOutput (
|
[Unrendered Content Element; ###CType### ]
|
  )

  uploads.header = |DOWNLOADS:|

  images.header = |IMAGES:|
  images.linkPrefix = | - Imagelink: |
  images.captionHeader = |CAPTION:|

  bulletlist.0.bullet = |*  |

  bulletlist.1.bullet = |#  |

  bulletlist.2.bullet = | - |

  bulletlist.3.bullet = |>  |
  bulletlist.3.secondRow = |.  |
  bulletlist.3.blanks = 1

  menu = <tt_content.menu.20
  shortcut = <tt_content.shortcut.20
  shortcut.0.conf.tt_content = <lib.renderObj
  shortcut.0.tables = tt_content

  bodytext.stdWrap.parseFunc.tags {
    link < styles.content.parseFunc.tags.link
    typolist = USER
    typolist.userFunc = user_plaintext->typolist
    typolist.siteUrl = {$plugin.alt.plaintext.siteUrl} 
    typolist.bulletlist < temp.renderObj.bulletlist
    typohead = USER
    typohead.userFunc = user_plaintext->typohead
    typohead.siteUrl = {$plugin.alt.plaintext.siteUrl}
    typohead.header < temp.renderObj.header
    typocode = USER
    typocode.userFunc = user_plaintext->typocode
    typocode.siteUrl = {$plugin.alt.plaintext.siteUrl}
  }
}
Приложение B – стандартные шаблоны
static_template
В этом разделе справочника по TypoScript представлены стандартные шаблоны, входящие в статические таблицы TYPO3, "static_template". Недопустимо самостоятельно изменять эти таблицы, вместо этого отправляете предложения по исправлению ошибок или добавлению шаблонов, либо других разделов TypoScript, через сайт www.typo3.com.
"static_template" публикуются в новых версиях. Старые записи в static_template НЕ изменяются от версии к версии (до финального выпуска), если они не находятся в разработке и явно не отмечены в примечании, что они еще не доделаны! Изменения могут вноситься до тех пор, пока проект TYPO3 не будет окончательно выпущен!
Media
Стандартные шаблоны используют стандартные медиа файлы, вроде gif изображений и шрифтов. Они расположены в папке "typo3/sysext/cms/tslib/media/" (в старый версиях в папке "media/") относитель­но корня сайта TYPO3.
Приложение C – включение сценариев PHP
Введение
Несмотря на то, что многое можно сделать через сам TypoScript, иногда лучшим решением оказывается включение на сайт своих сценариев PHP. Но следует понимать и учитывать некоторые обстоятельства. Например, система буферизации: страница, воспроизводимая через TYPO3 обычно кешируется в базе данных. Это делается из соображений производительности при отображении той же страницы в следующий раз. Но это также означает, что свой код можно только лишь включить, если он выводит что-либо по правилам шаблона, в который он включен! Невозможно вывести в TypoScript код для конкретного браузера, если шаблон не может различать браузеры. Если сделать это, то страница будет помещена в кеш с кодом HTML, ориентированным на специфический браузер, и в следующий раз, в другом браузере, эта страница будет возвращена из кеша с неправильным кодом HTML. Если в настройках установлены корректные условия для "другого браузера", то при запросе страницы будет сформирован другой код (который также будет помещен в кеш, но для использования в другом браузере!), при этом оба браузера получат одну и ту же страницу из кеша, но для нее будет использоваться разный код HTML.
Настройки TypoScript
Следующие объекты относятся к непосредственному включению кода PHP в шаблоны.
PHP_SCRIPT
Так включается сценарий PHP. Не нужно давать сценарию расширение ".php", лучше ".inc", так как он предназначен для включения, а не для непосред­ственного выполнения.
ЗАМЕЧАНИЕ: этот параметр игнорируется, если в localconf.php установлен параметр  $TYPO3_CONF_VARS['FE']['noPHPscriptInclude']=1;.
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource /stdWrap
Включаемый файл. В файле должен быть настоящий код PHP! Он включается посред­ством "include()";

Указания:
1) Все содержимое должно быть в переменной $content. Вывода через echo быть не должно!

2) Вызовите $GLOBALS['TSFE']->set_no_cache(), если нужно отключить кеширование страницы. Установите во время разработки! А также, если выводимое не должно помещаться в кеш.

ЗАМЕЧАНИЕ: если во включаемом сценарии имеется ошибка анализа, функция $GLOBALS['TSFE']->set_no_cache() НЕ выполняется, поэтому кеширование не отключается. При ошибках анализа нужно очищать кеш страниц вручную после исправления ошибки!
3) массив $conf содержит настройки для PHP_SCRIPT cObject. Сделайте debug($conf) для просмотра его содержимого при отладке!
Смотрите дальнейшие приложения в этом документе для указаний по написанию собственных включаемых сценариев PHP.

stdWrap
->stdWrap


[tsref:(cObject).PHP_SCRIPT]
PHP_SCRIPT_INT
(смотрите PHP_SCRIPT)
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource /stdWrap
Включаемый файл. В файле должен быть настоящий код PHP! Он включается посред­ством "include()";

Предназначение:
В основе работает также, как PHP_SCRIPT. Но главная разница в том, что вставка PHP_SCRIPT_INT (internal — внетренне, в противоположность external - внешне, смотрите ниже) просто вставляет строку-разделитель в код, а затем сериализует текущий cObj, затем помещает его в $GLOBALS['TSFE']->config['INTincScript']-array. Этот массив сохраняется с кешированным содержимым страницы.
Но включение сценария подобным образом позволяет избежать отключения кеширования страницы. Причина в том, что кешированное содержимое страницы содержит строку-разделитель, и при получении "статической" страницы из кеша, в строку разделитель вставляется объект динамического содержимого.
Это компромисс из всех трех PHP_SCRIPT-cObjects, так как данные страницы, так как все данные страницы помещаются в кеш, но по прежнему включается сцераний pagegen.php, инициализирующий все классы, объекты и т.п. При этом обеспечивается окружение для сценария почти такое же, как и для PHP_SCRIPT, так как он вызывается изнутри объекта класса tslib_cObj. Возможно работать со всеми функциями этого класса. Но все "статическое" содержимое страницы формируется единожды, кешируется, а динамически формируется только лишь включаемый сценарий.

Правила:
- вызовы $GLOBALS['TSFE']->set_no_cache() и $GLOBALS['TSFE']->set_cache_timeout_default() в этой ситуации не имеют никакого значения.
- Разбор ошибок не затрагивается кешированием.
- Имейте ввиду, что определенные глобальные переменные не могут быть установлены как обычно, а, значит, и не доступны обычным образом при работе в этом режиме. Большинство сценариев не потребуют внесения изменений.
- Хрупкие зависимости и использование LOAD_REGISTER, так как PHP_SCRIPT_INT формируется после вывода кешированного содержимого, поэтому изменяется порядок событий, используемый LOAD_REGISTER может не работать.
- Нельзя использовать вложения PHP_SCRIPT_INT и PHP_SCRIPT_EXT в PHP_SCRIPT_INT. Возможно только вложение PHP_SCRIPT cObjects.

includeLibs
список ресурсов
Список ресурсов через запятую, включаемых как сценарии PHP (через функцию include_once()) при включении этого сценария.
Это возможно, так как любые включаемые файлы будут известны перед включением сценариев. Это невозможно для обычного PHP_SCRIPT cObject.

stdWrap
->stdWrap


[tsref:(cObject).PHP_SCRIPT_INT]

PHP_SCRIPT_EXT
(смотрите PHP_SCRIPT)
Свойство:
Тип данных:
Описание:
По умолчанию:
file
resource /stdWrap
Включаемый файл. В файле должен быть настоящий код PHP! Он включается посред­ством "include()";

Предназначение:
В основе работает также, как PHP_SCRIPT_INT, так как для этого типа включаемого сценария по прежнему вставляется строка-разделитель. Но разница в том, что содержимое разрывается перед самым выводом в браузер.
В основном это означает, что PHP_SCRIPT_EXT (external -внешний, так как включается в глобальную область в файле index_ts.php!!!) может напрямую выводить данные через операторы echo! 
Это слишком "сырой" вариант PHP_SCRIPT, так как он не включается изнутри объекта, и возможно использовать лищь самые стандартные функции при вызове из TYPO3.
Это самый быстрый из трех возможных PHP_SCRIPT-cObjects, так как все данные страницы кешируются, а динамическое содержимое формируется напрямую сценарием php.

Правила:
- Все содержимое может либо 1) непосред­ственно выводиться через echo, либо 2) возвращаться в $content.
- вызовы $GLOBALS['TSFE']->set_no_cache() и $GLOBALS['TSFE']->set_cache_timeout_default() в этой ситуации не имеют никакого значения.
- Разбор ошибок не затрагивается кешированием.
- В глобальной области имен, массив $REC содержит текущую запись при "вставке" файла на страницу, а массив $CONF содержит настройки для сценария.
- Не путайте с глобальными переменными под названиями $EXTiS_* .

includeLibs
список ресурсов
Список ресурсов через запятую, включаемых как сценарии PHP (через функцию include_once()) при включении этого сценария.
Это возможно, так как любые включаемые файлы будут известны перед включением сценариев. Это невозможно для обычного PHP_SCRIPT cObject.

stdWrap
->stdWrap


[tsref:(cObject).PHP_SCRIPT_EXT]
Включение собственного сценария
Сценарий включается через функцию PHP_SCRIPT внутри класса "tslib_cObj" сценария "tslib_content.php". Таким образом файл является частью этого объекта (tslib_cObj) и функции. Вот почему необходимо возвращать все содержимое в переменной "$content", а любая настройка TypoScript доступна из массива "$conf" (он может быть не установлена совсем, поэтому проверяйте ее через is_array()!).
$conf
Массив $conf содержит настройки для PHP_SCRIPT cObject. Воспользуйтесь debug($conf) для просмотра его содержимого в целях отладки!
$content
Все содержимое возвращается в эту переменную. 
Помните, ничего не выводите непосред­ственно в своем сценарии (кроме отладки кода)!
Пробелы
Так как ничего не посылается в браузер перед тем, как все не будет сформировано и возвращено в index_ts.php, изначально отвечающий за процесс формирования страницы, необходима убедиться, что нет никаких пробелов до и после тегов <?...?> во включаемых или библиотечных сценариях!
$GLOBALS['TSFE']->set_no_cache()
Если нужно отключить кеширование страницы, вызовите функцию $GLOBALS['TSFE']->set_no_cache(). Вызывайте ее в процессе разработки! А также, если создаваемое содержимое не должно помещаться в кеш. 
Замечание: если в сценарии PHP допущена синтаксическая ошибка, препятствующая его выполнению, то функция $GLOBALS['TSFE']->set_no_cache() не будет выполнена, а страница будет помещена в кеш! При этом исправьте ошибку, очистите кеш страниц вручную и попытайтесь вывести страницу снова. Это справедливо лишь для PHP_SCRIPT, а не для PHP_SCRIPT_INT и PHP_SCRIPT_EXT, которые выполняются после помещения страницы в кеш!
Пример:
$GLOBALS['TSFE']->set_no_cache();

$this->cObjGetSingle(  value  ,  properties  )
Получение объекта-содер­жимого из массива $conf (обратитесь к разделу "Пример" ниже за примером использования!).
Пример:
$content = $this->cObjGetSingle($conf['image'], $conf['image.']);

Так будет возвращен любой IMAGE cObject в свойстве "image" массива conf для включаемого сценария!

$this->stdWrap( value, properties )
stdWrap для "value" (значения) содержимого для настроек массива "properties".
Пример:
$content = $this->stdWrap($content, $conf['stdWrap.']);

Это stdWrap для содержимого со свойствами ".stdWrap" массива $conf!

Внутренние переменные в основном объекте внешнего содержимого, TSFE (TypoScript Front End)
Некоторые переменные в глобальном объекте TSFE, о которых нужно знать. Они все ТОЛЬКО ДЛЯ ЧТЕНИЯ (Читай: не меняйте их!)!!!. Смотрите полное описание в классе tslib_fe.
Если, например, понадобиться доступ к переменной "id", можно написать: $GLOBALS['TSFE']->id
Переменная:
PHP-тип:
Описание:
По умолчанию:
id
int
id страницы.

type
int
Тип.

page
array
Запись страницы.

fe_user
object
Текущий внешний пользователь. 
Запись пользователя в $GLOBALS['TSFE']->fe_user->user, если он авторизован.

loginUser
boolean
Флаг, говорящий что пользователь авторизован.
0
rootLine
array
rootLine (полный путь к корню дерева страниц, не только для текущего сайта!). Корневая линия для текущего сайта находится в $GLOBALS['TSFE']->tmpl->rootLine.

sys_page
object
Объект с функциями страницы (pagefunctions object). Смотрите t3lib/page.php.

gr_list
string (list)
Список групп, упорядоченный по номерам. Группа -1 = нет авторизации.

beUserLogin
boolean
Флаг, говорящий об авторизации внутреннего пользователя!
0

Глобальные переменные
Переменная:
PHP-тип:
Описание:
По умолчанию:
BE_USER
object
Объект внутреннего пользователя (если есть).
не установлено
TYPO3_CONF_VARS
array
Настройки TYPO3.

TSFE
object
Основной объект внешнего интерфейса.


Пример
Пример использования включения сценариев.
Здесь мы хотели бы использовать сторонние библиотеки, не являющиеся частью TYPO3. Поэтому мы используем возможность включения библиотеки с самого начала анализа страницы.
Сначала поместим такую строку TypoScript в поле "Настройка" для шаблона:
config.includeLibrary = fileadmin/scripts/include.inc

Теперь подключен файл include.inc (в typo3/sysext/cms/tslib/pagegen.php). Здесь он выглядит так:
файл:   fileadmin/scripts/include.inc
<?
	...
	include('fileadmin/scripts/hello_world.inc');
	include('fileadmin/scripts/other_library.inc');
	...
?>
Как видите, этот файл включает нашу библиотеку "hello_world" и остальные! 

Файл hello_world.inc выглядит так:
файл:   fileadmin/scripts/hello_world.inc
<?
class hello_world {
	function theMessage() {
		return "Hello World";
	}
}
?>

До сих пор ничего не происходит, за исключением подключения наших библиотек, готовых к использованию.
Теперь нужно использовать выводимое в классе hello_world где-нибудь на странице. В коде настроек TypoScript, создадим объект содержимого, включающий третий сценарий:
page.100 = PHP_SCRIPT
page.100.file = fileadmin/scripts/surprise.inc

surprise.inc выглядит так:
файл:   fileadmin/scripts/surprise.inc
<?
	$hello_world_object = new hello_world;		// Создается новый экземпляр
	$contentBefore = $this->cObjGetSingle($conf['cObj'], $conf['cObj.']);
	$content = $contentBefore . $hello_world_object->theMessage();
	$content = $this->stdWrap($content, $conf['stdWrap.']);
?>

Строка 1: создается объект PHP $hello_world_object.
Строка 2: получение содержимого определенного нами cObject, "cObj".
Строка 3: результат строки 2 объединяется с результатом функции "theMessage" объекта $hello_world_object.
Строка 4: окончательное содержимое использует свойство функции stdWrap ".stdWrap" массива $conf.
Выводится:
с такой настройкой
page.100 = PHP_SCRIPT
page.100.file = fileadmin/scripts/surprise.inc

выводится следующее:
Hello World

с такой настройкой
page.100 = PHP_SCRIPT
page.100 {
	file = fileadmin/scripts/surprise.inc
	cObj = TEXT
	cObj.value = Joe says:&nbsp;
}

следующее:
 Joe says: Hello World

с такой настройкой
page.100 = PHP_SCRIPT
page.100 {
	file = fileadmin/scripts/surprise.inc
	cObj = TEXT
	cObj.value = Joe says:&nbsp;
	stdWrap.wrap = <font color="red"> | </font>
	stdWrap.case = upper
}

следующее:
JOE SAYS: HELLO WORLD

Конец урока.
Сохранение данных пользователя или сессии
Это довольно просто в TYPO3.
Данные пользователя — это данные, сопровождающие авторизацию пользователей. Как только пользователь вышел с сайта, данные становятся недоступны и не могут быть изменены.
Данные сессии — данные о просмотре сайта пользователем. Пользователь может быть авторизованным пользователем, но данные о его сессии  связаны с "сеансом просмотра", а не с его id пользователя. Это значит, что человек все еще будет предоставлять данные о своей сессии, несмотря на то, что он вышел с сайта. Как только он закроет страницу в браузере, данные о нем исчезнут. 
Также нужно знать, что данные сессии по умолчанию доступны в течение 24 часов.
Получение и сохранение данных пользователя / сессии производится через следующие функции:
$GLOBALS['TSFE']->fe_user->getKey(type, key)
"type" либо "user", либо "ses", что определяет область данных — пользователь или сессия .
"key"  — это "название" под которым сохраняются данные. Это могут быть массивы и обычные скаляры. 
Помните, что ключ "recs" зарезервирован для встроенной "покупательской корзины". Как и "sys" (стандартные модули и код для TYPO3).
Пример:
if ($GLOBALS['TSFE']->loginUser) {
	$myData = $GLOBALS['TSFE']->fe_user->getKey('user', 'myData');
} else {
	$myData = $GLOBALS['TSFE']->fe_user->getKey('ses', 'myData');
}

Так из данных пользователя получаются сохраненные данные с ключом "myData", но, если нет авторизованных пользователей, они получаются из данных сессии.

$GLOBALS['TSFE']->fe_user->setKey(type, key, data)
"type"  либо "user", либо "ses", это определяет область данных — данные пользователя или сессии.
"key" — это "название", под которым сохраняются данные. 
Помните, что ключ "recs" зарезервирован для встроенной "покупательской корзины". Как и "sys" (стандартные модули и код для TYPO3).
"data" — это переменная, которую нужно сохранить. Это могут быть массивы и обычные скаляры. 
Пример:
$myConfig['name'] = 'paul';
$myConfig['address'] = 'Main street';
$GLOBALS['TSFE']->fe_user->setKey('ses', 'myData', $myConfig);

Так сохраняется массив $myConfig с ключом "myData" в данных сессии. Они хранятся до тех пор, пока "paul" находится на сайте!

Использование встроенной "покупательской корзины"
TYPO3 имеет функционал покупательской корзины для данных сессии.
При утверждении данных формы (метод post/get, или через строку запроса), они сохраняются в массиве "recs" как данные сессии с ключом recs
Синтаксис следующий:
recs[table_name][uid_of_record]

Пример:
Этот элемент формы меняет значение регистра формы с uid=345 из таблицы "tt_products" в typo3. Обратите внимание, что сама по себе запись НЕ меняется ни в коем случае, меняется лишь "счетчик" в данных сессии, указывающий на "количество элементов", которые изменились в таблице.
<input name="recs[tt_products][345]">

Замечание о флажках:
При создании формы с переключателями, значения переключателей посылается в MSIE/Netscape ТОЛЬКО при его включении! Если нужно отсылать значения отключенного переключателя, создайте скрытые поля формы с теми же названиями перед переключателем!
Пример:
<INPUT type="hidden" name="recs[tt_content][345]" value="0">
<INPUT type="checkbox" name="recs[tt_content][345]" value="1">

Очистка "корзины"
Так можно очистить корзину:
 <INPUT type="hidden" name="recs[clear_all]" value="1">

Приложение D – index.php
Введение
index.php — это основной сценарий, служащий для отображения страниц в TYPO3 / TypoScript. Эта страница отображает некоторую информацию о сценарии и его использовании.
Обычно страница запрашивается по значениям ее "id" и, возможно, "type".
"id" указывает на страницу. Это – целое число. Если предоставляется строка, то она рассматривается как псевдоним, и ищется соответствующая страница.
"type" определяет какого типа эта страница. Всегда целое число (0-255). Если "type" не определен, считается, что он равен нулю. "type" используется для набора фреймов. Набор фреймов может иметь "type=0" (или ничего), а страницы в разных фреймах должны иметь "type=1", "type=2" и "type=3". В TypoScript объект PAGE определяется для каждого типа, поэтому TYPO3 создает разные страницы, в зависимости от их типа. Обычно, объект PAGE отображает содер­жимое с названием "page" и с "type=1".

Передача данных в index.php
Может понадобиться передать данные в index.php по различным причинам. Имеется стандартная процедура передачи их в сценарий:
Авторизация/выход:
Определяется классом "t3lib_userauth", просматривающим переменную "logintype". Если она установлена, авторизация пройдена.
Вводиться может как через GET, так и через POST методы. 
Авторизация:
	logintype = "login";
	pass =  пароль;
	user = имя пользователя;
	pid = id страницы с записями пользователей. Это значение не нужно, если установлена переменная $TYPO3_CONF_VARS['FE']['checkFeUserPid'].
	(redirect = не используется)
Выход:
	logintype = "logout".

За дополнительной информацией обратитесь к cObject FORMS.

Поиск
Определяется по cObject SEARCHRESULT, производящим поиск при установленных "sword" && "scols". Поиск ДОЛЖЕН предоставляться на страницу с объектом содержимого для поиска!
Вводиться может как через GET, так и через POST методы. 
Поиск:
	sword = искомое слово;
	stype = тип поиска;
	scols = таблица/столбец для поиска;
	locationData = ссылка на запись с формой. Используется для поиска начальной точки поиска (ТОЛЬКО в методе POST);
	(redirect  = не используется);
	scount = используется в результатах поиска, для отображения количества результатов.
	spointer = используется в результатах поиска, для отображения начальной точки для следующих результатов.
За дополнительной информацией обратитесь к cObject SEARCHRESULT.
Почтовые формы
Определяется основным сценарием "index.php", ищущим установленную переменную "formtype_mail" (может быть кнопкой отправки).
ДОЛЖНО вводиться через метод POST. Также должны быть соответствующие REFERER и HTTP_HOST. К тому же, должна отправляться переменная locationData и хотя бы указатель на uid читаемой страницы.

Передача данных в базу данных
Определяется основным сценарием "index.php", ищущим установленную переменную "formtype_db"(может быть кнопкой отправки).
ДОЛЖНО вводиться через метод POST. Также должны быть соответствующие REFERER и HTTP_HOST. Для установки сценария обработки вводимых данных должна быть ссылка на объект FE_DATA.
Смотрите примеры в папке typo3/sysext/cms/tslib/media/scripts/, например "guest_submit.inc".
